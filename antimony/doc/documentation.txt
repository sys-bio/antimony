Antimony basics:

-Species and reactions
-Constants and formulas
-Modules
-Events
-Compartments
-DNA














To use Antimony as a library in C, C#, .NET, or others, the available functions
are listed in the file 'antimony_api.h'.  To use, first call the 'loadModel'
function, which loads all models from the file in question into memory. 
Information from these models can be retrieved using the other functions in
this file.

All api functions that return pointers expect that the client (i.e. you) 
will free the pointer after you're done with it.  If you really don't 
want to keep track of them all, you may instead use the function 
'freeAll()', which will free all pointers ever allocated for you.  Do 
note that if you want to use 'freeAll', you must never free any pointer 
yourself, as the api will not know you have done so, and will try to 
free it itself.

Some functions return pointers to arrays of pointers, and a few even return
pointers to arrays of pointers to arrays of pointers.  Some frameworks don't
seem to be able to handle this; in these cases, functions are provided that
just give you the base pointer--these functions have 'Nth' in them, or even
'Nth' and 'Mth' for the arrays of arrays.  If the 'char**' functions work for
you, though, you shouldn't need the 'Nth' functions.

Terminology:

Antimony classifies every identifier in your model as a 'symbol' or a 
'module'.  (Modules that are sub-modules are associated with both the 
module name and a local symbol name.  Only base modules have no symbol 
associated with them.)

Symbols come in four basic groups:  Formulas, Species, Reactions, and
Modules.  They can also be constant (if you set them once at the beginning of
the simulation, they will never change) or variable (they can have a starting
value, but will change over the course of the simulation).

Formulas:

Formulas are variables that have nothing associated with them but an equation. 
The equation can be as simple as '5' or as complictated as a rate law.  Rate
constants (k values) are typically 'formulas'.  If your model includes DNA,
promoters and operators are also formulas, as the information they contain is
only a rate law, and they are not associated with any single reaction, nor are
they considered 'species' for stoichiometrical purposes.

Antimony determines whether formulas are constant or not from the following
rules:
	- If its equation contains no variables, it is constant.
	- If its equation contains only variables which are constant, it is
	constant.

You can declare a formula 'constant' in your model if you wish, but this will
be overridden if you give it an equation with a non-constant variable in it.

As mentioned, Promoters and Operators are a sub-type of Formula.  This is
solely useful as a bookkeeping method for your program, should you wish it;
antimony itself is otherwise agnostic on the issue.

Species:

Species are participants in reactions.  Species can be declared to be
'proteins', but this is a semantic difference only and will not affect the
operation of the program (you may wish to have it make a difference to yours). 
Species may be declared to be constant; if so, they become 'boundary species',
and do not change their concentration throughout the run of the simulator, nor
do they appear as entries in the stoichiometry matrix.

All species have formulas associated with them, which should define their
starting values (or concentration).

[Note:  I could theoretically check here for const-ness of the formula, which,
for starting values, should indeed be const.  But this might be more trouble
than it's worth?]

Reactions:

Reactions are... well, what species participate in.  A reaction has a 
symbol name, two lists of species and stoichiometries (one for the left 
hand side and one for the right), and a formula that defines the rate at 
which the species on the left hand side are converted to species on the 
right.

Genes are defined in Antimony as Reactions as well.  Typically they will have
an empty list of reactants, and a single protein as a product, but this is not
enforced.  

[Note:  right now, 'interactions' i.e. "s1 -| p3" meaning 'the species s1
inhibits the rate of the reaction p3' are lumped in with reactions.  I need to
more cleanly separate them for client programs such as jarnac, which won't know
what to do with them.]

Right now, you can declare that a reaction is 'constant' but I'm not sure what
that means.  The associated rate is constant?  Maybe all reactions should just
be 'variable', since even if the rate is a constant value, it still defines
something changing over time, and you never want to separate them into two
lists (as far as I know).

Modules:

A variable in a model that is a 'module' refers to a collection of one or more
formulas, species, and reactions that was defined earlier.  A module is not a
species, or a formula, or a reaction, and it makes no sense to refer to one in
one of those contexts.  Similarly, modules cannot be 'constant', as that would
make no sense (it doesn't make a lot of sense to call them 'variable' either,
but at least this way they're all the same).


Given the above, hopefully this list of return types makes sense:

allSymbols:		Everything.  Good for complete translations.
allReactions:		All the reactions.
allInteractions:	All the interactions.
allUnknown:		Everything referred to but never defined.
varSpecies:		All the species that vary during the course of 
			  the simulation
constSpecies:		All the 'boundary species'--those that show up 
			  in reactions, but do not vary during the 
			  course of the simulation.
varProteins:		
constProteins:
varFormulas:
constFormulas:
varAnyDNA:
constAnyDNA: 
varPromoters:
constPromoters: 
varOperators:
constOperators:
varGenes:
constGenes:
subModules:

varSpecies:  	All variable species, regardless of type.
varProteins:  	Just those variable species declared as proteins.
varFormulas:	All variable formulas, regardless of type.
varAnyDNA:	All DNA (Promoters, Operators, and Genes)
varPromoters:	Just those formulas tagged as promoters
varOperators:	Just those formulas tagged as operators
varGenes:	Just those reactions tagged as genes
varReactions:	All reactions, regardless of type
varUnknown:	Any variable used once and never referred to again.
constSpecies:	All constant species, regardless of type (boundary species)
constProteins:	Just those boundary species tagged as proteins.
constFormulas:	All constant formulas, regardless of type.
constAnyDNA:	All constant DNA (promoters, operators, genes)
constPromoters:	Just those constant formulas tagged as promoters.
constOperators:	Just those constant formulas tagged as operators.
constGenes:	Just those constant reactions tagged as genes.
constReactions: All constant reactions
constUnknown:	All constant unknown values (by default, all unknown values are
		  constant)
subModules:	All the submodules (and sub-submodules)
