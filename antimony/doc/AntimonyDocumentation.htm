<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=us-ascii">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-right:0in;
	margin-left:0in;
	font-size:18.0pt;
	font-family:"Times New Roman",serif;
	font-weight:bold;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman",serif;
	font-weight:bold;}
h4
	{mso-style-link:"Heading 4 Char";
	margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
code
	{font-family:"Courier New";}
pre
	{mso-style-link:"HTML Preformatted Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Calibri Light",sans-serif;
	color:#2E74B5;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-link:"Heading 4";
	font-family:"Calibri Light",sans-serif;
	color:#2E74B5;
	font-style:italic;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Calibri Light",sans-serif;
	color:#1F4D78;}
span.HTMLPreformattedChar
	{mso-style-name:"HTML Preformatted Char";
	mso-style-link:"HTML Preformatted";
	font-family:Consolas;}
.MsoChpDefault
	{font-size:10.0pt;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<h2 align=center style='text-align:center'><span style='position:absolute;
z-index:251658240;left:0px;margin-left:450px;margin-top:0px;width:269px;
height:269px'><img width=269 height=269
src="AntimonyDocumentation_files/image001.png"></span><span style='font-size:
48.0pt'>Antimony</span></h2>

<h2 align=center style='text-align:center'><span style='font-size:22.0pt'>A
human-readable,</span></h2>

<h2 align=center style='text-align:center'><span style='font-size:22.0pt'>human-writable,</span></h2>

<h2 align=center style='text-align:center'><span style='font-size:22.0pt'>model
definition language</span></h2>

<h4 align=center style='text-align:center'><span style='font-size:16.0pt'>v2.6,
November 30<sup>th</sup>, 2014</span></h4>

<h4 align=center style='text-align:center'><span style='font-size:26.0pt'>Documentation</span></h4>

<h4 align=center style='text-align:center'><span style='font-size:16.0pt'>by
Lucian Smith</span></h4>

<h3>&nbsp;</h3>

<h3>Table of contents</h3>

<ul type=disc>
 <li class=MsoNormal><a href="#intro">Introduction</a></li>
 <li class=MsoNormal><a href="#whatsnew">What's New</a></li>
 <li class=MsoNormal><a href="#speciesrxns">Species and Reactions</a></li>
 <li class=MsoNormal><a href="#modules">Modules</a> </li>
 <ul type=circle>
  <li class=MsoNormal><a href="#convfactors">Module conversion factors</a></li>
  <li class=MsoNormal><a href="#deletions">Submodel deletions</a></li>
 </ul>
 <li class=MsoNormal><a href="#constvar">Constant and variable symbols</a></li>
 <li class=MsoNormal><a href="#compartments">Compartments</a></li>
 <li class=MsoNormal><a href="#events">Events</a></li>
 <li class=MsoNormal><a href="#asntrules">Assignment Rules</a></li>
 <li class=MsoNormal><a href="#raterules">Rate Rules</a></li>
 <li class=MsoNormal><a href="#display">Display Names</a></li>
 <li class=MsoNormal><a href="#comments">Comments</a></li>
 <li class=MsoNormal><a href="#units">Units</a></li>
 <li class=MsoNormal><a href="#dna">DNA Strands</a></li>
 <li class=MsoNormal><a href="#interactions">Interactions</a></li>
 <li class=MsoNormal><a href="#functions">Function Definitions</a></li>
 <li class=MsoNormal><a href="#files">Other files</a></li>
 <li class=MsoNormal><a href="#importexport">Importing and Exporting Antimony
     Models</a></li>
 <li class=MsoNormal><a href="#conversion">Appendix: Converting between SBML
     and Antimony</a></li>
</ul>

<h3>&nbsp;</h3>

<h3>&nbsp;</h3>

<h3>Introduction</h3>

<p class=MsoNormal>Since the advent of SBML (the Systems Biology Markup
Language) computer models of biological systems have been able to be
transferred easily between different labs and different computer programs
without loss of specificity. But SBML was not designed to be readable or
writable by humans, only by computer programs, so other programs have sprung up
to allow users to more easily create the models they need. Many of these
programs are GUI-based, and allow drag-and-drop editing of species and
reactions, such as <a href="http://sbw-app.org/jdesigner/">JDesigner</a> and <a
href="http://www.tinkercell.com/">TinkerCell</a>. A few, like <a
href="http://sbw-app.org/jarnac/">Jarnac</a>, take a text-based approach, and
allow the creation of models in a text editor. This has the advantage of being
faster, more readily cross-platform, and readable by others without
translation. <a href="http://antimony.sourceforge.net/">Antimony</a> (so named
because the chemical symbol of the element is <a
href="http://en.wikipedia.org/wiki/Antimony">'Sb'</a>) was designed as a
successor to Jarnac's model definition language, with some new features that
mesh with newer elements of SBML, some new features we feel will be generally
applicable, and some new features that we hope will facilitate the creation of
genetic networks in particular. A programming library 'libAntimony' was
developed in tandem with the language to allow computer translation of
Antimony-formatted models into SBML and other formats used by other computer
programs. The basic features of Antimony include the ability to: </p>

<ul type=disc>
 <li class=MsoNormal>Simply define <a href="#speciesrxns">species, reactions,</a>
     <a href="#compartments">compartments,</a> <a href="#events">events,</a>
     and other elements of a biological model.</li>
 <li class=MsoNormal>Package and re-use models as <a href="#modules">modules</a>
     with defined or implied interfaces, and</li>
 <li class=MsoNormal>Create <a href="#modules">'DNA strands'</a> whose elements
     can pass reaction rates to downstream elements, and inherit and modify
     reaction rates from upstream elements.</li>
</ul>

<h3>What's New</h3>

<p>In the 2.6 release of Antimony, some features of hierarchical translation
(deletions in particular) were made more robust, and a number of built-in
distribution functions were added, which are translated to SBML using the
&#8216;distributions&#8217; package, as well as using custom annotations</p>

<p>In the 2.5 release of Antimony, translation of Antimony concepts to and from
the <a
href="http://sbml.org/Documents/Specifications/SBML_Level_3/Packages/comp">Hierarchical
Model Composition</a> package was developed further to be much more robust, and
a new test system was added to ensure that Antimony's 'flattening' routine
(which exports plain SBML) matches libSBML's flattening routine. </p>

<p>In the 2.4 release of Antimony, use of the <a
href="http://sbml.org/Documents/Specifications/SBML_Level_3/Packages/comp">Hierarchical
Model Composition</a> package constructs in the SBML translation became
standard, due to the package being fully accepted by the SBML community. </p>

<p>In the 2.2/2.3 release of Antimony, <a href="#units">units</a>, <a
href="#convfactors">conversion factors</a>, and <a href="#deletions">deletions</a>
were added. </p>

<p>In the 2.1 version of Antimony, the <a href="#files">'<code><span
style='font-size:10.0pt'>import</span></code>'</a> handling became much more
robust, and it became additionally possible to export hierarchical models using
the <a
href="http://sbml.org/Documents/Specifications/SBML_Level_3/Packages/comp">Hierarchical
Model Composition</a> package constructs for SBML level 3. </p>

<p>In the 2.0 version of Antimony, it became possible to export models as <a
href="#importexport">CellML</a>. This requires the use of the CellML API, which
is now available as an SDK. Hierarchical models are exported using CellML's
hierarchy, translated to accommodate their 'black box' requirements. </p>

<p>&nbsp;</p>

<h3>Species and Reactions</h3>

<p class=MsoNormal>The simplest Antimony file may simply have a list of
reactions containing species, along with some initializations. Reactions are
written as two lists of species, separated by a '<code><span style='font-size:
10.0pt'>-&gt;</span></code>', and followed by a semicolon: </p>

<pre>&nbsp;</pre><pre>&nbsp; S1 + E -&gt; ES;</pre>

<p class=MsoNormal>Optionally, you may provide a reaction rate for the reaction
by including a mathematical expression after the semicolon, followed by another
semicolon: </p>

<pre>&nbsp;</pre><pre>&nbsp; S1 + E -&gt; ES; k1*k2*S1*E - k2*ES;</pre>

<p class=MsoNormal>You may also give the reaction a name by prepending the name
followed by a colon: </p>

<pre>&nbsp;</pre><pre>&nbsp; J0: S1 + E -&gt; ES; k1*k2*S1*E - k2*ES;</pre>

<p class=MsoNormal>The same effect can be achieved by setting the reaction rate
separately, by assigning the reaction rate to the reaction name with an '<code><span
style='font-size:10.0pt'>=</span></code>': </p>

<pre>&nbsp;</pre><pre>&nbsp; J0: S1 + E -&gt; ES;</pre><pre>&nbsp; J0 = k1*k2*S1*E - k2*ES;</pre>

<p class=MsoNormal>You may even define them in the opposite order-they are all
ways of saying the same thing. If you want, you can define a reaction to be
irreversible by using '<code><span style='font-size:10.0pt'>=&gt;</span></code>'
instead of '<code><span style='font-size:10.0pt'>-&gt;</span></code>': </p>

<pre>&nbsp;</pre><pre>&nbsp; J0: S1 + E =&gt; ES;</pre>

<p>However, if you additionally provide a reaction rate, that rate is not
checked to ensure that it is compatible with an irreversible reaction. </p>

<p>At this point, Antimony will make several assumptions about your model. It
will assume (and require) that all symbols that appear in the reaction itself
are species. Any symbol that appears elsewhere that is not used or defined as a
species is '<code><span style='font-size:10.0pt'>undefined</span></code>'; '<code><span
style='font-size:10.0pt'>undefined</span></code>' symbols may later be declared
or used as species or as '<code><span style='font-size:10.0pt'>formulas</span></code>',
Antimony's term for constants and packaged equations like SBML's assignment
rules. In the above example, k1 and k2 are (thus far) undefined symbols, which
may be assigned straightforwardly: </p>

<pre>&nbsp;</pre><pre>&nbsp; J0: S1 + E -&gt; ES; k1*k2*S1*E - k2*ES;</pre><pre>&nbsp; k1 = 3;</pre><pre>&nbsp; k2 = 1.4;</pre>

<p class=MsoNormal>More complicated expressions are also allowed, as are the
creation of symbols which exist only to simplify or clarify other expressions: </p>

<pre>&nbsp;</pre><pre>&nbsp; pH = 7;</pre><pre>&nbsp; k3 = -log10(pH);</pre>

<p class=MsoNormal>The initial concentrations of species are defined in exactly
the same way as formulas, and may be just as complex (or simple): </p>

<pre>&nbsp;</pre><pre>&nbsp; S1 = 2;</pre><pre>&nbsp; E = 3;</pre><pre>&nbsp; ES = S1 + E;</pre>

<p class=MsoNormal>Order for any of the above (and in general in Antimony) does
not matter at all: you may use a symbol before defining it, or define it before
using it. As long as you do not use the same symbol in an incompatible context
(such as using the same name as a reaction and a species), your resulting model
will still be valid. Antimony files written by libAntimony will adhere to a
standard format of defining symbols, but this is not required. A complete (if
simple) model </p>

<pre>&nbsp;</pre><pre>&nbsp; J0: S1 + E -&gt; ES; k1*k2*S1*E - k2*ES;</pre><pre>&nbsp; k1 = 3;</pre><pre>&nbsp; k2 = 1.4;</pre><pre>&nbsp; S1 = 30.4;</pre><pre>&nbsp; E&nbsp; = 1.2;</pre><pre>&nbsp; ES = 2.1;</pre>

<h3>Modules</h3>

<p class=MsoNormal>Antimony input files may define several different models,
and may use previously-defined models as parts of newly-defined models. Each
different model is known as a '<code><span style='font-size:10.0pt'>module</span></code>',
and is minimally defined by putting the keyword '<code><span style='font-size:
10.0pt'>model</span></code>' (or '<code><span style='font-size:10.0pt'>module</span></code>',
if you like) and the name you want to give the module at the beginning of the
model definitions you wish to encapsulate, and putting the keyword '<code><span
style='font-size:10.0pt'>end</span></code>' at the end: </p>

<pre>&nbsp;</pre><pre>model example</pre><pre>&nbsp; S + E -&gt; ES;</pre><pre>end</pre>

<p class=MsoNormal>After this module is defined, it can be used as a part of
another model (this is the one time that order matters in Antimony). To import
a module into another module, simply use the name of the module, followed by
parentheses: </p>

<pre>&nbsp;</pre><pre>model example</pre><pre>&nbsp; S + E -&gt; ES;</pre><pre>end</pre><pre>&nbsp;</pre><pre>model example2</pre><pre>&nbsp; example();</pre><pre>end</pre>

<p class=MsoNormal>This is usually not very helpful in and of itself-you'll
likely want to give the submodule a name so you can refer to the things inside
it. To do this, prepend a name followed by a colon: </p>

<pre>&nbsp;</pre><pre>model example2</pre><pre>&nbsp; A: example();</pre><pre>end</pre>

<p class=MsoNormal>Now, you can modify or define elements in the submodule by
referring to symbols in the submodule by name, prepended with the name you've
given the module, followed by a '<code><span style='font-size:10.0pt'>.</span></code>':
</p>

<pre>&nbsp;</pre><pre>model example2</pre><pre>&nbsp; A: example();</pre><pre>&nbsp; A.S = 3;</pre><pre>end</pre>

<p>This results in a model with a single reaction (A.S + A.E -&gt; A.ES) and a
single initial condition (A.S = 3). </p>

<p>You may also import multiple copies of modules, and modules that themselves
contain submodules: </p>

<pre>model example3</pre><pre>&nbsp; A: example();</pre><pre>&nbsp; B: example();</pre><pre>&nbsp; C: example2();</pre><pre>end</pre>

<p class=MsoNormal>This would result in a model with three reactions and a
single initial condition. </p>

<pre>&nbsp;</pre><pre>&nbsp; A.S + A.E -&gt; A.ES</pre><pre>&nbsp; B.S + B.E -&gt; B.ES</pre><pre>&nbsp; C.A.S + C.A.E -&gt; C.A.ES</pre><pre>&nbsp; C.A.S = 3;</pre>

<p class=MsoNormal>You can also use the species defined in submodules in new
reactions: </p>

<pre>&nbsp;</pre><pre>model example4</pre><pre>&nbsp; A: example();</pre><pre>&nbsp; A.S -&gt; ; kdeg*A.S;</pre><pre>end</pre>

<p>When combining multiple submodules, you can also 'attach' them to each other
by declaring that a species in one submodule is the same species as is found in
a different submodule by using the '<code><span style='font-size:10.0pt'>is</span></code>'
keyword (&quot;A.S is B.S&quot;). For example, let's say that we have a species
which is known to bind reversibly to two different species. You could set this
up as the following: </p>

<pre>&nbsp;</pre><pre>model side_reaction</pre><pre>&nbsp; J0: S + E -&gt; SE; k1*k2*S*E - k2*ES;</pre><pre>&nbsp; S = 5;</pre><pre>&nbsp; E = 3;</pre><pre>&nbsp; SE = E+S;</pre><pre>&nbsp; k1 = 1.2;</pre><pre>&nbsp; k2 = 0.4;</pre><pre>end</pre><pre>&nbsp;</pre><pre>model full_reaction</pre><pre>&nbsp; A: side_reaction();</pre><pre>&nbsp; B: side_reaction();</pre><pre>&nbsp; A.S is B.S;</pre><pre>end</pre>

<p class=MsoNormal>If you wanted, you could give the identical species a new
name to more easily use it in the '<code><span style='font-size:10.0pt'>full_reaction</span></code>'
module: </p>

<pre>&nbsp;</pre><pre>model full_reaction</pre><pre>&nbsp; var species S;</pre><pre>&nbsp; A: side_reaction();</pre><pre>&nbsp; B: side_reaction()</pre><pre>&nbsp; A.S is S;</pre><pre>&nbsp; B.S is S;</pre><pre>end</pre>

<p class=MsoNormal>In this system, '<code><span style='font-size:10.0pt'>S</span></code>'
is involved in two reversible reactions with exactly the same reaction kinetics
and initial concentrations. Let's now say the reaction rate of the second side-reaction
takes the same form, but that the kinetics are twice as fast, and the starting
conditions are different: </p>

<pre>&nbsp;</pre><pre>model full_reaction</pre><pre>&nbsp; var species S;</pre><pre>&nbsp; A: side_reaction();</pre><pre>&nbsp; A.S is S;</pre><pre>&nbsp; B: side_reaction();</pre><pre>&nbsp; B.S is S;</pre><pre>&nbsp; B.k1 = 2.4;</pre><pre>&nbsp; B.k2 = 0.8;</pre><pre>&nbsp; B.E = 10;</pre><pre>end</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that since we defined the initial concentration of '<code><span
style='font-size:10.0pt'>SE</span></code>' as '<code><span style='font-size:
10.0pt'>S + E</span></code>', B.SE will now have a different initial
concentration, since B.E has been changed. </p>

<p>Finally, we add a third side reaction, one in which S binds irreversibly,
and where the complex it forms degrades. We'll need a new reaction rate, and a
whole new reaction as well: </p>

<pre>model full_reaction</pre><pre>&nbsp; var species S;</pre><pre>&nbsp; A: side_reaction();</pre><pre>&nbsp; A.S is S;</pre><pre>&nbsp; B: side_reaction();</pre><pre>&nbsp; B.S is S;</pre><pre>&nbsp; B.k1 = 2.4;</pre><pre>&nbsp; B.k2 = 0.8;</pre><pre>&nbsp; B.E = 10;</pre><pre>&nbsp; C: side_reaction();</pre><pre>&nbsp; C.S is S;</pre><pre>&nbsp; C.J0 = C.k1*C.k2*S*C.E</pre><pre>&nbsp; J3: C.SE -&gt; ; C.SE*k3;</pre><pre>&nbsp; k3 = 0.02;</pre><pre>end</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that defining the reaction rate of C.J0 used the symbol
'<code><span style='font-size:10.0pt'>S</span></code>'; exactly the same result
would be obtained if we had used '<code><span style='font-size:10.0pt'>C.S</span></code>'
or even '<code><span style='font-size:10.0pt'>A.S</span></code>' or '<code><span
style='font-size:10.0pt'>B.S</span></code>'. Antimony knows that those symbols
all refer to the same species, and will give them all the same name in
subsequent output. </p>

<p>For convenience and style, modules may define an interface where some
symbols in the module are more easily renamed. To do this, first enclose a list
of the symbols to export in parentheses after the name of the model when
defining it: </p>

<pre>model side_reaction(S, k1)</pre><pre>&nbsp; J0: S + E -&gt; SE; k1*k2*S*E - k2*ES;</pre><pre>&nbsp; S = 5;</pre><pre>&nbsp; E = 3;</pre><pre>&nbsp; SE = E+S;</pre><pre>&nbsp; k1 = 1.2;</pre><pre>&nbsp; k2 = 0.4;</pre><pre>end</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then when you use that module as a submodule, you can
provide a list of new symbols in parentheses: </p>

<pre>&nbsp;</pre><pre>&nbsp; A: side_reaction(spec2, k2);</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>is equivalent to writing: </p>

<pre>&nbsp;</pre><pre>&nbsp; A: side_reaction();</pre><pre>&nbsp; A.S is spec2;</pre><pre>&nbsp; A.k1 is k2;</pre>

<p class=MsoNormal>One thing to be aware of when using this method: Since
wrapping definitions in a defined model is optional, all 'bare' declarations
are defined to be in a default module with the name '<code><span
style='font-size:10.0pt'>__main</span></code>'. If there are no unwrapped
definitions, '<code><span style='font-size:10.0pt'>__main</span></code>' will
still exist, but will be empty. </p>

<p>As a final note: use of the '<code><span style='font-size:10.0pt'>is</span></code>'
keyword is not restricted to elements inside submodules. As a result, if you
wish to change the name of an element (if, for example, you want the reactions
to look simpler in Antimony, but wish to have a more descriptive name in the
exported SBML), you may use '<code><span style='font-size:10.0pt'>is</span></code>'
as well: </p>

<pre>&nbsp; A -&gt; B;</pre><pre> &nbsp;A is ABA;</pre><pre>&nbsp; B is ABA8OH;</pre>

<p class=MsoNormal>is equivalent to writing: </p>

<pre>&nbsp;</pre><pre>&nbsp; ABA -&gt; ABA8OH;</pre>

<h3>Module conversion factors</h3>

<p class=MsoNormal>Occasionally, the unit system of a submodel will not match
the unit system of the containing model, for one or more model elements. In
this case, you can use conversion factor constructs to bring the submodule in
line with the containing model. </p>

<p>If time is different in the submodel (affecting reactions, rate rules,
delay, and '<code><span style='font-size:10.0pt'>time</span></code>'), use the
'<code><span style='font-size:10.0pt'>timeconv</span></code>' keyword when
declaring the submodel: </p>

<pre>&nbsp;</pre><pre>&nbsp; A1: submodel(), timeconv=60;</pre>

<p class=MsoNormal>This construct means that one unit of time in the submodel
multiplied by the time conversion factor should equal one unit of time in the
parent model. </p>

<p>Reaction extent may also be different in the submodel when compared to the
parent model, and may be converted with the '<code><span style='font-size:10.0pt'>extentconv</span></code>'
keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; A1: submodel(), extentconv=1000;</pre>

<p class=MsoNormal>This construct means that one unit of reaction extent in the
submodel multiplied by the extent conversion factor should equal one unit of
reaction extent in the parent model. </p>

<p>Both time and extent conversion factors may be numbers (as above) or they
may be references to constant parameters. They may also both be used at once: </p>

<pre>&nbsp;</pre><pre>&nbsp; A1: submodel(), timeconv=tconv, extentconv=xconv;</pre>

<p class=MsoNormal>Individual components of submodels may also be given
conversion factors, when the '<code><span style='font-size:10.0pt'>is</span></code>'
keyword is used. The following two constructs are equivalent ways of applying
conversion factor '<code><span style='font-size:10.0pt'>cf</span></code>' to
the synchronized variables '<code><span style='font-size:10.0pt'>x</span></code>'
and '<code><span style='font-size:10.0pt'>A1.y</span></code>': </p>

<pre>&nbsp;</pre><pre>&nbsp; A1.y * cf is x;</pre><pre>&nbsp; A1.y is x / cf;</pre>

<p class=MsoNormal>When flattened, all of these conversion factors will be
incorporated into the mathematics. </p>

<h3>Submodel deletions</h3>

<p class=MsoNormal>Sometimes, an element of a submodel has to be removed
entirely for the model to make sense as a whole. A degradation reaction might
need to be removed, for example, or a now-superfluous species. To delete an
element of a submodel, use the '<code><span style='font-size:10.0pt'>delete</span></code>'
keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; delete A1.S1;</pre>

<p class=MsoNormal>In this case, '<code><span style='font-size:10.0pt'>S1</span></code>'
will be removed from submodel A1, as will any reactions S1 participated in,
plus any mathematical formulas that had '<code><span style='font-size:10.0pt'>S1</span></code>'
in them. Similarly, sometimes it is necessary to clear assignments and rules to
a variable. To accomplish this, simply declare a new assignment or rule for the
variable, but leave it blank: </p>

<pre>&nbsp;</pre><pre>&nbsp; A1.S1&nbsp; = ;</pre><pre>&nbsp; A1.S2 := ;</pre><pre>&nbsp; A1.S3' = ;</pre>

<p class=MsoNormal>This will remove the appropriate initial assignment,
assignment rule, or rate rule (respectively) from the submodel. </p>

<h3>Constant and variable symbols</h3>

<p class=MsoNormal>Some models have 'boundary species' in their reactions, or
species whose concentrations do not change as a result of participating in a
reaction. To declare that a species is a boundary species, use the '<code><span
style='font-size:10.0pt'>const</span></code>' keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; const S1;</pre>

<p class=MsoNormal>While you're declaring it, you may want to be more specific
by using the '<code><span style='font-size:10.0pt'>species</span></code>'
keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; const species S1;</pre>

<p class=MsoNormal>If a symbol appears as a participant in a reaction, Antimony
will recognize that it is a species automatically, so the use of the keyword '<code><span
style='font-size:10.0pt'>species</span></code>' is not required. If, however,
you have a species which never appears in a reaction, you will need to use the
'<code><span style='font-size:10.0pt'>species</span></code>' keyword. </p>

<p>If you have several species that are all constant, you may declare this all
in one line: </p>

<pre>&nbsp;</pre><pre>&nbsp; const species S1, S2, S3;</pre>

<p class=MsoNormal>While species are variable by default, you may also declare
them so explicitly with the '<code><span style='font-size:10.0pt'>var</span></code>'
keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; var species S4, S5, S6;</pre>

<p class=MsoNormal>Alternatively, you may declare a species to be a boundary
species by prepending a '<code><span style='font-size:10.0pt'>$</span></code>'
in front of it: </p>

<pre>&nbsp;</pre><pre>&nbsp; S1 + $E -&gt; ES;</pre>

<p class=MsoNormal>This would set the level of '<code><span style='font-size:
10.0pt'>E</span></code>' to be constant. You can use this symbol in declaration
lists as well: </p>

<pre>&nbsp;</pre><pre>&nbsp; species S1, $S2, $S3, S4, S5, $S6;</pre>

<p class=MsoNormal>This declares six species, three of which are variable (by
default) and three of which are constant. </p>

<p>Likewise, formulas are constant by default. They may be initialized with an
equals sign, with either a simple or a complex formula: </p>

<pre>&nbsp;</pre><pre>&nbsp; k1 = 5;</pre><pre>&nbsp; k2 = 2*S1;</pre>

<p class=MsoNormal>You may also explicitly declare whether they are constant or
variable: </p>

<pre>&nbsp;</pre><pre>&nbsp; const k1;</pre><pre>&nbsp; var k2;</pre>

<p class=MsoNormal>and be more specific and declare that both are formulas: </p>

<pre>&nbsp;</pre><pre>&nbsp; const formula k1;</pre><pre>&nbsp; var formula k2;</pre>

<p class=MsoNormal>Variables defined with an equals sign are assigned those
values at the start of the simulation. In SBML terms, they use the 'Initial
Assignment' values. If the formula is to vary during the course of the
simulation, use the Assignment Rule (or Rate Rule) syntax, described later. </p>

<p>You can also mix-and-match your declarations however best suits what you
want to convey: </p>

<pre>&nbsp;</pre><pre>&nbsp; species S1, S2, S3, S4;</pre><pre>&nbsp; formula k1, k2, k3, k4;</pre><pre>&nbsp; const&nbsp;&nbsp; S1, S4, k1, k3;</pre><pre>&nbsp; var&nbsp;&nbsp;&nbsp;&nbsp; S2, S3, k2, k4;</pre>

<p class=MsoNormal>Antimony is a pure model definition language, meaning that
all statements in the language serve to build a static model of a dynamic
biological system. Unlike Jarnac, sequential programming techniques such as
re-using a variable for a new purpose will not work: </p>

<pre>&nbsp;</pre><pre>&nbsp; pH = 7;</pre><pre>&nbsp; k1 = -log10(pH);</pre><pre>&nbsp; pH = 8.2;</pre><pre>&nbsp; k2 = -log10(pH);</pre>

<p class=MsoNormal>In a sequential programming language, the above would result
in different values being stored in k1 and k2. (This is how Jarnac works, for
those familiar with that language/simulation environment.) In a pure model
definition language like Antimony, '<code><span style='font-size:10.0pt'>pH</span></code>',
'<code><span style='font-size:10.0pt'>k1</span></code>', '<code><span
style='font-size:10.0pt'>k2</span></code>', and even the formula '<code><span
style='font-size:10.0pt'>-log10(pH)</span></code>' are static symbols that are
being defined by Antimony statements, and not processed in any way. A simulator
that requests the mathematical expression for k1 will receive the string '<code><span
style='font-size:10.0pt'>-log10(pH)</span></code>'; the same string it will
receive for k2. A request for the mathematical expression for pH will receive
the string &quot;8.2&quot;, since that's the last definition found in the file.
As such, k1 and k2 will end up being identical. </p>

<p>As a side note, we considered having libAntimony store a warning when
presented with an input file such as the example above with a later definition
overwriting an earlier definition. However, there was no way with our current
interface to let the user know that a warning had been saved, and it seemed
like there could be a number of cases where the user might legitimately want to
override an earlier definition (such as when using submodules, as we'll get to
in a bit). So for now, the above is valid Antimony input that just so happens
to produce exactly the same output as: </p>

<pre>&nbsp;</pre><pre>&nbsp; pH = 8.2;</pre><pre>&nbsp; k1 = -log10(pH);</pre><pre>&nbsp; k2 = -log10(pH);</pre>

<h3>Compartments</h3>

<p class=MsoNormal>A compartment is a demarcated region of space that contains
species and has a particular volume. In Antimony, you may ignore compartments
altogether, and all species are assumed to be members of a default compartment
with the imaginative name '<code><span style='font-size:10.0pt'>default_compartment</span></code>'
with a constant volume of 1. You may define other compartments by using the '<code><span
style='font-size:10.0pt'>compartment</span></code>' keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; compartment comp1;</pre>

<p class=MsoNormal>Compartments may also be variable or constant, and defined
as such with '<code><span style='font-size:10.0pt'>var</span></code>' and '<code><span
style='font-size:10.0pt'>const</span></code>': </p>

<pre>&nbsp;</pre><pre>&nbsp; const compartment comp1;</pre><pre>&nbsp; var compartment comp2;</pre>

<p class=MsoNormal>The volume of a compartment may be set with an '<code><span
style='font-size:10.0pt'>=</span></code>' in the same manner as species and
reaction rates: </p>

<pre>&nbsp;</pre><pre>&nbsp; comp1 = 5;</pre><pre>&nbsp; comp2 = 3*comp1;</pre>

<p class=MsoNormal>To declare that something is in a compartment, the '<code><span
style='font-size:10.0pt'>in</span></code>' keyword is used, either during
declaration: </p>

<pre>&nbsp;</pre><pre>&nbsp; compartment comp1 in comp2;</pre><pre>&nbsp; const species S1 in comp2;</pre><pre>&nbsp; S2 in comp2;</pre>

<p class=MsoNormal>or during assignment for reactions: </p>

<pre>&nbsp;</pre><pre>&nbsp; J0 in comp1: x -&gt; y; k1*x;</pre><pre>&nbsp; y -&gt; z; k2*y in comp2;</pre>

<p class=MsoNormal>or submodules: </p>

<pre>&nbsp;</pre><pre>&nbsp; M0 in comp2: submod();</pre><pre>&nbsp; submod2(y) in comp3;</pre>

<p class=MsoNormal>or other variables: </p>

<pre>&nbsp;</pre><pre>&nbsp; S1 in comp2 = 5;</pre>

<p class=MsoNormal>Here are Antimony's rules for determining which compartment
something is in: </p>

<ul type=disc>
 <li class=MsoNormal>If the symbol has been declared to be in a compartment, it
     is in that compartment.</li>
 <li class=MsoNormal>If not, if the symbol is in a <a href="#dna">DNA strand</a>
     (see the next section) which has been declared to be in a compartment, it
     is in that compartment. If the symbol is in multiple DNA strands with
     conflicting compartments, it is in the compartment of the last declared
     DNA strand that has a declared compartment in the model.</li>
 <li class=MsoNormal>If not, if the symbol is a member of a reaction with a
     declared compartment, it is in that compartment. If the symbol is a member
     of multiple reactions with conflicting compartments, it is in the
     compartment of the last declared reaction that has a declared compartment.</li>
 <li class=MsoNormal>If not, if the symbol is a member of a submodule with a
     declared compartment, it is in that compartment. If the symbol is a member
     of multiple submodules with conflicting compartments, it is in the
     compartment of the last declared submodule that has a declared
     compartment.</li>
 <li class=MsoNormal>If not, the symbol is in the compartment '<code><span
     style='font-size:10.0pt'>default_compartment</span></code>', and is
     treated as having no declared compartment for the purposes of determining
     the compartments of other symbols.</li>
</ul>

<p class=MsoNormal>Note that declaring that one compartment is '<code><span
style='font-size:10.0pt'>in</span></code>' a second compartment does not change
the compartment of the symbols in the first compartment: </p>

<pre>&nbsp;</pre><pre>&nbsp; compartment c1, c2;</pre><pre>&nbsp; species s1 in c1, s2 in c1;</pre><pre>&nbsp; c1 in c2;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>yields: </p>

<pre>&nbsp;</pre><pre>symbol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compartment</pre><pre>s1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c1</pre><pre>s2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c1</pre><pre>c1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c2</pre><pre>c2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default_compartment</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Compartments may not be circular: &quot;c1 in c2; c2 in c3;
c3 in c1&quot; is illegal. </p>

<h3>Events</h3>

<p class=MsoNormal>Events are discontinuities in model simulations that change
the definitions of one or more symbols at the moment when certain conditions
apply. The condition is expressed as a boolean formula, and the definition
changes are expressed as assignments, using the keyword '<code><span
style='font-size:10.0pt'>at</span></code>' and the following syntax: </p>

<pre>&nbsp;</pre><pre>&nbsp; at: variable1=formula1, variable2=formula2 [etc];</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>such as: </p>

<pre>&nbsp; at (x&gt;5): y=3, x=r+2;</pre>

<p class=MsoNormal>You may also give the event a name by prepending it with a
colon: </p>

<pre>&nbsp;</pre><pre>&nbsp; E1: at(x&gt;=5): y=3, x=r+2;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>(you may also claim an event is '<code><span
style='font-size:10.0pt'>in</span></code>' a compartment just like everything
else ('<code><span style='font-size:10.0pt'>E1 in comp1:</span></code>'). This
declaration will never change the compartment of anything else.) </p>

<p>In addition, there are a number of concepts in SBML events that can now be
encoded in Antimony. If event assignments are to occur after a delay, this can
be encoded by using the '<code><span style='font-size:10.0pt'>after</span></code>'
keyword: </p>

<pre>&nbsp; E1: at 2 after (x&gt;5): y=3, x=r+2;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This means to wait two time units after x transitions from
less than five to more than five, then change y to 3 and x to r+2. The delay
may also itself be a formula: </p>

<pre>&nbsp;</pre><pre>&nbsp; E1: at 2*z/y after (x&gt;5): y=3, x=r+2;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>For delayed events (and to a certain extent with
simultaneous events, discussed below), one needs to know what values to use
when performing event assignments: the values from the time the event was
triggered, or the values from the time the event assignments are being
executed? By default (in Antimony, as in SBML Level 2) the first holds true: event
assignments are to use values from the moment the event is triggered. To change
this, the keyword '<code><span style='font-size:10.0pt'>fromTrigger</span></code>'
is used: </p>

<pre>&nbsp;</pre><pre>&nbsp; E1: at 2*z/y after (x&gt;5), fromTrigger=false: y=3, x=r+2;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You may also declare '<code><span style='font-size:10.0pt'>fromTrigger=true</span></code>'
to explicitly declare what is the default. </p>

<p>New complications can arise when event assignments from multiple events are
to execute at the same time: which event assignments are to be executed first?
By default, there is no defined answer to this question: as long as both sets
of assignments are executed, either may be executed first. However, if the
model depends on a particular order of execution, events may be given
priorities, using the priority keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; E1: at ((x&gt;5) &amp;&amp; (z5) &amp;&amp; (q&gt;7)), priority=0: y=5: x=r+6;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In situations where z7, and x</p>

<p>Another question is whether, if at the beginning of the simulation the
trigger condition is '<code><span style='font-size:10.0pt'>true</span></code>',
it should be considered to have just transitioned to being true or not. The
default is no, meaning that no event may trigger at time 0. You may override
this default by using the '<code><span style='font-size:10.0pt'>t0</span></code>'
keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; E1: at (x&gt;5)), t0=false: y=3, x=r+2;</pre>

<p class=MsoNormal>In this situation, the value at t0 is considered to be
false, meaning it can immediately transition to true if x is greater than 5,
triggering the event. You may explicitly state the default by using '<code><span
style='font-size:10.0pt'>t0 = true</span></code>'. </p>

<p>Finally, a different class of events is often modeled in some situations
where the trigger condition must persist in being true from the entire time
between when the event is triggered to when it is executed. By default, this is
not the case for Antimony events, and, once triggered, all events will execute.
To change the class of your event, use the keyword '<code><span
style='font-size:10.0pt'>persistent</span></code>': </p>

<pre>&nbsp; E1: at 3 after (x&gt;5)), persistent=true: y=3, x=r+2;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>For this model, x must be greater than 5 for three seconds
before executing its event assignments: if x dips below 5 during that time, the
event will not fire. To explicitly declare the default situation, use '<code><span
style='font-size:10.0pt'>persistent=false</span></code>'. </p>

<p>The ability to change the default priority, t0, and persistent
characteristics of events was introduced in SBML Level 3, so if you translate
your model to SBML Level 2, it will lose the ability to define functionality
other than the default. For more details about the interpretation of these
event classifications, see the SBML Level 3 specification. </p>

<h3>Assignment Rules</h3>

<p class=MsoNormal>In some models, species and/or variables change in a manner
not described by a reaction. When a variable receives a new value at every
point in the model, this can be expressed in an assignment rule, which in
Antimony is formulated with a '<code><span style='font-size:10.0pt'>:=</span></code>'
as: </p>

<pre>&nbsp;</pre><pre>&nbsp;&nbsp; Ptot := P1 + P2 + PE;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In this example, '<code><span style='font-size:10.0pt'>Ptot</span></code>'
will continually be updated to reflect the total amount of '<code><span
style='font-size:10.0pt'>P</span></code>' present in the model. </p>

<p>Each symbol (species or formula) may have only one assignment rule associated
with it. If an Antimony file defines more than one rule, only the last will be
saved. </p>

<p>When species are used as the target of an assignment rule, they are defined
to be 'boundary species' and thus '<code><span style='font-size:10.0pt'>const</span></code>'.
Antimony doesn't have a separate syntax for boundary species whose
concentrations never change vs. boundary species whose concentrations change
due to assignment rules (or rate rules, below). SBML distinguishes between
boundary species that may change and boundary species that may not, but in
Antimony, all boundary species may change as the result of being in an
Assignment Rule or Rate Rule. </p>

<h3>Rate Rules</h3>

<p class=MsoNormal>Rate rules define the change in a symbol's value over time
instead of defining its new value. In this sense, they are similar to reaction
rate kinetics, but without an explicit stoichiometry of change. These may be
modeled in Antimony by appending an apostrophe to the name of the symbol, and
using an equals sign to define the rate: </p>

<pre>&nbsp;</pre><pre>&nbsp; S1' =&nbsp; V1*(1 - S1)/(K1 + (1 - S1)) - V2*S1/(K2 + S1)</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that unlike initializations and assignment rules,
formulas in rate rules may be self-referential, either directly or indirectly. </p>

<p>Any symbol may have only one rate rule or assignment rule associated with
it. Should it find more than one, only the last will be saved. </p>

<h3>Display Names</h3>

<p class=MsoNormal>When some tools visualize models, they make a distinction
between the '<code><span style='font-size:10.0pt'>id</span></code>' of an
element, which must be unique to the model and which must conform to certain
naming conventions, and the 'name' of an element, which does not have to be
unique and which has much less stringent naming requirements. In Antimony, it
is the id of elements which is used everywhere. However, you may also set the
'display name' of an element by using the '<code><span style='font-size:10.0pt'>is</span></code>'
keyword and putting the name in quotes: </p>

<pre>&nbsp;</pre><pre>&nbsp; A.k1 is &quot;reaction rate k1&quot;;</pre><pre>&nbsp; S34&nbsp; is &quot;Ethyl Alcohol&quot;;</pre>

<h3>Comments</h3>

<p class=MsoNormal>Comments in Antimony can be made on one line with <code><span
style='font-size:10.0pt'>//[comments]</span></code>, or on multiple lines with <code><span
style='font-size:10.0pt'>/*&nbsp;[comments]&nbsp;*/</span></code>.&nbsp; You
may also use python-style comments with <code><span style='font-size:10.0pt'>#[comments]</span></code>.</p>

<pre>&nbsp;</pre><pre>&nbsp; /* The following initializations were</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; taken from the literature */</pre><pre>&nbsp; X=3; //Taken from Galdziki, et al.</pre><pre>&nbsp; Y=4; //Taken from Rutherford, et al.</pre><pre>&nbsp; Z=5; # A python comment.</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Comments are not translated to SBML or CellML, and will be
lost if round-tripped through those languages. </p>

<h3>Units</h3>

<p class=MsoNormal>As of version 2.4 of Antimony, units may now be created and
translated to SBML (but not CellML, yet). Units may be created by using the '<code><span
style='font-size:10.0pt'>unit</span></code>' keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; unit substance = 1e-6 mole;</pre><pre>&nbsp; unit hour = 3600 seconds;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Adding an 's' to the end of a unit name to make it plural is
fine when defining a unit: '<code><span style='font-size:10.0pt'>3600 second</span></code>'
is the same as '<code><span style='font-size:10.0pt'>3600 seconds</span></code>'.
Compound units may be created by using formulas with '<code><span
style='font-size:10.0pt'>*</span></code>', '<code><span style='font-size:10.0pt'>/</span></code>',
and '<code><span style='font-size:10.0pt'>^</span></code>'. However, you must
use base units when doing so ('base units' defined as those listed in Table 2
of the SBML Level 3 Version 1 specification, which mostly are SI and SI-derived
units). </p>

<pre>&nbsp;</pre><pre>&nbsp; unit micromole = 10e-6 mole / liter;</pre><pre>&nbsp; unit daily_feeding = 1 item / 86400 seconds</pre><pre>&nbsp; unit voltage = 1000 grams * meters^2 / seconds^-3 * ampere^-1</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You may use units when defining formulas using the same
syntax as above: any number may be given a unit by writing the name of the unit
after the number. When defining a symbol (of any numerical type: species,
parameter, compartment, etc.), you can either use the same technique to give it
an initial value and a unit, or you may just define its units by using the
'has' keyword: </p>

<pre>&nbsp;</pre><pre>&nbsp; unit foo = 100 mole/5 liter;</pre><pre>&nbsp; x = 40 foo/3 seconds; //'40' now has units of 'foo' and '3' units of 'seconds'.</pre><pre>&nbsp; y = 3.3 foo;&nbsp;&nbsp; // 'y' is given units of 'foo' and an initial value of '3.3'.</pre><pre>&nbsp; z has foo;&nbsp;&nbsp;&nbsp;&nbsp; // 'z' is given units of 'foo'.</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Antimony does not calculate any derived units: in the above
example, 'x' is fully defined in terms of moles per liter per second, but it is
not annotated as such. </p>

<p>As with many things in Antimony, you may use a unit before defining it: '<code><span
style='font-size:10.0pt'>x = 10 ml</span></code>' will create a parameter <code><span
style='font-size:10.0pt'>x</span></code> and a unit '<code><span
style='font-size:10.0pt'>ml</span></code>'. </p>

<h3>DNA Strands</h3>

<p class=MsoNormal>A new concept in Antimony that has not been modeled
explicitly in previous model definition languages such as SBML is the idea of
having DNA strands where downstream elements can inherit reaction rates from
upstream elements. DNA strands are declared by connecting symbols with '<code><span
style='font-size:10.0pt'>--</span></code>': </p>

<pre>&nbsp;</pre><pre>&nbsp; --P1--G1--stop--P2--G2--</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can also give the strand a name: </p>

<pre>&nbsp;</pre><pre>&nbsp; dna1: --P1--G1--</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>By default, the reaction rate or formula associated with an
element of a DNA strand is equal to the reaction rate or formula of the element
upstream of it in the strand. Thus, if P1 is a promoter and G1 is a gene, in
the model: </p>

<pre>&nbsp;</pre><pre>&nbsp; dna1: --P1--G1--</pre><pre>&nbsp; P1 = S1*k;</pre><pre>&nbsp; G1: -&gt; prot1;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>the reaction rate of G1 will be &quot;S1*k&quot;. </p>

<p>It is also possible to modulate the inherited reaction rate. To do this, we
use ellipses ('...') as shorthand for 'the formula for the element upstream of
me'. Let's add a ribosome binding site that increases the rate of production of
protein by a factor of three, and say that the promoter actually increases the
rate of protein production by S1*k instead of setting it to S1*k: </p>

<pre>&nbsp; dna1: --P1--RBS1--G1--</pre><pre>&nbsp; P1 = S1*k + ...;</pre><pre>&nbsp; RBS1 = ...*3;</pre><pre>&nbsp; G1: -&gt; prot1;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Since in this model, nothing is upstream of P1, the upstream
rate is set to zero, so the final reaction rate of G1 is equal to &quot;(S1*k +
0)*3&quot;. </p>

<p>Valid elements of DNA strands include formulas (operators), reactions
(genes), and other DNA strands. Let's wrap our model so far in a submodule, and
then use the strand in a new strand: </p>

<pre>model strand1()</pre><pre>&nbsp; dna1: --P1--RBS1--G1--</pre><pre>&nbsp; P1 = S1*k + ...;</pre><pre>&nbsp; RBS1 = ...*3;</pre><pre>&nbsp; G1: -&gt; prot1;</pre><pre>end</pre><pre>&nbsp;</pre><pre>model fullstrand()</pre><pre>&nbsp; A: strand1();</pre><pre>&nbsp; fulldna:&nbsp; P2--A.dna1</pre><pre>&nbsp; P2 = S2*k2;</pre><pre>end</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In the model '<code><span style='font-size:10.0pt'>fullstrand</span></code>',
the reaction that produces A.prot1 is equal to
&quot;((A.S1*A.k+(S2*k2))*3)&quot;. </p>

<p>Operators and genes may be duplicated and appear in multiple strands: </p>

<pre>&nbsp; dna1:&nbsp; --P1--RBS1--G1--</pre><pre>&nbsp; dna2:&nbsp; P2--dna1</pre><pre>&nbsp; dna3:&nbsp; P2--RBS2--G1</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Strands, however, count as unique constructs, and may only
appear as singletons or within a single other strand (and may not, of course,
exist in a loop, being contained in a strand that it itself contains). </p>

<p>If the reaction rate or formula for any duplicated symbol is left at the
default or if it contains ellipses explicitly ('...'), it will be equal to the
sum of all reaction rates in all the strands in which it appears. If we further
define our above model: </p>

<pre>&nbsp; dna1:&nbsp; --P1--RBS1--G1--</pre><pre>&nbsp; dna2:&nbsp; P2--dna1</pre><pre>&nbsp; dna3:&nbsp; P2--RBS2--G1</pre><pre>&nbsp; P1 = ...+0.3;</pre><pre>&nbsp; P2 = ...+1.2;</pre><pre>&nbsp; RBS1 = ...*0.8;</pre><pre>&nbsp; RBS2 = ...*1.1;</pre><pre>&nbsp; G1: -&gt; prot1;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The reaction rate for the production of '<code><span
style='font-size:10.0pt'>prot1</span></code>' will be equal to
&quot;(((0+1.2)+0.3)*0.8) + (((0+1.2)*1.1))&quot;. If you set the reaction rate
of G1 without using an ellipsis, but include it in multiple strands, its
reaction rate will be a multiple of the number of strands it is a part of. For
example, if you set the reaction rate of G1 above to &quot;k1*S1&quot;, and
include it in two strands, the net reaction rate will be &quot;k1*S1 +
k1*S1&quot;. </p>

<p>The purpose of prepending or postfixing a '<code><span style='font-size:
10.0pt'>--</span></code>' to a strand is to declare that the strand in question
is designed to have DNA attached to it at that end. If exactly one DNA strand
is defined with an upstream '<code><span style='font-size:10.0pt'>--</span></code>'
in its definition in a submodule, the name of that module may be used as a
proxy for that strand when creating attaching something upstream of it, and
visa versa with a defined downstream '<code><span style='font-size:10.0pt'>--</span></code>'
in its definition: </p>

<pre>model twostrands</pre><pre>&nbsp; --P1--RBS1--G1</pre><pre>&nbsp; P2--RBS2--G2--</pre><pre>end</pre><pre>&nbsp;</pre><pre>model long</pre><pre>&nbsp; A: twostrands();</pre><pre>&nbsp; P3--A</pre><pre>&nbsp; A--G3</pre><pre>end</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The module '<code><span style='font-size:10.0pt'>long</span></code>'
will have two strands: &quot;P3--A.P1--A.RBS1--A.G1&quot; and
&quot;A.P2--A.RBS2--A.G2--G3&quot;. </p>

<p>Submodule strands intended to be used in the middle of other strands should
be defined with '<code><span style='font-size:10.0pt'>--</span></code>' both
upstream and downstream of the strand in question: </p>

<pre>model oneexported</pre><pre>&nbsp; --P1--RBS1--G1--</pre><pre>&nbsp; P2--RBS2--G2</pre><pre>end</pre><pre>&nbsp;</pre><pre>model full</pre><pre>&nbsp; A: oneexported()</pre><pre>&nbsp; P2--A--stop</pre><pre>end</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If multiple strands are defined with upstream or downstream
&quot;--&quot; marks, it is illegal to use the name of the module containing
them as proxy. </p>

<h3>Interactions</h3>

<p class=MsoNormal>Some species act as activators or repressors of reactions
that they do not actively participate in. Typical models do not bother
mentioning this explicitly, as it will show up in the reaction rates. However,
for visualization purposes and/or for cases where the reaction rates might not
be known explicitly, you may declare these interactions using the same format
as reactions, using different symbols instead of &quot; &gt;&quot;: for
activations, use &quot;-o&quot;; for inhibitions, use &quot;-|&quot;, and for
unknown interactions or for interactions which sometimes activate and sometimes
inhibit, use &quot;&#8209;(&quot;: </p>

<pre>&nbsp;</pre><pre>&nbsp; J0: S1 + E -&gt; SE;</pre><pre>&nbsp; i1: S2 -| J0;</pre><pre>&nbsp; i2: S3 -o J0;</pre><pre>&nbsp; i3: S4 -( J0;</pre>

<p class=MsoNormal>If a reaction rate is given for the reaction in question,
that reaction must include the species listed as interacting with that
reaction. This, then, is legal: </p>

<pre>&nbsp;</pre><pre>&nbsp; J0: S1 + E -&gt; SE; k1*S1*E/S2</pre><pre>&nbsp; i1: S2 -| J0;</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>because the species S2 is present in the formula
&quot;k1*S1*E/S2&quot;. If the concentration of an inhibitory species
increases, it should decrease the reaction rate of the reaction it inhibits,
and vice versa for activating species. The current version of libAntimony
(v2.4) does not check this, but future versions may add the check. </p>

<p>When the reaction rate is not known, species from interactions will be added
to the SBML 'listOfModifiers' for the reaction in question. Normally, the
kinetic law is parsed by libAntimony and any species there are added to the
list of modifiers automatically, but if there is no kinetic law to parse, this
is how to add species to that list. </p>

<h3>Function Definitions</h3>

<p class=MsoNormal>You may create user-defined functions in a similar fashion
to the way you create modules, and then use these functions in Antimony
equations. These functions must be basic single equations, and act in a similar
manner to macro expansions. As an example, you might define the quadratic
equation and use it in a later equation as follows: </p>

<pre>&nbsp;</pre><pre>function quadratic(x, a, b, c)</pre><pre>&nbsp; a*x^2 + b*x + c</pre><pre>end</pre><pre>&nbsp;</pre><pre>model quad1</pre><pre>&nbsp; S3 = quadratic(s1, k1, k2, k3);</pre><pre>end</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This effectively defines S3 to have the equation
&quot;k1*s1^2 + k2*s1 + k3&quot;. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In addition, there are several built-in functions defined in
Antimony.&nbsp; All of the functions present in the MathML subset used in SBML Level
3 are likewise defined here, and include:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>abs, and, arccos, arccosh, arccot, arccoth, arccsc, arccsch,
arcsec, arcsech, arcsin, arcsinh, arctan, arctanh, ceiling, cos, cosh, cot,
coth, csc, csch, divide, eq, exp, factorial, floor, geq, gt, leq, ln, log, lt,
minus, neq, not, or, piecewise, plus, power, root, sec, sech, sin, sinh, tan,
tanh, times, and xor.&nbsp; In addition, the constants true, false, notanumber,
pi, infinity, and exponentiale are all allowed.</p>

<p class=MsoNormal>As of Antimony v2.6, the following distributions are also
allowed, and will be added to the translated SBML file if used:&nbsp; normal(mean,
stddev), truncatedNormal(mean, stddev, min, max), uniform(min, max), exponential(rate),
truncatedExponential(rate, min, max), gamma(shape, scale),
truncatedGamma(shape, scale, min, max), poisson(rate), and truncatedPoisson(rate,
min, max).&nbsp; The &#8216;truncated&#8217; forms of all functions allow one
to define inclusive boundaries, meaning that the returned value must fall
between the min and the max values given.</p>

<p class=MsoNormal>&nbsp;</p>

<h3>Other files</h3>

<p class=MsoNormal>More than one file may be used to define a set of modules in
Antimony through the use of the '<code><span style='font-size:10.0pt'>import</span></code>'
keyword. At any point in the file outside of a module definition, use the word
'<code><span style='font-size:10.0pt'>import</span></code>' followed by the
name of the file in quotation marks, and Antimony will include the modules
defined in that file as if they had been cut and pasted into your file at that
point. SBML files may also be included in this way: </p>

<pre>&nbsp;</pre><pre>import &quot;models1.txt&quot;</pre><pre>import &quot;oscli.xml&quot;</pre><pre>&nbsp;</pre><pre>model mod2()</pre><pre>&nbsp; A: mod1();</pre><pre>&nbsp; B: oscli();</pre><pre>end</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In this example, the file '<code><span style='font-size:
10.0pt'>models1.txt</span></code>' is an Antimony file that defines the module
'<code><span style='font-size:10.0pt'>mod1</span></code>', and the file '<code><span
style='font-size:10.0pt'>oscli.xml</span></code>' is an SBML file that defines
a model named '<code><span style='font-size:10.0pt'>oscli</span></code>'. The
Antimony module '<code><span style='font-size:10.0pt'>mod2</span></code>' may then
use modules from either or both of the other imported files. </p>

<p>Remember that imported files act like they were cut and pasted into the main
file. As such, any bare declarations in the main file and in the imported files
will all contribute to the default '<code><span style='font-size:10.0pt'>__main</span></code>'
module. Most SBML files will not contribute to this module, unless the name of
the model in the file is '<code><span style='font-size:10.0pt'>__main</span></code>'
(for example, if it was created by the antimony converter). </p>

<p>By default, libantimony will examine the '<code><span style='font-size:10.0pt'>import</span></code>'
text to determine whether it is a relative or absolute filename, and, if
relative, will prepend the directory of the working file to the import text
before attempting to load the file. If it cannot find it there, it is possible
to tell the libantimony API to look in different directories for files loaded
from import statements. </p>

<p>However, if the working directory contains a '<code><span style='font-size:
10.0pt'>.antimony</span></code>' file, or if one of the named directories
contains a '<code><span style='font-size:10.0pt'>.antimony</span></code>' file,
import statements can be subverted. Each line of this file must contain three
tab-delimited strings: the name of the file which contains an import statement,
the text of the import statement, and the filename where the program should
look for the file. Thus, if a file &quot;file1.txt&quot; contains the line '<code><span
style='font-size:10.0pt'>import &quot;file2.txt&quot;</span></code>', and a .antimony
file is discovered with the line: </p>

<pre>file1.txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file2.txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; antimony/import/file2.txt</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>the library will attempt to load '<code><span
style='font-size:10.0pt'>antimony/import/file2.txt</span></code>' instead of
looking for '<code><span style='font-size:10.0pt'>file2.txt</span></code>'
directly. For creating files in-memory or when reading antimony models from
strings, the first string may either be left out, or you may use the keyword
&quot;&lt;MAIN&gt;&quot;: </p>

<pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file2.txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; antimony/import/file2.txt</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The first and third entries may be relative filenames: the
directory of the .antimony file itself will be added internally when
determining the file's actual location. The second entry must be exactly as it
appears in the first file's '<code><span style='font-size:10.0pt'>import</span></code>'
directive, between the quotation marks. </p>

<h3>Importing and Exporting Antimony Models</h3>

<p class=MsoNormal>Once you have created an Antimony file, you can convert it
to SBML or CellML using 'sbtranslate' or the 'QTAntimony' visual editor (both
available from http://antimony.sourceforge.net/) This will convert each of the
models defined in the Antimony text file into a separate SBML model, including
the overall '<code><span style='font-size:10.0pt'>__main</span></code>' module
(if it contains anything). These files can then be used for simulation or
visualization in other programs. </p>

<p>QTAntimony can be used to edit and translate Antimony, SBML, and CellML
models. Any file in those three formats can be opened, and from the 'View'
menu, you can turn on or off the SBML and CellML tabs. Select the tabs to
translate and view the working model in those different formats. </p>

<p>The SBML tabs can additionally be configured to use the <a
href="http://sbml.org/Community/Wiki/SBML_Level_3_Proposals/Hierarchical_Model_Composition">'Hierarchical
Model Composition'</a> package constructs. Select 'Edit/Flatten SBML tab(s)' or
hit control-F to toggle between this version and the old 'flattened' version of
SBML. (To enable this feature if you compile Antimony yourself, you will need
the latest versions of libSBML with the SBML 'comp' package enabled, and to
select 'WITH_COMP_SBML' from the CMake menu.) </p>

<p>As there were now several different file formats available for translation,
the old command-line translators still exist (antimony2sbml; sbml2antimony),
but have been supplanted by the new 'sbtranslate' executable. Instructions for
use are available by running sbtranslate from the command line, but in brief:
any number of files to translate may be added to the command line, and the
desired output format is given with the '<code><span style='font-size:10.0pt'>-o</span></code>'
flag: '<code><span style='font-size:10.0pt'>-o antimony</span></code>', '<code><span
style='font-size:10.0pt'>-o sbml</span></code>', '<code><span style='font-size:
10.0pt'>-o cellml</span></code>', or '<code><span style='font-size:10.0pt'>-o
sbml-comp</span></code>' (the last to output files with the SBML '<code><span
style='font-size:10.0pt'>comp</span></code>' package constructs). Examples: </p>

<pre>&nbsp; sbtranslate.exe model1.txt model2.txt -o sbml</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>will create one flattened SBML file for the main model in
the two Antimony files in the working directory. Each file will be of the
format &quot;[prefix].xml&quot;, where [prefix] is the original filename with '<code><span
style='font-size:10.0pt'>.txt</span></code>' removed (if present). </p>

<pre>&nbsp;</pre><pre>&nbsp; sbtranslate.exe oscli.xml ffn.xml -o antimony</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>will output two files in the working directory: '<code><span
style='font-size:10.0pt'>oscli.txt</span></code>' and '<code><span
style='font-size:10.0pt'>ffn.txt</span></code>' (in the antimony format). </p>

<pre>&nbsp;</pre><pre>&nbsp; sbtranslate.exe model1.txt -o sbml-comp</pre>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>will output '<code><span style='font-size:10.0pt'>model1.xml</span></code>'
in the working directory, containing all models in the '<code><span
style='font-size:10.0pt'>model1.txt</span></code>' file, using the SBML '<code><span
style='font-size:10.0pt'>comp</span></code>' package. </p>

<h3>Appendix: Converting between SBML and Antimony</h3>

<p class=MsoNormal>For reference, here are some of the differences you will see
when converting models between SBML and Antimony: </p>

<ul type=disc>
 <li class=MsoNormal>Local parameters in SBML reactions become global
     parameters in Antimony, with the reaction name prepended. If a different
     symbol already has the new name, a number is appended to the variable name
     so it will be unique. These do not get converted back to local parameters
     when converting Antimony back to SBML.</li>
 <li class=MsoNormal>Algebraic rules in SBML disappear in Antimony.</li>
 <li class=MsoNormal>Any element with both a value (or an initial
     amount/concentration for species) and an initial assignment in SBML will
     have only the initial assignment in Antimony.</li>
 <li class=MsoNormal>Stoichiometry math in SBML disappears in Antimony.</li>
 <li class=MsoNormal>All '<code><span style='font-size:10.0pt'>constant=true</span></code>'
     species in SBML are set '<code><span style='font-size:10.0pt'>const</span></code>'
     in Antimony, even if that same species is set boundary=false.</li>
 <li class=MsoNormal>All '<code><span style='font-size:10.0pt'>boundary=true</span></code>'
     species in SBML are set '<code><span style='font-size:10.0pt'>const</span></code>'
     in Antimony, even if that same species is set constant=false.</li>
 <li class=MsoNormal>Boundary ('const') species in Antimony are set
     boundary=true and constant=false in SBML.</li>
 <li class=MsoNormal>Variable ('var') species in Antimony are set
     boundary=false and constant=false in SBML. </li>
 <li class=MsoNormal>Modules in Antimony are flattened in SBML (unless you use
     the '<code><span style='font-size:10.0pt'>comp</span></code>' option).</li>
 <li class=MsoNormal>DNA strands in Antimony disappear in SBML.</li>
 <li class=MsoNormal>DNA elements in Antimony no longer retain the ellipses
     syntax in SBML, but the effective reaction rates and assignment rules
     should be accurate, even for elements appearing in multiple DNA strands.
     These reaction rates and assignment rules will be the sum of the rate at
     all duplicate elements within the DNA strands.</li>
 <li class=MsoNormal>Any symbol with the MathML csymbol '<code><span
     style='font-size:10.0pt'>time</span></code>' in SBML becomes '<code><span
     style='font-size:10.0pt'>time</span></code>' in Antimony.</li>
 <li class=MsoNormal>Any formula with the symbol '<code><span style='font-size:
     10.0pt'>time</span></code>' in it in Antimony will become the MathML
     csymbol '<code><span style='font-size:10.0pt'>time</span></code>' in in
     SBML.</li>
 <li class=MsoNormal>The MathML csymbol '<code><span style='font-size:10.0pt'>delay</span></code>'
     in SBML disappears in Antimony.</li>
 <li class=MsoNormal>Any SBML version 2 level 1 function with the MathML
     csymbol '<code><span style='font-size:10.0pt'>time</span></code>' in it
     will become a local variable with the name '<code><span style='font-size:
     10.0pt'>time_ref</span></code>' in Antimony. This '<code><span
     style='font-size:10.0pt'>time_ref</span></code>' is added to the
     function's interface (as the last in the list of symbols), and any uses of
     the function are modified to use '<code><span style='font-size:10.0pt'>time</span></code>'
     in the call. In other words, a function &quot;function(x, y):
     x+y*time&quot; becomes &quot;function(x, y, time_ref): x +
     y*time_ref&quot;, and formulas that use &quot;function(A, B)&quot; become
     &quot;function(A, B, time)&quot;</li>
 <li class=MsoNormal>A variety of Antimony keywords, if found in SBML models as
     IDs, are renamed to add an appended '<code><span style='font-size:10.0pt'>_</span></code>'.
     So the ID '<code><span style='font-size:10.0pt'>compartment</span></code>'
     becomes '<code><span style='font-size:10.0pt'>compartment_</span></code>',
     '<code><span style='font-size:10.0pt'>model</span></code>' becomes '<code><span
     style='font-size:10.0pt'>model_</span></code>', etc.</li>
</ul>

</div>

</body>

</html>
