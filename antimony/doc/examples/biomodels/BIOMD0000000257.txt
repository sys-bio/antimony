//Created by libAntimony v2.6.0
model *Piedrafita2010_MR_System()

  // Compartments and Species:
  compartment env;
  species $S in env, $U in env, $T in env, STU in env, STUS in env, STUST in env;
  species STUSU in env, SU in env, ST in env, SUST in env, SUSTU in env;

  // Assignment Rules:
  k8 := k4;
  k11 := k4;

  // Reactions:
  reaction1: $S + STU -> STUS; env*(k1*S*STU - k1r*STUS);
  reaction2: $T + STUS -> STUST; env*(k2*T*STUS - k2r*STUST);
  reaction3: STUST -> ST + STU; env*(k3*STUST - k3r*ST*STU);
  reaction4: STU => ; env*k4*STU;
  reaction5: SU + ST -> SUST; env*(k5*ST*SU - k5r*SUST);
  reaction6: $U + SUST -> SUSTU; env*(k6*U*SUST - k6r*SUSTU);
  reaction7: SUSTU -> STU + SU; env*(k7*SUSTU - k7r*STU*SU);
  reaction8: SU => ; env*k8*SU;
  reaction9: $U + STUS -> STUSU; env*(k9*U*STUS - k9r*STUSU);
  reaction10: STUSU -> STU + SU; env*(k10*STUSU - k10r*STU*SU);
  reaction11: ST => ; env*k11*ST;

  // Species initializations:
  S = 4;
  U = 1;
  T = 2;
  STU = 5;
  STUS = 0;
  STUST = 0;
  STUSU = 0;
  SU = 0;
  ST = 0;
  SUST = 0;
  SUSTU = 0;

  // Compartment initializations:
  env = 1;

  // Variable initializations:
  k1 = 10;
  k1 has per_time_per_M;
  k1r = 10;
  k1r has per_time;
  k2 = 10;
  k2 has per_time_per_M;
  k2r = 10;
  k2r has per_time;
  k3 = 2;
  k3 has per_time;
  k3r = 1;
  k3r has per_time_per_M;
  k4 = 0.3;
  k4 has per_time;
  k5 = 1;
  k5 has per_time_per_M;
  k5r = 1;
  k5r has per_time;
  k6 = 1;
  k6 has per_time_per_M;
  k6r = 1;
  k6r has per_time;
  k7 = 0.1;
  k7 has per_time;
  k7r = 0.1;
  k7r has per_time_per_M;
  k8 has per_time;
  k9 = 0.1;
  k9 has per_time_per_M;
  k9r = 0.05;
  k9r has per_time;
  k10 = 0.05;
  k10 has per_time;
  k10r = 0.05;
  k10r has per_time_per_M;
  k11 has per_time;

  // Other declarations:
  var k8, k11;
  const env, k1, k1r, k2, k2r, k3, k3r, k4, k5, k5r, k6, k6r, k7, k7r, k9;
  const k9r, k10, k10r;

  // Unit definitions:
  unit substance = mole;
  unit time_unit = second;
  unit volume = litre;
  unit per_time = 1 / second;
  unit per_time_per_M = litre / (mole * second);

  // Display Names:
  substance is "mole";
  time_unit is "sec";
  volume is "litre";
  env is "environment";
end
