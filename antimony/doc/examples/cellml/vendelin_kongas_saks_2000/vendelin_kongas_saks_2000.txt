//Created by libAntimony v1.4

//Warnings from automatic translation:
//    Unable to translate an assignment to "del(ATP)/del(time)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(ADP)/del(time)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(AMP)/del(time)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(PCr)/del(time)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(Cr)/del(time)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(Pi)/del(time)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(ATP_diff)/del(n)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(ADP_diff)/del(n)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(AMP_diff)/del(n)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(PCr_diff)/del(n)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(Cr_diff)/del(n)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del(Pi_diff)/del(n)" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to use the formula "v_ANT * ( fADPg / ( Kg * (( 10.0 + fADPg ) / ( Kg + fADPi / Ki )))) * ( fADPg / ( fATPg * power( 10.0 , -0.35 * delta_psi / Z ) + fADPg ) - fADPx / ( fATPx * power( 10.0 , -0.65 * delta_psi / Z ) + fADPx ))" to set the assignment rule for v_ANT_XG:  Loop detected:  v_ANT_XG's definition (v_ANT * ( fADPg / ( Kg * (( 10.0 + fADPg ) / ( Kg + fADPi / Ki )))) * ( fADPg / ( fATPg * power( 10.0 , -0.35 * delta_psi / Z ) + fADPg ) - fADPx / ( fATPx * power( 10.0 , -0.65 * delta_psi / Z ) + fADPx ))) either includes itself directly (i.e. 's5 := 6 + s5') or by proxy (i.e. 's5 := 8*d3' and 'd3 := 9*s5').
//    Unable to use the formula "v_ANT * ( fADPi / ( Ki * (( 10.0 + fADPg ) / ( Kg + fADPi / Ki )))) * ( fADPi / ( fATPi * power( 10.0 , -0.35 * delta_psi / Z ) + fADPi ) - fADPx / ( fATPx * power( 10.0 , -0.65 * delta_psi / Z ) + fADPx ))" to set the assignment rule for v_ANT_XI:  Loop detected:  v_ANT_XI's definition (v_ANT * ( fADPi / ( Ki * (( 10.0 + fADPg ) / ( Kg + fADPi / Ki )))) * ( fADPi / ( fATPi * power( 10.0 , -0.35 * delta_psi / Z ) + fADPi ) - fADPx / ( fATPx * power( 10.0 , -0.65 * delta_psi / Z ) + fADPx ))) either includes itself directly (i.e. 's5 := 6 + s5') or by proxy (i.e. 's5 := 8*d3' and 'd3 := 9*s5').
//    In module 'vendelin_model_2000____main', the variables r_buff.delta_Hx and delta_Hx were unable to be set as equivalent:  Loop detected:  'r_buff.delta_Hx' may not be set to be equal to 'delta_Hx' because delta_Hx's definition already includes r_buff.delta_Hx either directly or by proxy.

model vendelin_model_2000__environment(time_)
end

model vendelin_model_2000__ATP(ATP, G_CK, v_CK, G_AK, v_AK, G_H, H_ATP, D_ATP, time_)
end

model vendelin_model_2000__ADP(ADP, G_CK, v_CK, G_AK, v_AK, G_H, H_ATP, D_ADP, time_)
end

model vendelin_model_2000__AMP(AMP, G_AK, v_AK, D_AMP, time_)
end

model vendelin_model_2000__PCr(PCr, G_CK, v_CK, D_PCr, time_)
end

model vendelin_model_2000__Cr(Cr, G_CK, v_CK, D_Cr, time_)
end

model vendelin_model_2000__Pi(Pi_, G_H, H_ATP, D_Pi, time_)
end

model vendelin_model_2000__v_CK(v_CK, mATP, Cr, PCr, mADP)

  // Assignment Rules:
  v_CK := ( V1 * ( mATP * Cr / ( Kia * Kb )) - V1_ * ( mADP * PCr / ( Kic * Kd ))) / DenCK;
  Kc := Kic * Kd / Kid;
  DenCK := 1.0 + Cr / Kib + PCr / Kid + mATP * ( 1.0 / Kia + Cr / ( Kia * Kb )) + mADP * ( 1.0 / Kic + PCr / ( Kid * Kc ) + Cr / ( Kic * KIb ));

  // Variable initializations:
  Kia = 9.0E2;
  Kib = 3.49E4;
  Kb = 1.55E4;
  Kic = 2.224E2;
  KIb = 3.49E4;
  Kid = 4.73E3;
  Kd = 1.67E3;
  V1 = 1.30E4;
  V1_ = 5.48E4;
end

model vendelin_model_2000__fATP(fATP, ATP, Mg)

  // Assignment Rules:
  fATP := ATP / ( 1.0 + Mg / KDT );
end

model vendelin_model_2000__fATPx(fATPx, ATPx, Mgx)

  // Assignment Rules:
  fATPx := ATPx / ( 1.0 + Mgx / KDTx );

  // Variable initializations:
  KDTx = 17.0;
end

model vendelin_model_2000__fATPext(fATPext, ATPext, Mgext)

  // Assignment Rules:
  fATPext := ATPext / ( 1.0 + Mgext / KDText );

  // Variable initializations:
  KDText = 24.0;
end

model vendelin_model_2000__fATPg(fATPg, ATPg, Mgg)

  // Assignment Rules:
  fATPg := ATPg / ( 1.0 + Mgg / KDTg );
end

model vendelin_model_2000__fATPi(fATPi, ATPi, Mgi)

  // Assignment Rules:
  fATPi := ATPi / ( 1.0 + Mgi / KDTi );
end

model vendelin_model_2000__mATP(mATP, ATP, fATP)

  // Assignment Rules:
  mATP := ATP - fATP;
end

model vendelin_model_2000__mATPx(ATPx, fATPx)

  // Assignment Rules:
  mATPx := ATPx - fATPx;
end

model vendelin_model_2000__mATPext(ATPext, fATPext)

  // Assignment Rules:
  mATPext := ATPext - fATPext;
end

model vendelin_model_2000__mATPg(mATPg, ATPg, fATPg)

  // Assignment Rules:
  mATPg := ATPg - fATPg;
end

model vendelin_model_2000__mATPi(mATPi, ATPi, fATPi)

  // Assignment Rules:
  mATPi := ATPi - fATPi;
end

model vendelin_model_2000__fADP(fADP, ADP, Mg)

  // Assignment Rules:
  fADP := ADP / ( 1.0 + Mg / KDD );
end

model vendelin_model_2000__fADPx(fADPx, ADPx, Mgx)

  // Assignment Rules:
  fADPx := ADPx / ( 1.0 + Mgx / KDDx );

  // Variable initializations:
  KDDx = 282.0;
end

model vendelin_model_2000__fADPext(fADPext, ADPext, Mgext)

  // Assignment Rules:
  fADPext := ADPext / ( 1.0 + Mgext / KDDext );

  // Variable initializations:
  KDDext = 347.0;
end

model vendelin_model_2000__fADPg(fADPg, ADPg, Mgg)

  // Assignment Rules:
  fADPg := ADPg / ( 1.0 + Mgg / KDDg );
end

model vendelin_model_2000__fADPi(fADPi, ADPi, Mgi)

  // Assignment Rules:
  fADPi := ADPi / ( 1.0 + Mgi / KDDi );
end

model vendelin_model_2000__mADP(mADP, ADP, fADP)

  // Assignment Rules:
  mADP := ADP - fADP;
end

model vendelin_model_2000__mADPx(ADPx, fADPx)

  // Assignment Rules:
  mADPx := ADPx - fADPx;
end

model vendelin_model_2000__mADPext(ADPext, fADPext)

  // Assignment Rules:
  mADPext := ADPext - fADPext;
end

model vendelin_model_2000__mADPg(mADPg, ADPg, fADPg)

  // Assignment Rules:
  mADPg := ADPg - fADPg;
end

model vendelin_model_2000__mADPi(mADPi, ADPi, fADPi)

  // Assignment Rules:
  mADPi := ADPi - fADPi;
end

model vendelin_model_2000__v_AK(v_AK, fADP, mATP, AMP, mADP)

  // Assignment Rules:
  v_AK := kfa * fADP * mADP - kba * mATP * AMP;

  // Variable initializations:
  kfa = 63.8;
  kba = 1.68;
end

model vendelin_model_2000__v_AKmit(v_AKmit, fADP, mATP, AMP, mADP)

  // Assignment Rules:
  v_AKmit := kfa * fADP * mADP - kba * mATP * AMP;

  // Variable initializations:
  kfa = 63.8;
  kba = 1.68;
end

model vendelin_model_2000__H_ATP(H_ATP, time_)

  // Assignment Rules:
  H_ATP := piecewise( time_ / 30.0 * H_ATPmax , ( time_ >= 0.0) && (time_ < 30.0 ), 60.0 * time_ / 30.0 * H_ATPmax , ( time_ >= 30.0) && (time_ < 60.0 ), 0.0 , ( time_ >= 60.0) && (time_ < 180.0 ) );

  // Variable initializations:
  H_ATPmax = 3.626E4;
end

model vendelin_model_2000__G_CK(G_CK)

  // Assignment Rules:
  G_CK := piecewise( 0.94 * ( 1.0 - x / 0.375 ) , ( x < 0.375) && (y < 1.0 ), 1.61 * (( x - 0.375 ) / 0.375 ) , (( x >= 0.375) && (x < 0.75) && (y < 1.0 )), 1.61 , ( x >= 0.375) || (y >= 1.0 ) );
end

model vendelin_model_2000__G_AK(G_AK, G_CK)

  // Assignment Rules:
  G_AK := G_CK;
end

model vendelin_model_2000__G_H(G_H)

  // Assignment Rules:
  G_H := piecewise( 4.0 / 3.0 * ( x / 0.125 ) , ( x < 0.125) && (y < 1.0 ), 4.0 / 3.0 , (( x >= 0.125) && (x < 0.75) && (y < 1.0 )), 4.0 / 3.0 * ( 1.0 - ( x - 0.75 ) / 0.125 ) , (( x >= 0.75) && (x < 0.875) && (y < 1.0 )), 0.0 , ( x >= 0.875) || (y >= 1.0 ) );
end

model vendelin_model_2000__diffusion_through_mitochondrial_membrane(ATP, ADP, AMP, PCr, Cr, Pi_, ATPi, ADPi, AMPi, PCri, Cri, Pii, R_ATP, R_ADP, R_AMP, R_PCr, R_Cr, R_Pi, D_ATP, D_ADP, D_AMP, D_PCr, D_Cr, D_Pi)
end

model vendelin_model_2000__ATPi(ATPi, R_ATP, FVi, v_ANT, v_MiCK, v_AKmit, ATP, Li, time_)

  // Rate Rules:
  ATPi' = R_ATP / Li * ( ATP - ATPi ) + v_ANT / FVi - v_MiCK / FVi + v_AKmit / FVi;
end

model vendelin_model_2000__ADPi(ADPi, R_ADP, FVi, v_ANT, v_MiCK, v_AKmit, ADP, Li, time_)

  // Rate Rules:
  ADPi' = R_ADP / Li * ( ADP - ADPi ) - ( 2.0 * v_AKmit / FVi + v_ANT / FVi ) + v_MiCK / FVi;
end

model vendelin_model_2000__AMPi(AMPi, R_AMP, FVi, v_AKmit, AMP, Li, time_)

  // Rate Rules:
  AMPi' = R_AMP / Li * ( AMP - AMPi ) + v_AKmit / FVi;
end

model vendelin_model_2000__PCri(PCri, R_PCr, FVi, v_AKmit, PCr, Li, time_)

  // Rate Rules:
  PCri' = R_PCr / Li * ( PCr - PCri ) + v_AKmit / FVi;
end

model vendelin_model_2000__Cri(Cri, R_Cr, FVi, v_MiCK, Cr, Li, time_)

  // Rate Rules:
  Cri' = R_Cr / Li * ( Cr - Cri ) - v_MiCK / FVi;
end

model vendelin_model_2000__Pii(Pii, R_Pi, FVi, v_PI, Pi_, Li, time_)

  // Rate Rules:
  Pii' = R_Pi / Li * ( Pi_ - Pii ) - v_PI / FVi;
end

model vendelin_model_2000__v_MiCK(v_MiCK, PCri, Cri, mATPg, mATPi, mADPg, mADPi)

  // Assignment Rules:
  v_MiCK := v_MiCK_G + v_MiCK_I;
  v_MiCK_G := ( V1 * ( mATPg * Cri / ( Kia_G * Kb )) - V1_ * ( mADPg * PCri / ( Kic_G * Kd ))) / DenMiCK;
  v_MiCK_I := ( V1 * ( mATPi * Cri / ( Kia * Kb )) - V1_ * ( mADPi * PCri / ( Kic * Kd ))) / DenMiCK;
  DenMiCK := 1.0 + Cri / Kib + PCri / Kid + ( mATPg / Kia_G + mATPi / Kia ) * ( 1.0 + Cri / Kb ) + ( mADPg / Kic_G + mADPi / Kic ) * ( 1.0 + PCri / Kd + Cri / KIb );

  // Variable initializations:
  V1 = 7.7E3;
  V1_ = 2.97E4;
  Kia_G = 7.12E2;
  Kia = 1.61E2;
  Kic_G = 1.42E2;
  Kic = 1.10E4;
  Kd = 5.0E2;
  Kb = 5.2E3;
  Kib = 2.6E4;
  Kid = 1.6E3;
  KIb = 2.6E4;
end

model vendelin_model_2000__v_exch(v_exch_ATP, v_exch_ADP, ATPi, ADPi, ATPg, ADPg)

  // Assignment Rules:
  v_exch_ATP := R_exch_ATP * ( ATPi - ATPg );
  v_exch_ADP := R_exch_ADP * ( ADPi - ADPg );

  // Variable initializations:
  R_exch_ATP = 1.88;
  R_exch_ADP = 1.88;
end

model vendelin_model_2000__UQ(UQ, FVx, v_C1, v_C3, time_)

  // Rate Rules:
  UQ' = ( v_C3 - v_C1 ) / FVx;
end

model vendelin_model_2000__c3plus(c3plus, FVx, v_O2, v_C3, time_)

  // Rate Rules:
  c3plus' = 2.0 * ( 2.0 * v_O2 - v_C3 ) / FVx;
end

model vendelin_model_2000__NAD(NAD, v_dh, FVx, v_C1, time_)

  // Rate Rules:
  NAD' = ( v_C1 - v_dh ) / FVx;
end

model vendelin_model_2000__Hx(Hx, delta_Hx, na, r_buff, FVx, v_O2, v_C1, v_sn, v_C3, v_ANT, v_PI, v_leak, u, time_)

  // Assignment Rules:
  delta_Hx := -(( 2.0 * ( 2.0 + u ) * v_O2 + 4.0 * v_C1 + ( 4.0 - 2.0 * u ) * v_C3 - ( na * v_sn + v_ANT * u + ( 1.0 - u ) * v_PI + v_leak ))) / ( FVx * r_buff );

  // Rate Rules:
  Hx' = delta_Hx;
end

model vendelin_model_2000__ATPx(ATPx, FVx, v_sn, v_ANT, time_)

  // Rate Rules:
  ATPx' = ( v_sn - v_ANT ) / FVx;
end

model vendelin_model_2000__Pix(Pix, FVx, v_sn, v_PI, time_)

  // Rate Rules:
  Pix' = ( v_PI - v_sn ) / FVx;
end

model vendelin_model_2000__oxidative_phosphorylation(v_dh, v_C1, v_C3, v_O2, v_sn, v_leak, v_PI, delta_p, delta_Gsn, Z, En, Eu, Ec, Ea, NADH, NAD, c2plus, a2plus, Pii, Pix, Hext, Hx, pHx, pHext, u)

  // Assignment Rules:
  v_dh := k_dh / power( 1.0 + k_mN / (NAD / NADH), pD );
  v_C1 := k_C1 * ( Eu - ( En + 2.0 * delta_p ));
  v_C3 := k_C3 * ( Ec - ( Eu + ( 2.0 - u ) * delta_p ));
  v_O2 := 0.5 * k_C4 * a2plus * c2plus * ( O2 / ( O2 + k_mO ));
  v_sn := k_sn * ((power( 10.0 , delta_Gsn / Z ) - 1.0 ) / (power( 10.0 , delta_Gsn / Z ) + 1.0 ));
  v_leak := k_L1 * (power( 10.0 , k_L2 * delta_p ) - 1.0 );
  v_PI := vfPI * Hext * ( Pii / ( 1.0 + power( 10.0 , pHext - pKa ))) - vbPI * Hx * ( Pix / ( 1.0 + power( 10.0 , pHx - pKa )));

  // Variable initializations:
  k_L1 = 2.1895E3;
  k_L2 = 0.003;
  k_dh = 5.75E4;
  k_sn = 2.96E4;
  k_C1 = 2.0E2;
  k_C3 = 1.142E2;
  k_C4 = 2.351;
  k_mO = 150.0;
  k_mN = 100.0;
  pD = 0.8;
  O2 = 2.4E2;
  vfPI = 138.5;
  vbPI = 138.5;
  pKa = 6.8;
end

model vendelin_model_2000__NADH(NADH, NAD)

  // Assignment Rules:
  NADH := NAD_tot - NAD;

  // Variable initializations:
  NAD_tot = 2.97E3;
end

model vendelin_model_2000__UQH2(UQH2, UQ)

  // Assignment Rules:
  UQH2 := UQ_tot - UQ;

  // Variable initializations:
  UQ_tot = 1.35E3;
end

model vendelin_model_2000__c2plus(c2plus, c3plus)

  // Assignment Rules:
  c2plus := ctot - c3plus;

  // Variable initializations:
  ctot = 2.7E2;
end

model vendelin_model_2000__a2plus(a2plus, a3_2)

  // Assignment Rules:
  a2plus := atot - a3_2;

  // Variable initializations:
  atot = 1.35E2;
end

model vendelin_model_2000__ADPx(ATPx, ADPx)

  // Assignment Rules:
  ADPx := Ax - ATPx;

  // Variable initializations:
  Ax = 1.0E4;
end

model vendelin_model_2000__pHx(pHx, eta, Hx)

  // Assignment Rules:
  pHx := -(log( eta * Hx ));
end

model vendelin_model_2000__delta_pH(delta_pH, pHx, pHext, Z)

  // Assignment Rules:
  delta_pH := Z * ( pHext - pHx );
end

model vendelin_model_2000__delta_p(delta_p, u, delta_pH)

  // Assignment Rules:
  delta_p := 1.0 / ( 1.0 - u ) * delta_pH;
end

model vendelin_model_2000__delta_psi(delta_psi, delta_p, delta_pH)

  // Assignment Rules:
  delta_psi := -(( delta_p - delta_pH ));
end

model vendelin_model_2000__Hext(Hext, eta, pHext)

  // Assignment Rules:
  Hext := eta * power( 1.0 , -( pHext ));
end

model vendelin_model_2000__r_buff(r_buff, delta_pH, delta_Hx, eta, pHx)

  // Assignment Rules:
  r_buff := r_buff0 * eta * ( delta_pH / delta_Hx );

  // Variable initializations:
  r_buff0 = 0.022;
end

model vendelin_model_2000__Z(Z, T, R, F)

  // Assignment Rules:
  Z := ln( 10.0 ) * ( R * T / F );
end

model vendelin_model_2000__v_ANT(v_ANT, Z, delta_psi, fADPi, fATPi, fADPg, fATPg, fADPx, fATPx)

  // Assignment Rules:
  v_ANT := v_ANT_XG + v_ANT_XI;

  // Variable initializations:
  Kg = 4.25;
  Ki = 4.25;
end

model vendelin_model_2000__delta_Gsn(delta_Gsn, delta_p, na, Z, eta, F, ADPx, ATPx, Pix)

  // Assignment Rules:
  delta_Gsn := na * delta_p - delta_Gsn0 / F + Z * log( eta * ATPx / ( ADPx * Pix ));

  // Variable initializations:
  delta_Gsn0 = 31.9;
end

model vendelin_model_2000__redox_potentials(En, Eu, Ec, Ea, a3_2, delta_p, u, Z, NAD, NADH, UQ, UQH2, c3plus, c2plus)

  // Assignment Rules:
  En := En0 + Z / 2.0 * log( NAD / NADH );
  Eu := Eu0 + Z / 2.0 * log( UQ / UQH2 );
  Ec := Ec0 + Z / 2.0 * log( c3plus / c2plus );
  Ea := Ec + ( 1.0 + u ) * delta_p;
  a3_2 := power( 10.0 , ( Ea - Ea0 ) * Z );

  // Variable initializations:
  En0 = -320.0;
  Eu0 = 85.0;
  Ec0 = 250.0;
  Ea0 = 540.0;
end

model vendelin_model_2000__diffusion_constants(D_ATP, D_ADP, D_AMP, D_PCr, D_Cr, D_Pi)

  // Variable initializations:
  D_ATP = 1.45E2;
  D_ADP = 1.45E2;
  D_AMP = 1.45E2;
  D_PCr = 2.6E2;
  D_Cr = 2.6E2;
  D_Pi = 3.27E2;
end

model vendelin_model_2000__Mg_buffering(Mg, Mgg, Mgi, Mgext, Mgx, ATPg, ADPg, ATPext, ADPext)

  // Variable initializations:
  Mgext = 1.0E3;
  Mgx = 380.0;
end

model vendelin_model_2000__H_buffering(pHext)

  // Variable initializations:
  pHext = 6.9;
end

model vendelin_model_2000__diffusion_through_mitochondrial_membrane_parameters(Li, R_ATP, R_ADP, R_AMP, R_PCr, R_Cr, R_Pi)

  // Variable initializations:
  Li = 0.1;
  R_ATP = 0.16;
  R_ADP = 0.16;
  R_AMP = 0.16;
  R_PCr = 260.0;
  R_Cr = 260.0;
  R_Pi = 327.0;
end

model vendelin_model_2000__general_constants(R, T, F, u, eta, na)

  // Variable initializations:
  R = 0.0083;
  T = 298.0;
  F = 0.0965;
  u = 0.861;
  eta = 10E6;
  na = 2.5;
end

model vendelin_model_2000__fractional_volumes(FVx, FVi)

  // Variable initializations:
  FVx = 0.1875;
  FVi = 0.0625;
end

model vendelin_model_2000____main()

  // Sub-modules, and any changes to those submodules:
  environment: vendelin_model_2000__environment(time_);
  ATP: vendelin_model_2000__ATP(ATP0, G_CK0, v_CK0, G_AK0, v_AK0, G_H0, H_ATP0, D_ATP, time_);
  ADP: vendelin_model_2000__ADP(ADP0, G_CK0, v_CK0, G_AK0, v_AK0, G_H0, H_ATP0, D_ADP, time_);
  AMP: vendelin_model_2000__AMP(AMP0, G_AK0, v_AK0, D_AMP, time_);
  PCr: vendelin_model_2000__PCr(PCr0, G_CK0, v_CK0, D_PCr, time_);
  Cr: vendelin_model_2000__Cr(Cr0, G_CK0, v_CK0, D_Cr, time_);
  Pi_: vendelin_model_2000__Pi(Pi_0, G_H0, H_ATP0, D_Pi, time_);
  v_CK: vendelin_model_2000__v_CK(v_CK0, mATP0, Cr0, PCr0, mADP0);
  fATP: vendelin_model_2000__fATP(fATP0, ATP0, Mg);
  fATPx: vendelin_model_2000__fATPx(fATPx0, ATPx0, Mgx);
  fATPext: vendelin_model_2000__fATPext(fATPext0, ATPext, Mgext);
  fATPg: vendelin_model_2000__fATPg(fATPg0, ATPg, Mgg);
  fATPi: vendelin_model_2000__fATPi(fATPi0, ATPi0, Mgi);
  mATP: vendelin_model_2000__mATP(mATP0, ATP0, fATP0);
  mATPx: vendelin_model_2000__mATPx(ATPx0, fATPx0);
  mATPext: vendelin_model_2000__mATPext(ATPext, fATPext0);
  mATPg: vendelin_model_2000__mATPg(mATPg0, ATPg, fATPg0);
  mATPi: vendelin_model_2000__mATPi(mATPi0, ATPi0, fATPi0);
  fADP: vendelin_model_2000__fADP(fADP0, ADP0, Mg);
  fADPx: vendelin_model_2000__fADPx(fADPx0, ADPx0, Mgx);
  fADPext: vendelin_model_2000__fADPext(fADPext0, ADPext, Mgext);
  fADPg: vendelin_model_2000__fADPg(fADPg0, ADPg, Mgg);
  fADPi: vendelin_model_2000__fADPi(fADPi0, ADPi0, Mgi);
  mADP: vendelin_model_2000__mADP(mADP0, ADP0, fADP0);
  mADPx: vendelin_model_2000__mADPx(ADPx0, fADPx0);
  mADPext: vendelin_model_2000__mADPext(ADPext, fADPext0);
  mADPg: vendelin_model_2000__mADPg(mADPg0, ADPg, fADPg0);
  mADPi: vendelin_model_2000__mADPi(mADPi0, ADPi0, fADPi0);
  v_AK: vendelin_model_2000__v_AK(v_AK0, fADP0, mATP0, AMP0, mADP0);
  v_AKmit: vendelin_model_2000__v_AKmit(v_AKmit0, fADP0, mATP0, AMP0, mADP0);
  H_ATP: vendelin_model_2000__H_ATP(H_ATP0, time_);
  G_CK: vendelin_model_2000__G_CK(G_CK0);
  G_AK: vendelin_model_2000__G_AK(G_AK0, G_CK0);
  G_H: vendelin_model_2000__G_H(G_H0);
  diffusion_through_mitochondrial_membrane: vendelin_model_2000__diffusion_through_mitochondrial_membrane(ATP0, ADP0, AMP0, PCr0, Cr0, Pi_0, ATPi0, ADPi0, AMPi0, PCri0, Cri0, Pii0, R_ATP, R_ADP, R_AMP, R_PCr, R_Cr, R_Pi, D_ATP, D_ADP, D_AMP, D_PCr, D_Cr, D_Pi);
  ATPi: vendelin_model_2000__ATPi(ATPi0, R_ATP, FVi, v_ANT0, v_MiCK0, v_AKmit0, ATP0, Li, time_);
  ADPi: vendelin_model_2000__ADPi(ADPi0, R_ADP, FVi, v_ANT0, v_MiCK0, v_AKmit0, ADP0, Li, time_);
  AMPi: vendelin_model_2000__AMPi(AMPi0, R_AMP, FVi, v_AKmit0, AMP0, Li, time_);
  PCri: vendelin_model_2000__PCri(PCri0, R_PCr, FVi, v_AKmit0, PCr0, Li, time_);
  Cri: vendelin_model_2000__Cri(Cri0, R_Cr, FVi, v_MiCK0, Cr0, Li, time_);
  Pii: vendelin_model_2000__Pii(Pii0, R_Pi, FVi, v_PI, Pi_0, Li, time_);
  v_MiCK: vendelin_model_2000__v_MiCK(v_MiCK0, PCri0, Cri0, mATPg0, mATPi0, mADPg0, mADPi0);
  v_exch: vendelin_model_2000__v_exch(v_exch_ATP, v_exch_ADP, ATPi0, ADPi0, ATPg, ADPg);
  UQ: vendelin_model_2000__UQ(UQ0, FVx, v_C1, v_C3, time_);
  c3plus: vendelin_model_2000__c3plus(c3plus0, FVx, v_O2, v_C3, time_);
  NAD: vendelin_model_2000__NAD(NAD0, v_dh, FVx, v_C1, time_);
  Hx: vendelin_model_2000__Hx(Hx0, delta_Hx, na, r_buff0, FVx, v_O2, v_C1, v_sn, v_C3, v_ANT0, v_PI, v_leak, u, time_);
  ATPx: vendelin_model_2000__ATPx(ATPx0, FVx, v_sn, v_ANT0, time_);
  Pix: vendelin_model_2000__Pix(Pix0, FVx, v_sn, v_PI, time_);
  oxidative_phosphorylation: vendelin_model_2000__oxidative_phosphorylation(v_dh, v_C1, v_C3, v_O2, v_sn, v_leak, v_PI, delta_p0, delta_Gsn0, Z0, En, Eu, Ec, Ea, NADH0, NAD0, c2plus0, a2plus0, Pii0, Pix0, Hext0, Hx0, pHx0, pHext, u);
  NADH: vendelin_model_2000__NADH(NADH0, NAD0);
  UQH2: vendelin_model_2000__UQH2(UQH20, UQ0);
  c2plus: vendelin_model_2000__c2plus(c2plus0, c3plus0);
  a2plus: vendelin_model_2000__a2plus(a2plus0, a3_2);
  ADPx: vendelin_model_2000__ADPx(ATPx0, ADPx0);
  pHx: vendelin_model_2000__pHx(pHx0, eta, Hx0);
  delta_pH: vendelin_model_2000__delta_pH(delta_pH0, pHx0, pHext, Z0);
  delta_p: vendelin_model_2000__delta_p(delta_p0, u, delta_pH0);
  delta_psi: vendelin_model_2000__delta_psi(delta_psi0, delta_p0, delta_pH0);
  Hext: vendelin_model_2000__Hext(Hext0, eta, pHext);
  r_buff: vendelin_model_2000__r_buff(r_buff0, delta_pH0, delta_Hx0, eta, pHx0);
  Z: vendelin_model_2000__Z(Z0, T, R, F);
  v_ANT: vendelin_model_2000__v_ANT(v_ANT0, Z0, delta_psi0, fADPi0, fATPi0, fADPg0, fATPg0, fADPx0, fATPx0);
  delta_Gsn: vendelin_model_2000__delta_Gsn(delta_Gsn0, delta_p0, na, Z0, eta, F, ADPx0, ATPx0, Pix0);
  redox_potentials: vendelin_model_2000__redox_potentials(En, Eu, Ec, Ea, a3_2, delta_p0, u, Z0, NAD0, NADH0, UQ0, UQH20, c3plus0, c2plus0);
  diffusion_constants: vendelin_model_2000__diffusion_constants(D_ATP, D_ADP, D_AMP, D_PCr, D_Cr, D_Pi);
  Mg_buffering: vendelin_model_2000__Mg_buffering(Mg, Mgg, Mgi, Mgext, Mgx, ATPg, ADPg, ATPext, ADPext);
  H_buffering: vendelin_model_2000__H_buffering(pHext);
  diffusion_through_mitochondrial_membrane_parameters: vendelin_model_2000__diffusion_through_mitochondrial_membrane_parameters(Li, R_ATP, R_ADP, R_AMP, R_PCr, R_Cr, R_Pi);
  general_constants: vendelin_model_2000__general_constants(R, T, F, u, eta, na);
  fractional_volumes: vendelin_model_2000__fractional_volumes(FVx, FVi);
end
