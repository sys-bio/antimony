//Created by libAntimony v1.3
model cellmlmod_environment()

  //Other declarations:
  var time;
end

model cellmlmod_membrane()

  // Rate Rules:
   Vm ' = -(( Ik  +  Ica  +  Ikca  +  Ikatp )) /  cm

  // Variable initializations:
  Vm = -60.0;
  cm = 5300.0;

  //Other declarations:
  var Vm, cm, Ica, Ik, Ikca, Ikatp, time;
end

model cellmlmod_Ik()

  // Assignment Rules:
  Ik := gK  *  n  * ( Vm  -  VK )

  // Variable initializations:
  gK = 2700.0;

  //Other declarations:
  var Ik, gK, time, VK, Vm, n;
end

model cellmlmod_n()

  // Assignment Rules:
  n_infinity := 1.0   / ( 1.0   + exp(( vn  -  Vm ) /  sn ))

  // Rate Rules:
   n ' = ( n_infinity  -  n ) /  tau_n

  // Variable initializations:
  n = 0.0;
  tau_n = 20.0;
  vn = -16.0;
  sn = 5.0;

  //Other declarations:
  var n, n_infinity, tau_n, vn, sn, time, Vm;
end

model cellmlmod_Ica()

  // Assignment Rules:
  Ica := gCa  *  m_infinity  * ( Vm  -  VCa )

  // Variable initializations:
  gCa = 1000.0;

  //Other declarations:
  var Ica, gCa, time, VCa, Vm, m_infinity;
end

model cellmlmod_m()

  // Assignment Rules:
  m_infinity := 1.0   / ( 1.0   + exp(( v  -  Vm ) /  sm ))

  // Variable initializations:
  v = -20.0;
  sm = 12.0;

  //Other declarations:
  var m_infinity, v, sm, Vm;
end

model cellmlmod_Ikca()

  // Assignment Rules:
  Ikca := gkCa  / ( 1.0   + power( kd  /  c ,  2.0  )) * ( Vm  -  VK )

  // Variable initializations:
  gkCa = 300.0;
  kd = 0.5;

  //Other declarations:
  var Ikca, gkCa, kd, time, VK, c, Vm;
end

model cellmlmod_Ikatp()

  // Assignment Rules:
  Ikatp := gkATP_  *  katpo  * ( Vm  -  VK )
  katpo := topo / bottomo
  topo := 0.08   * ( 1.0   +  2.0   *  mgadp  /  17.0  ) +  0.89   * power( mgadp  /  17.0  ,  2.0  )
  bottomo := power( 1.0   +  mgadp  /  17.0  ,  2.0  ) * ( 1.0   +  adp3m  /  26.0   +  atp4m  /  1.0  )
  mgadp := 0.165   *  adp
  adp3m := 0.135   *  adp
  atp4m := 0.05   *  atp

  // Variable initializations:
  gkATP_ = 16000.0;

  //Other declarations:
  var Ikatp, gkATP_, katpo, topo, bottomo, mgadp, adp3m, atp4m, time, VK;
  var atp, adp, Vm;
end

model cellmlmod_JGPDH()

  // Assignment Rules:
  JGPDH := kGPDH  * root(abs( FBP  / 1 ))

  // Variable initializations:
  kGPDH = 0.0005;

  //Other declarations:
  var JGPDH, kGPDH, FBP;
end

model cellmlmod_G6P()

  // Rate Rules:
   G6P ' = JGK_ms  -  JPFK_ms

  // Variable initializations:
  G6P = 301.0;

  //Other declarations:
  var G6P, JGK_ms, JPFK_ms, time;
end

model cellmlmod_FBP()

  // Rate Rules:
   FBP ' = JPFK_ms  -  0.5   *  JGPDH

  // Variable initializations:
  FBP = 2.16;

  //Other declarations:
  var FBP, JPFK_ms, JGPDH, time;
end

model cellmlmod_F6P()

  // Assignment Rules:
  F6P := 0.3   *  G6P

  //Other declarations:
  var F6P, G6P;
end

model cellmlmod_JPFK()

  // Assignment Rules:
  JPFK_ms := kappa  *  JPFK
  weight2 := power(atp, 2 ) / (k4 * 1 )
  topa2 := topa1
  bottom2 := bottom1 + weight2
  topa3 := topa2 + weight3
  weight3 := power(F6P, 2 ) / (k3 * 1 )
  bottom3 := bottom2 + weight3
  weight4 := power(F6P * atp, 2 ) / (f43 * k3 * k4 * power(1 , 2 ))
  topa4 := topa3 + weight4
  bottom4 := bottom3 + weight4
  weight5 := FBP / k2
  topa5 := topa4
  bottom5 := bottom4 + weight5
  weight6 := FBP * power(atp, 2 ) / (k2 * k4 * f42 * 1 )
  topa6 := topa5
  bottom6 := bottom5 + weight6
  weight7 := FBP * power(F6P, 2 ) / (k2 * k3 * f23 * 1 )
  topa7 := topa6 + weight7
  bottom7 := bottom6 + weight7
  weight8 := FBP * power(F6P, 2 ) * power(atp, 2 ) / (k2 * k3 * k4 * f23 * f42 * f43 * power(1 , 2 ))
  topa8 := topa7 + weight8
  bottom8 := bottom7 + weight8
  weight9 := AMP / k1
  topa9 := topa8
  bottom9 := bottom8 + weight9
  weight10 := AMP * power(atp, 2 ) / (k1 * k4 * f41 * 1 )
  topa10 := topa9
  bottom10 := bottom9 + weight10
  weight11 := AMP * power(F6P, 2 ) / (k1 * k3 * f13 * 1 )
  topa11 := topa10 + weight11
  bottom11 := bottom10 + weight11
  weight12 := AMP * power(F6P, 2 ) * power(atp, 2 ) / (k1 * k3 * k4 * f13 * f41 * f43 * power(1 , 2 ))
  topa12 := topa11 + weight12
  bottom12 := bottom11 + weight12
  weight13 := AMP * FBP / (k1 * k2)
  topa13 := topa12
  bottom13 := bottom12 + weight13
  weight14 := AMP * FBP * power(atp, 2 ) / (k1 * k2 * k4 * f42 * f41 * 1 )
  topa14 := topa13
  bottom14 := bottom13 + weight14
  weight15 := AMP * FBP * power(F6P, 2 ) / (k1 * k2 * k3 * f23 * f13 * 1 )
  topa15 := topa14
  bottom15 := bottom14 + weight15
  weight16 := AMP * FBP * power(F6P, 2 ) * power(atp, 2 ) / (k1 * k2 * k3 * k4 * f23 * f13 * f42 * f41 * f43 * power(1 , 2 ))
  topa16 := topa15 + weight16
  bottom16 := bottom15 + weight16
  topb := weight15

  // Variable initializations:
  bottom1 = 1;
  topa1 = 0;
  k1 = 30;
  k2 = 1;
  k3 = 50000;
  k4 = 1000;
  VmaxPFK = 5.0;
  f13 = 0.02;
  f43 = 20;
  f23 = 0.2;
  f42 = 20;
  f41 = 20;
  lambda = 0.06;

  //Other declarations:
  var JPFK, JPFK_ms, bottom1, topa1, k1, k2, k3, k4, VmaxPFK, atp, weight2;
  var topa2, bottom2, F6P, topa3, weight3, bottom3, f13, f43, f23, f42, f41;
  var weight4, topa4, bottom4, weight5, topa5, bottom5, weight6, topa6, bottom6;
  var weight7, topa7, bottom7, weight8, topa8, bottom8, weight9, topa9, bottom9;
  var weight10, topa10, bottom10, weight11, topa11, bottom11, weight12, topa12;
  var bottom12, weight13, topa13, bottom13, weight14, topa14, bottom14, weight15;
  var topa15, bottom15, weight16, topa16, bottom16, topb, FBP, AMP, lambda;
  var kappa;
end

model cellmlmod_JPDH()

  // Assignment Rules:
  JPDH := p1  / ( p2  +  NADHm  /  NADm ) * ( Cam  / ( p3  +  Cam )) * ( JGPDH  +  JGPDHbas )

  // Variable initializations:
  p1 = 400.0;
  p2 = 1.0;
  p3 = 0.01;
  JGPDHbas = 0.0005;

  //Other declarations:
  var JPDH, p1, p2, p3, JGPDHbas, NADm, Cam, NADHm, JGPDH;
end

model cellmlmod_NADHm()

  // Rate Rules:
   NADHm ' = gamma  * ( JPDH  -  JO )

  // Variable initializations:
  NADHm = 0.4;

  //Other declarations:
  var NADHm, gamma, JPDH, JO, time;
end

model cellmlmod_JO()

  // Assignment Rules:
  JO := p4  * ( NADHm  / ( p5  +  NADHm )) / ( 1.0   + exp(( delta_psi  -  p6 ) /  p7 ))

  // Variable initializations:
  p4 = 0.6;
  p5 = 0.1;
  p6 = 177.0;
  p7 = 5.0;

  //Other declarations:
  var JO, p4, p5, p6, p7, NADHm, delta_psi;
end

model cellmlmod_NADm()

  // Assignment Rules:
  NADm := NADmtot  -  NADHm

  // Variable initializations:
  NADmtot = 10.0;

  //Other declarations:
  var NADm, NADmtot, NADHm;
end

model cellmlmod_delta_psi()

  // Rate Rules:
   delta_psi ' = ( JHres  - ( JHatp  +  JANT  +  JHleak  +  JNaCa  +  2.0   *  Juni )) /  Cmito

  // Variable initializations:
  delta_psi = 164.0;
  Cmito = 1.8;

  //Other declarations:
  var delta_psi, Cmito, JHres, JHatp, JANT, JHleak, JNaCa, Juni, time;
end

model cellmlmod_JHres()

  // Assignment Rules:
  JHres := p8  * ( NADHm  / ( p9  +  NADHm )) / ( 1.0   + exp(( delta_psi  -  p10 ) /  p11 ))

  // Variable initializations:
  p8 = 7.0;
  p9 = 0.1;
  p10 = 177.0;
  p11 = 5.0;

  //Other declarations:
  var JHres, p8, p9, p10, p11, NADHm, delta_psi;
end

model cellmlmod_JF1F0()

  // Assignment Rules:
  JF1F0 := p16  *  p13  / ( p13  +  ATPm ) / ( 1.0   + exp(( p14  -  delta_psi ) /  p15 ))

  // Variable initializations:
  p13 = 10.0;
  p14 = 190.0;
  p15 = 8.5;
  p16 = 35.0;

  //Other declarations:
  var JF1F0, p13, p14, p15, p16, ATPm, delta_psi;
end

model cellmlmod_JHatp()

  // Assignment Rules:
  JHatp := 3.0   *  JF1F0

  //Other declarations:
  var JHatp, JF1F0;
end

model cellmlmod_JGK()

  // Assignment Rules:
  JGK_ms := kappa  *  JGK

  // Variable initializations:
  JGK = 0.4;

  //Other declarations:
  var JGK_ms, JGK, kappa;
end

model cellmlmod_JHleak()

  // Assignment Rules:
  JHleak := p17  *  delta_psi  +  p18

  // Variable initializations:
  p17 = 0.002;
  p18 = -0.03;

  //Other declarations:
  var JHleak, p17, p18, delta_psi;
end

model cellmlmod_JANT()

  // Assignment Rules:
  JANT := p19  * ( RATm  / ( RATm  +  p20 ) / exp( -0.5   *  FRT  *  delta_psi ))

  // Variable initializations:
  p19 = 0.35;
  p20 = 2.0;
  FRT = 0.037410133;

  //Other declarations:
  var JANT, p19, p20, FRT, RATm, delta_psi;
end

model cellmlmod_RATm()

  // Assignment Rules:
  RATm := ATPm  /  ADPm

  //Other declarations:
  var RATm, ATPm, ADPm;
end

model cellmlmod_Juni()

  // Assignment Rules:
  Juni := ( p21  *  delta_psi  -  p22 ) * power( c ,  2.0  )

  // Variable initializations:
  p21 = 0.04;
  p22 = 1.1;

  //Other declarations:
  var Juni, p21, p22, c, delta_psi;
end

model cellmlmod_JNaCa()

  // Assignment Rules:
  JNaCa := p23  /  c  *  Cam  * exp( p24  *  delta_psi )

  // Variable initializations:
  p23 = 0.01;
  p24 = 0.016;

  //Other declarations:
  var JNaCa, p23, p24, c, Cam, delta_psi;
end

model cellmlmod_Cam()

  // Rate Rules:
   Cam ' = -( fmito ) *  Jmito

  // Variable initializations:
  Cam = 0.2;
  fmito = 0.01;

  //Other declarations:
  var Cam, fmito, Jmito, time;
end

model cellmlmod_Jmito()

  // Assignment Rules:
  Jmito := JNaCa  -  Juni

  //Other declarations:
  var Jmito, JNaCa, Juni;
end

model cellmlmod_ADPm()

  // Rate Rules:
   ADPm ' = gamma  * ( JANT  -  JF1F0 )

  // Variable initializations:
  ADPm = 11.1;

  //Other declarations:
  var ADPm, gamma, JANT, JF1F0, time;
end

model cellmlmod_ATPm()

  // Assignment Rules:
  ATPm := Amtot  -  ADPm

  // Variable initializations:
  Amtot = 15.0;

  //Other declarations:
  var ATPm, Amtot, ADPm;
end

model cellmlmod_adp()

  // Rate Rules:
   adp ' = -( delta ) *  JANT  +  Jhyd

  // Variable initializations:
  adp = 1137.0;

  //Other declarations:
  var adp, delta, Jhyd, JANT, time;
end

model cellmlmod_Jhyd()

  // Assignment Rules:
  Jhyd := ( khyd  *  c  +  khydbas ) *  atp

  // Variable initializations:
  khyd = 0.00005;
  khydbas = 0.00005;

  //Other declarations:
  var Jhyd, khyd, khydbas, c, atp;
end

model cellmlmod_atp()

  // Assignment Rules:
  atp := atot  -  adp

  // Variable initializations:
  atot = 2500.0;

  //Other declarations:
  var atp, atot, adp;
end

model cellmlmod_c()

  // Rate Rules:
   c ' = fcyt  * ( Jmem  +  Jer  +  delta  *  Jmito )

  // Variable initializations:
  c = 0.17;
  fcyt = 0.01;

  //Other declarations:
  var c, fcyt, delta, Jer, Jmem, Jmito, time;
end

model cellmlmod_Jmem()

  // Assignment Rules:
  Jmem := -(( alpha  *  Ica  +  kPMCA  * ( c  -  Cbas )))

  // Variable initializations:
  kPMCA = 0.1;
  alpha = 4.5E-6;
  Cbas = 0.05;

  //Other declarations:
  var Jmem, kPMCA, alpha, Cbas, c, Ica;
end

model cellmlmod_Jleak()

  // Assignment Rules:
  Jleak := pleak  * ( Caer  -  c )

  // Variable initializations:
  pleak = 0.0002;

  //Other declarations:
  var Jleak, pleak, c, Caer;
end

model cellmlmod_JSERCA()

  // Assignment Rules:
  JSERCA := kSERCA  *  c

  // Variable initializations:
  kSERCA = 0.4;

  //Other declarations:
  var JSERCA, kSERCA, c;
end

model cellmlmod_Jer()

  // Assignment Rules:
  Jer := Jleak  -  JSERCA

  //Other declarations:
  var Jer, Jleak, JSERCA;
end

model cellmlmod_Caer()

  // Rate Rules:
   Caer ' = -( fer ) *  Vc_Ver  *  Jer

  // Variable initializations:
  Caer = 345.0;
  fer = 0.01;
  Vc_Ver = 31.0;

  //Other declarations:
  var Caer, fer, Vc_Ver, Jer, time;
end

model cellmlmod_model_parameters()

  // Assignment Rules:
  delta := 3.9   /  53.2

  // Variable initializations:
  gamma = 0.001;
  kappa = 0.001;
  VK = -75.0;
  VCa = 25.0;
  AMP = 500.0;

  //Other declarations:
  var gamma, kappa, delta, VK, VCa, AMP;
end

model bertram_model_2007_version01()

  // Sub-modules, and any changes to those submodules:
  environment: cellmlmod_environment()
  membrane: cellmlmod_membrane()
  Ik: cellmlmod_Ik()
  n: cellmlmod_n()
  Ica: cellmlmod_Ica()
  m: cellmlmod_m()
  Ikca: cellmlmod_Ikca()
  Ikatp: cellmlmod_Ikatp()
  JGPDH: cellmlmod_JGPDH()
  G6P: cellmlmod_G6P()
  FBP: cellmlmod_FBP()
  F6P: cellmlmod_F6P()
  JPFK: cellmlmod_JPFK()
  JPDH: cellmlmod_JPDH()
  NADHm: cellmlmod_NADHm()
  JO: cellmlmod_JO()
  NADm: cellmlmod_NADm()
  delta_psi: cellmlmod_delta_psi()
  JHres: cellmlmod_JHres()
  JF1F0: cellmlmod_JF1F0()
  JHatp: cellmlmod_JHatp()
  JGK: cellmlmod_JGK()
  JHleak: cellmlmod_JHleak()
  JANT: cellmlmod_JANT()
  RATm: cellmlmod_RATm()
  Juni: cellmlmod_Juni()
  JNaCa: cellmlmod_JNaCa()
  Cam: cellmlmod_Cam()
  Jmito: cellmlmod_Jmito()
  ADPm: cellmlmod_ADPm()
  ATPm: cellmlmod_ATPm()
  adp: cellmlmod_adp()
  Jhyd: cellmlmod_Jhyd()
  atp: cellmlmod_atp()
  c: cellmlmod_c()
  Jmem: cellmlmod_Jmem()
  Jleak: cellmlmod_Jleak()
  JSERCA: cellmlmod_JSERCA()
  Jer: cellmlmod_Jer()
  Caer: cellmlmod_Caer()
  model_parameters: cellmlmod_model_parameters()
  G6P.time is environment.time;
  FBP.time is environment.time;
  NADHm.time is environment.time;
  delta_psi.time is environment.time;
  Cam.time is environment.time;
  ADPm.time is environment.time;
  membrane.time is environment.time;
  Ik.time is environment.time;
  Ica.time is environment.time;
  Ikca.time is environment.time;
  Ikatp.time is environment.time;
  adp.time is environment.time;
  c.time is environment.time;
  Caer.time is environment.time;
  G6P.JPFK_ms is JPFK.JPFK_ms;
  G6P.G6P is F6P.G6P;
  FBP.FBP is JGPDH.FBP;
  FBP.JGPDH is JGPDH.JGPDH;
  FBP.JPFK_ms is JPFK.JPFK_ms;
  JGPDH.FBP is JPFK.FBP;
  JPDH.JGPDH is JGPDH.JGPDH;
  JPDH.NADm is NADm.NADm;
  JPDH.Cam is Cam.Cam;
  JPDH.NADHm is NADHm.NADHm;
  JPDH.JPDH is NADHm.JPDH;
  JPFK.atp is atp.atp;
  JPFK.F6P is F6P.F6P;
  JPFK.kappa is model_parameters.kappa;
  JPFK.AMP is model_parameters.AMP;
  NADHm.gamma is model_parameters.gamma;
  JO.NADHm is NADHm.NADHm;
  JO.JO is NADHm.JO;
  JO.delta_psi is delta_psi.delta_psi;
  NADm.NADHm is NADHm.NADHm;
  JHres.delta_psi is delta_psi.delta_psi;
  JHres.JHres is delta_psi.JHres;
  JHatp.JHatp is delta_psi.JHatp;
  JGK.kappa is model_parameters.kappa;
  JGK.JGK_ms is G6P.JGK_ms;
  JANT.delta_psi is delta_psi.delta_psi;
  JANT.JANT is delta_psi.JANT;
  JHleak.delta_psi is delta_psi.delta_psi;
  JHleak.JHleak is delta_psi.JHleak;
  JNaCa.delta_psi is delta_psi.delta_psi;
  JNaCa.JNaCa is delta_psi.JNaCa;
  Juni.delta_psi is delta_psi.delta_psi;
  Juni.Juni is delta_psi.Juni;
  JHres.NADHm is NADHm.NADHm;
  JF1F0.ATPm is ATPm.ATPm;
  JF1F0.delta_psi is delta_psi.delta_psi;
  JHatp.JF1F0 is JF1F0.JF1F0;
  JANT.RATm is RATm.RATm;
  RATm.ATPm is ATPm.ATPm;
  RATm.ADPm is ADPm.ADPm;
  Juni.c is c.c;
  JNaCa.c is c.c;
  JNaCa.Cam is Cam.Cam;
  Jmito.Jmito is Cam.Jmito;
  delta_psi.JNaCa is Jmito.JNaCa;
  delta_psi.Juni is Jmito.Juni;
  atp.adp is adp.adp;
  adp.JANT is delta_psi.JANT;
  adp.Jhyd is Jhyd.Jhyd;
  ATPm.ADPm is ADPm.ADPm;
  ADPm.gamma is model_parameters.gamma;
  ADPm.JANT is delta_psi.JANT;
  ADPm.JF1F0 is JF1F0.JF1F0;
  membrane.Ica is Ica.Ica;
  membrane.Vm is Ica.Vm;
  membrane.Ik is Ik.Ik;
  Ica.Vm is Ik.Vm;
  membrane.Ikca is Ikca.Ikca;
  Ik.Vm is Ikca.Vm;
  membrane.Ikatp is Ikatp.Ikatp;
  Ikca.Vm is Ikatp.Vm;
  Ik.VK is model_parameters.VK;
  n.n is Ik.n;
  n.time is environment.time;
  n.Vm is Ikatp.Vm;
  Jmem.Ica is Ica.Ica;
  Ica.VCa is model_parameters.VCa;
  m.m_infinity is Ica.m_infinity;
  m.Vm is Ikatp.Vm;
  Ikca.VK is model_parameters.VK;
  Ikca.c is c.c;
  Ikatp.VK is model_parameters.VK;
  Ikatp.atp is atp.atp;
  Ikatp.adp is adp.adp;
  c.c is Jmem.c;
  c.Jmem is Jmem.Jmem;
  c.Jer is Jer.Jer;
  Caer.Jer is Jer.Jer;
  Jer.Jleak is Jleak.Jleak;
  Jer.JSERCA is JSERCA.JSERCA;
  Jmem.c is JSERCA.c;
  c.Jmito is Cam.Jmito;
  JSERCA.c is Jhyd.c;
  atp.atp is Jhyd.atp;
  Jhyd.c is Jleak.c;
  Caer.Caer is Jleak.Caer;
  adp.delta is model_parameters.delta;
  c.delta is model_parameters.delta;
end
