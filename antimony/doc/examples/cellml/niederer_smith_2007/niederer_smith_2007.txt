//Created by libAntimony v1.3
model niederer_smith_2007__strain_control(NO_on, pH_on, SAC_on)

  // Variable initializations:
  NO_on = 0;
  pH_on = 0;
  SAC_on = 0;
end

model niederer_smith_2007__environment(time_)
end

model niederer_smith_2007__cell_geom(V_myo, V_SR, N, A_cap, rho)

  // Assignment Rules:
  rho := A_cap / V_myo;

  // Variable initializations:
  V_myo = 2.584e-5;
  V_SR = 2.098e-6;
  N = 75000;
  A_cap = 0.01534;
end

model niederer_smith_2007__membrane(V, R, T, F, time_, i_Na, i_t, i_ss, i_f, i_K1, i_NaK, i_Stim, I_CaL, I_NaCa, I_Cab, I_pCa, i_B_Na, i_B_K, I_SAC_Na, I_SAC_K, I_Ko, A_cap, I_Cl, I_H)

  // Assignment Rules:
  Cm := CmF / A_cap;

  // Rate Rules:
  V' = -((I_H + I_Cl + i_Na + I_CaL + i_t + i_ss + i_f + i_K1 + I_Cab + I_SAC_Na + i_B_K + i_B_Na + I_Ko + I_SAC_K + i_NaK + I_NaCa + I_pCa + i_Stim)) / Cm;

  // Variable initializations:
  V = -80.5561112771341;
  R = 8314.5;
  T = 295;
  F = 96487;
  CmF = 0.0001;
end

model niederer_smith_2007__I_stimulus(i_Stim, time_, A_cap)

  // Assignment Rules:
  i_Stim := piecewise( stim_amplitude / A_cap , ( time_ - floor(time_ / stim_period) * stim_period >= 0) && (time_ - floor(time_ / stim_period) * stim_period <= stim_duration ), 0 );

  // Variable initializations:
  stim_period = 1000;
  stim_duration = 10;
  stim_amplitude = -0.0006;
end

model niederer_smith_2007__SAC_current(V, E_Na, E_K, ExtensionRatio, I_SAC_Na, I_SAC_K, I_SAC, A_cap, SAC_on)

  // Assignment Rules:
  I_SAC_Na := g_SAC * gamma_SLSAC * (V - E_Na) / A_cap * r;
  I_SAC_K := g_SAC * gamma_SLSAC * (V - E_K) / A_cap;
  I_SAC := I_SAC_K + I_SAC_Na;
  gamma_SLSAC := piecewise( (ExtensionRatio - 1 ) * 10 , SAC_on == 1 , 0 );
  r := -((E_R + 85 )) / (E_R - 65 );

  // Variable initializations:
  g_SAC = 4.1333e-7;
  E_R = -10;
end

model niederer_smith_2007__KSA_current(V, E_K, ExtensionRatio, A_cap, I_Ko, SAC_on)

  // Assignment Rules:
  gamma_SLKO := piecewise( 0.7 + (ExtensionRatio - 1 ) * 3 , SAC_on == 1 , 0.7 );
  I_Ko := g_Ko / (1 + exp(-((10 + V)) / 45 )) * (V - E_K) * gamma_SLKO / A_cap;

  // Variable initializations:
  g_Ko = 1.2e-6;
end

model niederer_smith_2007__sodium_current_m_gate(m, V, time_)

  // Assignment Rules:
  m_infinity := 1 / (1 + exp((V + 45 ) / -(6.5 )));
  tau_m := 0.00136e3 / (0.32 * (V + 47.13 ) / (1 - exp(-(0.1 ) * (V + 47.13 ))) + 0.08 * exp(-(V) / 11 ));

  // Rate Rules:
  m' = (m_infinity - m) / tau_m;

  // Variable initializations:
  m = 0.00419283833975832;
end

model niederer_smith_2007__sodium_current_h_gate(h, V, time_)

  // Assignment Rules:
  h_infinity := 1 / (1 + exp((V + 76.1 ) / 6.07 ));
  tau_h := piecewise( 0.0004537e3 * (1 + exp(-((V + 10.66 )) / 11.1 )) , V >= -(40 ) , 0.00349e3 / (0.135 * exp(-((V + 80 )) / 6.8 ) + 3.56 * exp(0.079 * V) + 310000 * exp(0.35 * V)) );

  // Rate Rules:
  h' = (h_infinity - h) / tau_h;

  // Variable initializations:
  h = 0.675647510010602;
end

model niederer_smith_2007__sodium_current_j_gate(j, V, time_)

  // Assignment Rules:
  j_infinity := 1 / (1 + exp((V + 76.1 ) / 6.07 ));
  tau_j := piecewise( 0.01163e3 * (1 + exp(-(0.1 ) * (V + 32 ))) / exp(-(0.0000002535 ) * V) , V >= -(40 ) , 0.00349e3 / ((V + 37.78 ) / (1 + exp(0.311 * (V + 79.23 ))) * (-(127140 ) * exp(0.2444 * V) - 0.00003474 * exp(-(0.04391 ) * V)) + 0.1212 * exp(-(0.01052 ) * V) / (1 + exp(-(0.1378 ) * (V + 40.14 )))) );

  // Rate Rules:
  j' = (j_infinity - j) / tau_j;

  // Variable initializations:
  j = 0.675294627571238;
end

model niederer_smith_2007__sodium_current(i_Na, E_Na, Na_i, Na_o, R, F, T, time_, V, m, h, j, A_cap)

  // Sub-modules, and any changes to those submodules:
  sodium_current_m_gate: niederer_smith_2007__sodium_current_m_gate(m, V, time_);
  sodium_current_h_gate: niederer_smith_2007__sodium_current_h_gate(h, V, time_);
  sodium_current_j_gate: niederer_smith_2007__sodium_current_j_gate(j, V, time_);

  // Assignment Rules:
  i_Na := g_Na_endo * power(m, 3 ) * h * j * (V - E_Na) / A_cap;
  E_Na := R * T / F * ln(Na_o / Na_i);
  g_Na_endo := 1.33 * g_Na;

  // Variable initializations:
  g_Na = 0.0008;
end

model niederer_smith_2007__Ca_independent_transient_outward_K_current_r_gate(r, V, time_)

  // Assignment Rules:
  tau_r := 1e3 / (45.16 * exp(0.03577 * (V + 50 )) + 98.9 * exp(-(0.1 ) * (V + 38 )));
  r_infinity := 1 / (1 + exp((V + 10.6 ) / -(11.42 )));

  // Rate Rules:
  r' = (r_infinity - r) / tau_r;

  // Variable initializations:
  r = 0.00218107055088884;
end

model niederer_smith_2007__Ca_independent_transient_outward_K_current_s_gate(s, V, time_)

  // Assignment Rules:
  tau_s_endo := 0.55e3 * exp(-(power((V + 70 ) / 25 , 2 ))) + 0.049e3;
  s_infinity := 1 / (1 + exp((V + 45.3 ) / 6.8841 ));

  // Rate Rules:
  s' = (s_infinity - s) / tau_s_endo;

  // Variable initializations:
  s = 0.922573773425153;
end

model niederer_smith_2007__Ca_independent_transient_outward_K_current_s_slow_gate(s_slow, V, time_)

  // Assignment Rules:
  tau_s_slow_endo := 3.3e3 * exp(-(power((V + 70 ) / 30 , 2 ))) + 0.049e3;
  s_slow_infinity := 1 / (1 + exp((V + 45.3 ) / 6.8841 ));

  // Rate Rules:
  s_slow' = (s_slow_infinity - s_slow) / tau_s_slow_endo;

  // Variable initializations:
  s_slow = 0.530207467628341;
end

model niederer_smith_2007__Ca_independent_transient_outward_K_current(i_t, E_K, time_, V, R, F, T, K_o, K_i, r, s, s_slow, A_cap)

  // Sub-modules, and any changes to those submodules:
  Ca_independent_transient_outward_K_current_r_gate: niederer_smith_2007__Ca_independent_transient_outward_K_current_r_gate(r, V, time_);
  Ca_independent_transient_outward_K_current_s_gate: niederer_smith_2007__Ca_independent_transient_outward_K_current_s_gate(s, V, time_);
  Ca_independent_transient_outward_K_current_s_slow_gate: niederer_smith_2007__Ca_independent_transient_outward_K_current_s_slow_gate(s_slow, V, time_);

  // Assignment Rules:
  i_t := g_t_endo * r * (a_endo * s + b_endo * s_slow) * (V - E_K) / A_cap;
  E_K := R * T / F * ln(K_o / K_i);
  g_t_endo := 0.4647 * g_t;

  // Variable initializations:
  g_t = 3.5e-5;
  a_endo = 0.583;
  b_endo = 0.417;
end

model niederer_smith_2007__steady_state_outward_K_current_r_ss_gate(r_ss, V, time_)

  // Assignment Rules:
  tau_r_ss := 10e3 / (45.16 * exp(0.03577 * (V + 50 )) + 98.9 * exp(-(0.1 ) * (V + 38 )));
  r_ss_infinity := 1 / (1 + exp((V + 11.5 ) / -(11.82 )));

  // Rate Rules:
  r_ss' = (r_ss_infinity - r_ss) / tau_r_ss;

  // Variable initializations:
  r_ss = 0.00289374682707489;
end

model niederer_smith_2007__steady_state_outward_K_current_s_ss_gate(s_ss, V, time_)

  // Assignment Rules:
  tau_s_ss := 2.1e3;
  s_ss_infinity := 1 / (1 + exp((V + 87.5 ) / 10.3 ));

  // Rate Rules:
  s_ss' = (s_ss_infinity - s_ss) / tau_s_ss;

  // Variable initializations:
  s_ss = 0.308572839431787;
end

model niederer_smith_2007__steady_state_outward_K_current(i_ss, time_, V, E_K, r_ss, s_ss, A_cap)

  // Sub-modules, and any changes to those submodules:
  steady_state_outward_K_current_r_ss_gate: niederer_smith_2007__steady_state_outward_K_current_r_ss_gate(r_ss, V, time_);
  steady_state_outward_K_current_s_ss_gate: niederer_smith_2007__steady_state_outward_K_current_s_ss_gate(s_ss, V, time_);

  // Assignment Rules:
  i_ss := g_ss * r_ss * s_ss * (V - E_K) / A_cap;

  // Variable initializations:
  g_ss = 7e-6;
end

model niederer_smith_2007__inward_rectifier(i_K1, time_, V, R, F, T, K_o, K_i, E_K, A_cap)

  // Assignment Rules:
  i_K1 := ((48e-3 / (exp((V + 37 ) / 25 ) + exp((V + 37 ) / -(25 ))) + 10e-3 ) * 0.001 / (1 + exp((V - (E_K + 76.77 )) / -(17 ))) + g_K1 * (V - (E_K + 1.73 )) / ((1 + exp(1.613 * F * (V - (E_K + 1.73 )) / (R * T))) * (1 + exp((K_o - 0.9988 ) / -(0.124 ))))) / A_cap;

  // Variable initializations:
  g_K1 = 2.4e-5;
end

model niederer_smith_2007__hyperpolarisation_activated_current_y_gate(y, V, time_)

  // Assignment Rules:
  tau_y := 1e3 / (0.11885 * exp((V + 80 ) / 28.37 ) + 0.5623 * exp((V + 80 ) / -(14.19 )));
  y_infinity := 1 / (1 + exp((V + 138.6 ) / 10.48 ));

  // Rate Rules:
  y' = (y_infinity - y) / tau_y;

  // Variable initializations:
  y = 0.00331726547133295;
end

model niederer_smith_2007__hyperpolarisation_activated_current(i_f, i_f_Na, i_f_K, time_, V, E_K, E_Na, y, A_cap)

  // Sub-modules, and any changes to those submodules:
  hyperpolarisation_activated_current_y_gate: niederer_smith_2007__hyperpolarisation_activated_current_y_gate(y, V, time_);

  // Assignment Rules:
  i_f := i_f_Na + i_f_K;
  i_f_Na := g_f * y * f_Na * (V - E_Na) / A_cap;
  i_f_K := g_f * y * f_K * (V - E_K) / A_cap;
  f_K := 1 - f_Na;

  // Variable initializations:
  g_f = 1.45e-6;
  f_Na = 0.2;
end

model niederer_smith_2007__background_currents(i_B_Na, i_B_K, E_Na, E_K, R, T, F, time_, V, A_cap)

  // Assignment Rules:
  i_B_Na := scale_Na * g_B_Na * (V - E_Na) / A_cap;
  i_B_K := scale_K * g_B_K * (V - E_K) / A_cap;

  // Variable initializations:
  g_B_Na = 8.015e-8;
  g_B_K = 1.38e-7;
  scale_Na = 0;
  scale_K = 0;
end

model niederer_smith_2007__sodium_potassium_pump(i_NaK, K_o, Na_o, Na_i, R, F, T, V, time_, A_cap)

  // Assignment Rules:
  i_NaK := i_NaK_max / A_cap * p_v * K_o / (K_o + K_m_K) * p_nai;
  sigma := (exp(Na_o / 67.3 ) - 1 ) / 7;
  p_nai := 1 / (1 + power(K_m_Na / Na_i, 4 ));
  p_v := 1 / (1 + 0.1245 * exp(-(0.1 ) * V * F / (R * T)) + 0.0365 * sigma * exp(-(V) * F / (R * T)));

  // Variable initializations:
  i_NaK_max = 9.5e-5;
  K_m_K = 1.5;
  K_m_Na = 10;
end

model niederer_smith_2007__J_CO2(jco2, CO2i, CO2e, rho, V_myo)

  // Assignment Rules:
  jco2 := V_myo * rho * Pco2 * (CO2e - CO2i);

  // Variable initializations:
  Pco2 = 5.8e-5;
end

model niederer_smith_2007__comp_v_nhe_exchanger(ExtensionRatio, pH_i, pH_e, Ae, Ai, V_myo, v_nhe, pH_on)

  // Assignment Rules:
  v_nhe := flux_nhe * V_myo * Q_10Scaler;
  km2 := kp1 * kp2 / km1;
  Be := power(10 , -(pH_e)) * 1e3;
  Bi := power(10 , -(pH_i)) * 1e3;
  am1 := KB * Ai * km1 / (KA * KB + KB * Ai + Ai * Bi + KA * Bi);
  ap1 := KB * Ae * kp1 / (KA * KB + KB * Ae + Ae * Be + KA * Be);
  am2 := KA * Be * km2 / (KA * KB + KB * Ae + Ae * Be + KA * Be);
  ap2 := KA * Bi * kp2 / (KA * KB + KB * Ai + Ai * Bi + KA * Bi);
  reg := power(Bi, n_Hi) / (power(Bi, n_Hi) + power(K_Hs, n_Hi));
  flux_nhe := reg * (ap1 * ap2 - am1 * am2) / (ap1 + ap2 + am1 + am2);
  gamma_NHE := piecewise( 1 - 2.804 * (ExtensionRatio - 1 ) , pH_on == 1 , 1 );
  K_Hs := K_Hi * gamma_NHE;

  // Variable initializations:
  KA = 21.4935205515214;
  KB = 1.77948608115949e-7;
  kp1 = 0.51156085723193;
  km1 = 0.14069285629105;
  kp2 = 0.001698;
  K_Hi = 0.000416869383470335;
  n_Hi = 2;
  Q_10Scaler = 0.35;
end

model niederer_smith_2007__comp_v_che_exchanger(pH_i, pH_e, Cle, Cli, V_myo, v_che)

  // Assignment Rules:
  v_che := V_myo * (km1 * s6 - kp1 * s1) / (60 * 1000 ) * Q_10Scaler;
  km2 := kp2 * km1 / kp1;
  OHe := 1000 * power(10 , -(14 ) + pH_e);
  OHi := 1000 * power(10 , -(14 ) + pH_i);
  a := 1 + K_OH / OHe + K_OH * Cle / (OHe * K_Cl);
  b := 1 + K_Cl / Cle + K_Cl * OHe / (Cle * K_OH);
  c := 1 + K_Cl / Cli + K_Cl * OHi / (Cli * K_OH);
  d := 1 + K_OH / OHi + K_OH * Cli / (OHi * K_Cl);
  s1 := 1 / (a + d * (kp1 + kp2 * a / b) / (km1 + km2 * d / c));
  s6 := 1 / (d + a * (km1 + km2 * d / c) / (kp1 + kp2 * a / b));

  // Variable initializations:
  K_Cl = 17970.36;
  K_OH = 0.0008907;
  kp1 = 14975.6;
  km1 = 257.4;
  kp2 = 4084.9;
  Q_10Scaler = 0.35;
end

model niederer_smith_2007__comp_v_nbc(pH_i, pH_e, HCO3e, HCO3i, Nae, Nai, V_myo, v_nbc)

  // Assignment Rules:
  v_nbc := V_myo * reg * (km1 * s6 - kp1 * s1) / (60 * 1000 ) * Q_10Scaler;
  km2 := kp2 * km1 / kp1;
  He := 1000 * power(10 , -(pH_e));
  Hi := 1000 * power(10 , -(pH_i));
  a := 1 + Nae / K_Na + Nae * HCO3e / (K_Na * K_HCO3);
  b := 1 + K_HCO3 / HCO3e + K_Na * K_HCO3 / (HCO3e * Nae);
  c := 1 + K_HCO3 / HCO3i + K_Na * K_HCO3 / (HCO3i * Nai);
  d := 1 + Nai / K_Na + Nai * HCO3i / (K_Na * K_HCO3);
  s1 := 1 / (a + d * (kp1 + kp2 * a / b) / (km1 + km2 * d / c));
  s6 := 1 / (d + a * (km1 + km2 * d / c) / (kp1 + kp2 * a / b));
  reg := power(Hi, n_Hi) / (power(Hi, n_Hi) + power(K_Hi, n_Hi)) * (1 - power(He, n_He) / (power(He, n_He) + power(K_He, n_He)));

  // Variable initializations:
  K_Na = 4866.11;
  K_HCO3 = 0.008017;
  kp1 = 4677;
  km1 = 777.92;
  kp2 = 6.656;
  K_Hi = 0.000183;
  n_Hi = 2.91;
  K_He = 6.53e-5;
  n_He = 2.18;
  Q_10Scaler = 0.35;
end

model niederer_smith_2007__comp_v_ae(ExtensionRatio, pH_i, pH_e, Cle, Cli, HCO3e, HCO3i, V_myo, v_ae, pH_on)

  // Assignment Rules:
  v_ae := V_myo * reg * (km1 * s6 - kp1 * s1) / (60 * 1000 ) * Q_10Scaler;
  km2 := kp2 * km1 / kp1;
  He := 1000 * power(10 , -(pH_e));
  Hi := 1000 * power(10 , -(pH_i));
  a := 1 + K_HCO3 / HCO3e + K_HCO3 * Cle / (HCO3e * K_Cl);
  b := 1 + K_Cl / Cle + K_Cl * HCO3e / (Cle * K_HCO3);
  c := 1 + K_Cl / Cli + K_Cl * HCO3i / (Cli * K_HCO3);
  d := 1 + K_HCO3 / HCO3i + K_HCO3 * Cli / (HCO3i * K_Cl);
  s1 := 1 / (a + d * (kp1 + kp2 * a / b) / (km1 + km2 * d / c));
  s6 := 1 / (d + a * (km1 + km2 * d / c) / (kp1 + kp2 * a / b));
  reg := power(K_Hs, n_Hi) / (power(Hi, n_Hi) + power(K_Hs, n_Hi)) * power(He, n_He) / (power(He, n_He) + power(K_He, n_He));
  gamma_AE := piecewise( 1 + 2.5 * (ExtensionRatio - 1 ) , pH_on == 1 , 1 );
  K_Hs := K_Hi * gamma_AE;

  // Variable initializations:
  K_Cl = 983.5;
  K_HCO3 = 110.64;
  kp1 = 20789.9;
  km1 = 21118.2;
  kp2 = 21256.54;
  K_Hi = 2.67e-5;
  n_Hi = 5.11;
  K_He = 0.000312;
  n_He = 1.44;
  Q_10Scaler = 0.35;
end

model niederer_smith_2007__intracellular_ion_concentrations(I_Ko, Na_i, K_i, V_myo, time_, F, i_Na, i_B_Na, I_NaCa, i_NaK, i_f_Na, i_f_K, i_B_K, i_K1, i_t, i_ss, A_cap, I_SAC_Na, I_SAC_K, HCO3i, HCO3e, CO2i, CO2e, jco2, V_SR, v_ae, v_nbc, v_nhe, v_che, pH_i, pH_e, Cli, Cle, I_Cl, V, R, T, I_H, i_Stim)

  // Assignment Rules:
  HCO3e := kf_co2hyd / kr_co2hyd * CO2e / (power(10 , -(pH_e)) * 1e3 );
  CO2e := PP_co2e * CO_2sol * P_atm;
  v_co2hyd := (V_myo + V_SR) * (kf_co2hyd * CO2i - kr_co2hyd * HCO3i * power(10 , -(pH_i)) * 1e3 );
  beta_intr := ln(10 ) * (power(10 , -(pH_i)) + power(10 , pH_i + pKa_ib1) * ib1 / power(power(10 , pH_i) + power(10 , pKa_ib1), 2 ) + power(10 , pH_i + pKa_ib2) * ib2 / power(power(10 , pH_i) + power(10 , pKa_ib2), 2 ));
  nai_Nak := i_NaK * 3 * A_cap / (V_myo * F);
  nai_NHE := v_nhe / V_myo;
  nai_NBC := v_nbc / V_myo;
  nai_flux := -((i_B_Na + I_SAC_Na + i_Na + I_NaCa * 3 + i_NaK * 3 + i_f_Na)) * A_cap / (V_myo * F);
  nai_bg := i_f_Na * A_cap / (V_myo * F);
  K_Nak := i_NaK * -(2 ) * A_cap / (V_myo * F);
  K_flux := -((I_SAC_K + i_ss + I_Ko + i_t + i_K1 + i_f_K + i_NaK * -(2 ) + i_B_K)) * A_cap / (V_myo * F);
  I_Cl := g_Cl * (V - E_Cl);
  E_Cl := R * T / F * ln(Cli / Cle);
  I_H := g_H * (V - E_H);
  E_H := R * T / F * ln(H_o / H_i);
  H_o := 1000 * power(10 , -(pH_e));
  H_i := 1000 * power(10 , -(pH_i));
  nai_NaCa := I_NaCa * 3 * A_cap / (V_myo * F);
  nai_na := i_Na * A_cap / (V_myo * F);
  nai_total := nai_flux + nai_NHE + nai_NBC;

  // Rate Rules:
  Na_i' = -((i_B_Na + I_SAC_Na + i_Na + I_NaCa * 3 + i_NaK * 3 + i_f_Na)) * A_cap / (V_myo * F) + (v_nhe + v_nbc) / V_myo;
  K_i' = -((i_Stim + I_SAC_K + i_ss + I_Ko + i_t + i_K1 + i_f_K - 2 * i_NaK + i_B_K)) * A_cap / (V_myo * F);
  HCO3i' = v_co2hyd / (V_myo + V_SR) + (v_nbc - v_ae) / V_myo;
  CO2i' = jco2 / V_myo - v_co2hyd / (V_myo + V_SR) + J_CO2;
  pH_i' = 1 / -(beta_intr) * ((-(v_nhe) + v_che) / V_myo + v_co2hyd / (V_myo + V_SR) - I_H * A_cap / (V_myo * F));
  Cli' = I_Cl * A_cap / (V_myo * F) + pH_scale * (v_che + v_ae) / V_myo;

  // Variable initializations:
  Na_i = 10.9735342589175;
  K_i = 142.021261491871;
  HCO3i = 15.1428688811927;
  CO2i = 1.23610845162584;
  PP_co2e = 0.05;
  CO_2sol = 0.03253;
  P_atm = 760;
  kf_co2hyd = 0.000365;
  kr_co2hyd = 0.481;
  pH_i = 7.20905044774657;
  pH_e = 7.4;
  Cli = 16.2285651746901;
  Cle = 126;
  pKa_ib1 = 6.40013149605198;
  ib1 = 31.2044223705215;
  pKa_ib2 = 7.48048792987277;
  ib2 = 6.84513535697271;
  pH_scale = 1;
  g_Cl = 2e-5;
  g_H = 4e-6;
  J_CO2 = 0;
end

model niederer_smith_2007__standard_ionic_concentrations(Na_o, Ca_o, K_o)

  // Variable initializations:
  Na_o = 140;
  Ca_o = 2;
  K_o = 5.4;
end

model niederer_smith_2007__SL_pump(Ca_i, I_pCa, V_myo, F, A_cap)

  // Assignment Rules:
  I_pCa := g_pCa * Ca_i / (K_mpCa + Ca_i) * 2 * V_myo * F / A_cap;

  // Variable initializations:
  g_pCa = 3.5e-6;
  K_mpCa = 0.0005;
end

model niederer_smith_2007__Cab(V_myo, F, V, Ca_i, Ca_e, delta, E_Ca, I_Cab, A_cap)

  // Assignment Rules:
  E_Ca := log(Ca_e / Ca_i) / delta;
  I_Cab := g_Cab * (V - E_Ca) * 2 * V_myo * F / A_cap;

  // Variable initializations:
  g_Cab = 2.4216e-8;
end

model niederer_smith_2007__I_Ca_L(J_LC, V_myo, F, I_CaL, A_cap)

  // Assignment Rules:
  I_CaL := -(J_LC) * 2 * V_myo * F / A_cap;
end

model niederer_smith_2007__NCX(V_myo, F, delta, Na_i, Na_e, Ca_i, Ca_e, I_NaCa, V, A_cap)

  // Assignment Rules:
  I_NaCa := g_NCX / ((Nae3 + power(K_mNa, 3 )) * (Ca_e + K_mCa)) * (edv * Nai3 * Ca_e - edv2 * Nae3 * Ca_i) / (1 + k_sat * edv2) * V_myo * F / A_cap;
  edv := exp(delta * 0.5 * V * eta);
  edv2 := exp(delta * 0.5 * V * (eta - 1 ));
  Nai3 := power(Na_i, 3 );
  Nae3 := power(Na_e, 3 );

  // Variable initializations:
  K_mNa = 87.5;
  K_mCa = 1.38;
  eta = 0.35;
  k_sat = 0.1;
  g_NCX = 0.0385;
end

model niederer_smith_2007__SERCA(I_SERCA, Ca_i)

  // Assignment Rules:
  I_SERCA := g_SERCA * power(Ca_i, 2 ) / (power(K_SERCA, 2 ) + power(Ca_i, 2 ));

  // Variable initializations:
  g_SERCA = 0.00045;
  K_SERCA = 0.0005;
end

model niederer_smith_2007__ionic_concentrations(Ca_i, Ca_SR, TRPN, J_TPRN, I_NaCa, I_Cab, I_pCa, V_myo, V_SR, time_, J_RY, I_CaL, I_SERCA, F, A_cap, Ca_b, B_TRPN)

  // Assignment Rules:
  J_SR := -(J_RY) + I_SERCA - g_SRl * (Ca_SR - Ca_i);
  Ca_b := B_TRPN - TRPN;

  // Rate Rules:
  Ca_i' = 1 / (1 + B_CMDN * K_CMDN / ((Ca_i + K_CMDN) * (Ca_i + K_CMDN))) * (J_TPRN - J_SR + (2 * I_NaCa - I_pCa - I_Cab - I_CaL) * A_cap / (2 * V_myo * F));
  Ca_SR' = V_myo / V_SR * J_SR;
  TRPN' = J_TPRN;

  // Variable initializations:
  Ca_i = 8.60587059887361e-5;
  Ca_SR = 0.843733859307907;
  TRPN = 0.0670845085340179;
  B_CMDN = 0.05;
  K_CMDN = 0.00238;
  g_SRl = 5.2e-6;
end

model niederer_smith_2007__Ca_conductances(g_D, J_R, J_L)

  // Variable initializations:
  g_D = 6.5e-11;
  J_R = 2e-11;
  J_L = 9.13e-13;
end

model niederer_smith_2007__Ca_voltage(delta, expmdV, expVL, V, dV)

  // Assignment Rules:
  expmdV := exp(-(dV));
  expVL := exp((V - V_L0) / delta_VL);
  dV := delta * V;

  // Variable initializations:
  delta = 0.075;
  V_L0 = -2;
  delta_VL = 7;
end

model niederer_smith_2007__C_ij(C_cc, C_oc, C_co, C_oo, g_D, J_R, J_L, Ca_i, Ca_SR, dV, expmdV, Ca_e)

  // Assignment Rules:
  C_cc := Ca_i;
  C_oc := piecewise( (Ca_i + J_L / g_D * Ca_e * dV * expmdV / (1 - expmdV)) / (1 + J_L / g_D * dV / (1 - expmdV)) , abs(dV) > 0.000000001 , (Ca_i + J_L / g_D * Ca_e) / (1 + J_L / g_D) );
  C_co := (Ca_i + J_R / g_D * Ca_SR) / (1 + J_R / g_D);
  C_oo := piecewise( (Ca_i + J_R / g_D * Ca_SR + J_L / g_D * Ca_e * dV * expmdV / (1 - expmdV)) / (1 + J_R / g_D + J_L / g_D * dV / (1 - expmdV)) , abs(dV) > 0.000000001 , (Ca_i + J_R / g_D * Ca_SR + J_L / g_D * Ca_e) / (1 + J_R / g_D + J_L / g_D) );
end

model niederer_smith_2007__J_ij(J_Loo, J_Loc, J_Rco, J_Roo, g_D, J_R, J_L, Ca_i, Ca_SR, dV, expmdV, Ca_e)

  // Assignment Rules:
  J_Loo := piecewise( J_L * dV / (1 - expmdV) * (Ca_e * expmdV - Ca_i + J_R / g_D * (Ca_e * expmdV - Ca_SR)) / (1 + J_R / g_D + J_L / g_D * dV / (1 - expmdV)) , abs(dV) > 0.00001 , J_L * 0.00001 / (1 - exp(-(0.00001 ))) * (Ca_e * exp(-(0.00001 )) - Ca_i + J_R / g_D * (Ca_e * exp(-(0.00001 )) - Ca_SR)) / (1 + J_R / g_D + J_L / g_D * 0.00001 / (1 - exp(-(0.00001 )))) );
  J_Loc := piecewise( J_L * dV / (1 - expmdV) * (Ca_e * expmdV - Ca_i) / (1 + J_L / g_D * dV / (1 - expmdV)) , abs(dV) > 0.00001 , J_L * 0.00001 / (1 - exp(-(0.00001 ))) * (Ca_e * exp(-(0.00001 )) - Ca_i) / (1 + J_L / g_D * 0.00001 / (1 - exp(-(0.00001 )))) );
  J_Rco := J_R * (Ca_SR - Ca_i) / (1 + J_R / g_D);
  J_Roo := piecewise( J_R * (Ca_SR - Ca_i + J_L / g_D * dV / (1 - expmdV) * (Ca_SR - Ca_e * expmdV)) / (1 + J_R / g_D + J_L / g_D * dV / (1 - expmdV)) , abs(dV) > 0.00001 , J_R * (Ca_SR - Ca_i + J_L / g_D * 0.00001 / (1 - exp(-(0.00001 ))) * (Ca_SR - Ca_e * exp(-(0.00001 )))) / (1 + J_R / g_D + J_L / g_D * 0.00001 / (1 - exp(-(0.00001 )))) );
end

model niederer_smith_2007__Ca_tau(t_R, t_L)

  // Assignment Rules:
  t_R := 1.17 * t_L;

  // Variable initializations:
  t_L = 1;
end

model niederer_smith_2007__epsilon(epsilon_m, epsilon_pco, epsilon_pcc, C_co, Ca_i, expVL, t_L)

  // Assignment Rules:
  epsilon_m := 1 / tau_L * b * (expVL + a) / (b * expVL + a);
  epsilon_pco := 1 / tau_L * C_co / K_L * (expVL + a) / (expVL + 1 );
  epsilon_pcc := 1 / tau_L * Ca_i / K_L * (expVL + a) / (expVL + 1 );

  // Variable initializations:
  a = 0.0625;
  b = 14;
  tau_L = 650;
  K_L = 0.00022;
end

model niederer_smith_2007__alpha(alpha_p, alpha_m, expVL, t_L)

  // Assignment Rules:
  alpha_p := expVL / (t_L * (expVL + 1 ));
  alpha_m := phi_L / t_L;

  // Variable initializations:
  phi_L = 2.35;
end

model niederer_smith_2007__RyR_param(phi_R, tau_R, theta_R, K_RyR, ExtensionRatio, NO_on)

  // Assignment Rules:
  phi_R := phi_R_base * gamma_NO;
  gamma_NO := piecewise( 1 + 22.41 * (ExtensionRatio - 1 ) , NO_on == 1 , 1 );

  // Variable initializations:
  phi_R_base = 0.05;
  tau_R = 2.43;
  theta_R = 0.012;
  K_RyR = 0.041;
end

model niederer_smith_2007__beta(beta_poc, beta_pcc, beta_m, K_RyR, phi_R, tau_R, theta_R, t_R, C_oc, Ca_i)

  // Assignment Rules:
  beta_poc := 1 / t_R * power(C_oc, 2 ) / (power(C_oc, 2 ) + power(K_RyR, 2 ));
  beta_pcc := 1 / t_R * power(Ca_i, 2 ) / (power(Ca_i, 2 ) + power(K_RyR, 2 ));
  beta_m := phi_R / t_R;
end

model niederer_smith_2007__mu_ij(mu_poc, mu_pcc, mu_moc, mu_mcc, phi_R, tau_R, C_oc, Ca_i, K_RyR, theta_R)

  // Assignment Rules:
  mu_poc := 1 / tau_R * (power(C_oc, 2 ) + c * power(K_RyR, 2 )) / (power(C_oc, 2 ) + power(K_RyR, 2 ));
  mu_pcc := 1 / tau_R * (power(Ca_i, 2 ) + c * power(K_RyR, 2 )) / (power(Ca_i, 2 ) + power(K_RyR, 2 ));
  mu_moc := theta_R / tau_R * d * (power(C_oc, 2 ) + c * power(K_RyR, 2 )) / (d * power(C_oc, 2 ) + c * power(K_RyR, 2 ));
  mu_mcc := theta_R / tau_R * d * (power(Ca_i, 2 ) + c * power(K_RyR, 2 )) / (d * power(Ca_i, 2 ) + c * power(K_RyR, 2 ));

  // Variable initializations:
  c = 0.01;
  d = 100;
end

model niederer_smith_2007__y_ij(y_oc, y_co, y_oo, y_cc, alpha_p, alpha_m, beta_pcc, beta_poc, beta_m)

  // Assignment Rules:
  y_oc := alpha_p * beta_m * (alpha_p + alpha_m + beta_m + beta_pcc) / denom;
  y_co := alpha_m * (beta_pcc * (alpha_m + beta_m + beta_poc) + beta_poc * alpha_p) / denom;
  y_oo := alpha_p * (beta_poc * (alpha_p + beta_m + beta_pcc) + beta_pcc * alpha_m) / denom;
  y_cc := alpha_m * beta_m * (alpha_m + alpha_p + beta_m + beta_poc) / denom;
  denom := (alpha_p + alpha_m) * ((beta_m + beta_poc + alpha_m) * (beta_m + beta_pcc) + alpha_p * (beta_m + beta_poc));
end

model niederer_smith_2007__r_i(r_1, r_2, r_3, r_4, r_5, r_6, r_7, r_8, y_oc, y_cc, y_co, mu_poc, mu_pcc, mu_moc, mu_mcc, alpha_p, alpha_m, beta_pcc, beta_m, epsilon_m, epsilon_pco, epsilon_pcc)

  // Assignment Rules:
  r_1 := y_oc * mu_poc + y_cc * mu_pcc;
  r_2 := (alpha_p * mu_moc + alpha_m * mu_mcc) / (alpha_p + alpha_m);
  r_3 := beta_m * mu_pcc / (beta_m + beta_pcc);
  r_4 := mu_mcc;
  r_5 := y_co * epsilon_pco + y_cc * epsilon_pcc;
  r_6 := epsilon_m;
  r_7 := alpha_m * epsilon_pcc / (alpha_p + alpha_m);
  r_8 := epsilon_m;
end

model niederer_smith_2007__z_i(z_1, z_2, z_3, z_4, r_1, r_2, r_3, r_4, r_5, r_6, r_7, r_8, time_)

  // Assignment Rules:
  z_4 := 1 - z_1 - z_2 - z_3;

  // Rate Rules:
  z_1' = -((r_1 + r_5)) * z_1 + r_2 * z_2 + r_6 * z_3;
  z_2' = r_1 * z_1 - (r_2 + r_7) * z_2 + r_8 * z_4;
  z_3' = r_5 * z_1 - (r_6 + r_3) * z_3 + r_4 * z_4;

  // Variable initializations:
  z_1 = 0.988955429362334;
  z_2 = 0.00860686643357905;
  z_3 = 0.00241692704700704;
end

model niederer_smith_2007__J_values(J_R1, J_R3, J_L1, J_L2, J_Roo, J_Rco, J_Loo, J_Loc, y_oo, y_co, y_oc, alpha_p, alpha_m, beta_pcc, beta_m)

  // Assignment Rules:
  J_R1 := y_oo * J_Roo + J_Rco * y_co;
  J_R3 := J_Rco * beta_pcc / (beta_m + beta_pcc);
  J_L1 := J_Loo * y_oo + J_Loc * y_oc;
  J_L2 := J_Loc * alpha_p / (alpha_p + alpha_m);
end

model niederer_smith_2007__L_flux(J_LC, z_1, z_2, V_myo, N, J_L1, J_L2)

  // Assignment Rules:
  J_LC := (z_1 * J_L1 + z_2 * J_L2) * N / V_myo;
end

model niederer_smith_2007__R_flux(J_RY, z_1, z_3, V_myo, N, J_R1, J_R3)

  // Assignment Rules:
  J_RY := (z_1 * J_R1 + z_3 * J_R3) * N / V_myo;
end

model niederer_smith_2007__troponin(J_TPRN, B_TRPN, TRPN, Ca_i, k_on, k_off, gamma_trpn, TRPN_tot, Tension, T_ref)

  // Assignment Rules:
  J_TPRN := (B_TRPN - TRPN) * betaCab - Ca_i * TRPN * k_on;
  betaCab := piecewise( k_off * (1 - Tension / (gamma_trpn * T_ref)) , 1 - Tension / (gamma_trpn * T_ref) > 0.1 , k_off * 0.1 );

  // Variable initializations:
  B_TRPN = 0.07;
  k_on = 100;
  k_off = 0.2;
  gamma_trpn = 2;
  TRPN_tot = 0.07;
end

model niederer_smith_2007__Myofilaments(time_, lamda, ExtensionRatio, dExtensionRatiodt, lambda_prev)

  // Assignment Rules:
  lamda := piecewise( ExtensionRatio , ( ExtensionRatio > 0.8) && (ExtensionRatio <= 1.15 ), 1.15 , ExtensionRatio > 1.15 , 0.8 );
  dExtensionRatiodt := 0;
  lambda_prev := ExtensionRatio;

  // Variable initializations:
  ExtensionRatio = 1;
end

model niederer_smith_2007__thinfilaments()
end

model niederer_smith_2007__tropomyosin(z, z_max, time_, k_on, k_off, gamma_trpn, TRPN_tot, beta_0, Ca_b, lamda)

  // Assignment Rules:
  z_max := (alpha_0 / power(Ca_TRPN_50 / TRPN_tot, n_Hill) - K_2) / (alpha_r1 + K_1 + alpha_0 / power(Ca_TRPN_50 / TRPN_tot, n_Hill));
  Ca_50 := Ca_50ref * (1 + beta_1 * (lamda - 1 ));
  Ca_TRPN_50 := Ca_50 * TRPN_tot / (Ca_50 + k_off / k_on * (1 - (1 + beta_0 * (lamda - 1 )) * 0.5 / gamma_trpn));
  K_2 := alpha_r2 * power(z_p, n_Rel) / (power(z_p, n_Rel) + power(K_z, n_Rel)) * (1 - n_Rel * power(K_z, n_Rel) / (power(z_p, n_Rel) + power(K_z, n_Rel)));
  K_1 := alpha_r2 * power(z_p, n_Rel - 1 ) * n_Rel * power(K_z, n_Rel) / power(power(z_p, n_Rel) + power(K_z, n_Rel), 2 );
  alpha_Tm := alpha_0 * power(Ca_b / Ca_TRPN_50, n_Hill);
  beta_Tm := alpha_r1 + alpha_r2 * power(z, n_Rel - 1 ) / (power(z, n_Rel) + power(K_z, n_Rel));

  // Rate Rules:
  z' = alpha_Tm * (1 - z) - beta_Tm * z;

  // Variable initializations:
  z = 0.0175189833295748;
  alpha_0 = 0.008;
  alpha_r1 = 0.002;
  alpha_r2 = 0.00175;
  n_Rel = 3;
  K_z = 0.15;
  n_Hill = 3;
  Ca_50ref = 0.00105;
  z_p = 0.85;
  beta_1 = -4;
end

model niederer_smith_2007__filament_overlap(lamda, overlap, beta_0)

  // Assignment Rules:
  overlap := 1 + beta_0 * (lamda - 1 );

  // Variable initializations:
  beta_0 = 4.9;
end

model niederer_smith_2007__length_independent_tension(T_ref, T_Base, z, z_max)

  // Assignment Rules:
  T_Base := T_ref * z / z_max;

  // Variable initializations:
  T_ref = 56.2;
end

model niederer_smith_2007__isometric_tension(T_0, T_Base, overlap)

  // Assignment Rules:
  T_0 := T_Base * overlap;
end

model niederer_smith_2007__Cross_Bridges(time_, dExtensionRatiodt, T_0, Tension)

  // Assignment Rules:
  Q := Q_1 + Q_2 + Q_3;
  Tension := piecewise( T_0 * (a * Q + 1 ) / (1 - Q) , Q < 0 , T_0 * (1 + (a + 2 ) * Q) / (1 + Q) );

  // Rate Rules:
  Q_1' = A_1 * dExtensionRatiodt - alpha_1 * Q_1;
  Q_2' = A_2 * dExtensionRatiodt - alpha_2 * Q_2;
  Q_3' = A_3 * dExtensionRatiodt - alpha_3 * Q_3;

  // Variable initializations:
  a = 0.35;
  Q_1 = 0;
  Q_2 = 0;
  Q_3 = 0;
  A_1 = -29;
  A_2 = 138;
  A_3 = 129;
  alpha_1 = 0.03;
  alpha_2 = 0.13;
  alpha_3 = 0.625;
end

model niederer_smith_2007__Calcium_Handling()
end

model niederer_smith_2007__Calcium_membrane()
end

model niederer_smith_2007__pH_regulation()
end

model niederer_smith_2007____main()

  // Sub-modules, and any changes to those submodules:
  strain_control: niederer_smith_2007__strain_control(NO_on, pH_on, SAC_on);
  environment: niederer_smith_2007__environment(time_);
  cell_geom: niederer_smith_2007__cell_geom(V_myo, V_SR, N, A_cap, rho);
  membrane: niederer_smith_2007__membrane(V, R, T, F, time_, i_Na, i_t, i_ss, i_f, i_K1, i_NaK, i_Stim, I_CaL, I_NaCa, I_Cab, I_pCa, i_B_Na, i_B_K, I_SAC_Na, I_SAC_K, I_Ko, A_cap, I_Cl, I_H);
  I_stimulus: niederer_smith_2007__I_stimulus(i_Stim, time_, A_cap);
  SAC_current: niederer_smith_2007__SAC_current(V, E_Na, E_K, ExtensionRatio, I_SAC_Na, I_SAC_K, I_SAC, A_cap, SAC_on);
  KSA_current: niederer_smith_2007__KSA_current(V, E_K, ExtensionRatio, A_cap, I_Ko, SAC_on);
  sodium_current: niederer_smith_2007__sodium_current(i_Na, E_Na, Na_i, Na_o, R, F, T, time_, V, m, h, j, A_cap);
  Ca_independent_transient_outward_K_current: niederer_smith_2007__Ca_independent_transient_outward_K_current(i_t, E_K, time_, V, R, F, T, K_o, K_i, r, s, s_slow, A_cap);
  steady_state_outward_K_current: niederer_smith_2007__steady_state_outward_K_current(i_ss, time_, V, E_K, r_ss, s_ss, A_cap);
  inward_rectifier: niederer_smith_2007__inward_rectifier(i_K1, time_, V, R, F, T, K_o, K_i, E_K, A_cap);
  hyperpolarisation_activated_current: niederer_smith_2007__hyperpolarisation_activated_current(i_f, i_f_Na, i_f_K, time_, V, E_K, E_Na, y, A_cap);
  background_currents: niederer_smith_2007__background_currents(i_B_Na, i_B_K, E_Na, E_K, R, T, F, time_, V, A_cap);
  sodium_potassium_pump: niederer_smith_2007__sodium_potassium_pump(i_NaK, K_o, Na_o, Na_i, R, F, T, V, time_, A_cap);
  J_CO2: niederer_smith_2007__J_CO2(jco2, CO2i, CO2e, rho, V_myo);
  comp_v_nhe_exchanger: niederer_smith_2007__comp_v_nhe_exchanger(ExtensionRatio, pH_i, pH_e, Na_o, Na_i, V_myo, v_nhe, pH_on);
  comp_v_che_exchanger: niederer_smith_2007__comp_v_che_exchanger(pH_i, pH_e, Cle, Cli, V_myo, v_che);
  comp_v_nbc: niederer_smith_2007__comp_v_nbc(pH_i, pH_e, HCO3e, HCO3i, Na_o, Na_i, V_myo, v_nbc);
  comp_v_ae: niederer_smith_2007__comp_v_ae(ExtensionRatio, pH_i, pH_e, Cle, Cli, HCO3e, HCO3i, V_myo, v_ae, pH_on);
  intracellular_ion_concentrations: niederer_smith_2007__intracellular_ion_concentrations(I_Ko, Na_i, K_i, V_myo, time_, F, i_Na, i_B_Na, I_NaCa, i_NaK, i_f_Na, i_f_K, i_B_K, i_K1, i_t, i_ss, A_cap, I_SAC_Na, I_SAC_K, HCO3i, HCO3e, CO2i, CO2e, jco2, V_SR, v_ae, v_nbc, v_nhe, v_che, pH_i, pH_e, Cli, Cle, I_Cl, V, R, T, I_H, i_Stim);
  standard_ionic_concentrations: niederer_smith_2007__standard_ionic_concentrations(Na_o, Ca_e, K_o);
  SL_pump: niederer_smith_2007__SL_pump(Ca_i, I_pCa, V_myo, F, A_cap);
  Cab: niederer_smith_2007__Cab(V_myo, F, V, Ca_i, Ca_e, delta, E_Ca, I_Cab, A_cap);
  I_Ca_L: niederer_smith_2007__I_Ca_L(J_LC, V_myo, F, I_CaL, A_cap);
  NCX: niederer_smith_2007__NCX(V_myo, F, delta, Na_i, Na_o, Ca_i, Ca_e, I_NaCa, V, A_cap);
  SERCA: niederer_smith_2007__SERCA(I_SERCA, Ca_i);
  ionic_concentrations: niederer_smith_2007__ionic_concentrations(Ca_i, Ca_SR, TRPN, J_TPRN, I_NaCa, I_Cab, I_pCa, V_myo, V_SR, time_, J_RY, I_CaL, I_SERCA, F, A_cap, Ca_b, B_TRPN);
  Ca_conductances: niederer_smith_2007__Ca_conductances(g_D, J_R, J_L);
  Ca_voltage: niederer_smith_2007__Ca_voltage(delta, expmdV, expVL, V, dV);
  C_ij: niederer_smith_2007__C_ij(C_cc, C_oc, C_co, C_oo, g_D, J_R, J_L, Ca_i, Ca_SR, dV, expmdV, Ca_e);
  J_ij: niederer_smith_2007__J_ij(J_Loo, J_Loc, J_Rco, J_Roo, g_D, J_R, J_L, Ca_i, Ca_SR, dV, expmdV, Ca_e);
  Ca_tau: niederer_smith_2007__Ca_tau(t_R, t_L);
  epsilon: niederer_smith_2007__epsilon(epsilon_m, epsilon_pco, epsilon_pcc, C_co, Ca_i, expVL, t_L);
  alpha: niederer_smith_2007__alpha(alpha_p, alpha_m, expVL, t_L);
  RyR_param: niederer_smith_2007__RyR_param(phi_R, tau_R, theta_R, K_RyR, ExtensionRatio, NO_on);
  beta: niederer_smith_2007__beta(beta_poc, beta_pcc, beta_m, K_RyR, phi_R, tau_R, theta_R, t_R, C_oc, Ca_i);
  mu_ij: niederer_smith_2007__mu_ij(mu_poc, mu_pcc, mu_moc, mu_mcc, phi_R, tau_R, C_oc, Ca_i, K_RyR, theta_R);
  y_ij: niederer_smith_2007__y_ij(y_oc, y_co, y_oo, y_cc, alpha_p, alpha_m, beta_pcc, beta_poc, beta_m);
  r_i: niederer_smith_2007__r_i(r_1, r_2, r_3, r_4, r_5, r_6, r_7, r_8, y_oc, y_cc, y_co, mu_poc, mu_pcc, mu_moc, mu_mcc, alpha_p, alpha_m, beta_pcc, beta_m, epsilon_m, epsilon_pco, epsilon_pcc);
  z_i: niederer_smith_2007__z_i(z_1, z_2, z_3, z_4, r_1, r_2, r_3, r_4, r_5, r_6, r_7, r_8, time_);
  J_values: niederer_smith_2007__J_values(J_R1, J_R3, J_L1, J_L2, J_Roo, J_Rco, J_Loo, J_Loc, y_oo, y_co, y_oc, alpha_p, alpha_m, beta_pcc, beta_m);
  L_flux: niederer_smith_2007__L_flux(J_LC, z_1, z_2, V_myo, N, J_L1, J_L2);
  R_flux: niederer_smith_2007__R_flux(J_RY, z_1, z_3, V_myo, N, J_R1, J_R3);
  troponin: niederer_smith_2007__troponin(J_TPRN, B_TRPN, TRPN, Ca_i, k_on, k_off, gamma_trpn, TRPN_tot, Tension, T_ref);
  Myofilaments: niederer_smith_2007__Myofilaments(time_, lamda, ExtensionRatio, dExtensionRatiodt, lambda_prev);
  thinfilaments: niederer_smith_2007__thinfilaments();
  tropomyosin: niederer_smith_2007__tropomyosin(z, z_max, time_, k_on, k_off, gamma_trpn, TRPN_tot, beta_0, Ca_b, lamda);
  filament_overlap: niederer_smith_2007__filament_overlap(lamda, overlap, beta_0);
  length_independent_tension: niederer_smith_2007__length_independent_tension(T_ref, T_Base, z, z_max);
  isometric_tension: niederer_smith_2007__isometric_tension(T_0, T_Base, overlap);
  Cross_Bridges: niederer_smith_2007__Cross_Bridges(time_, dExtensionRatiodt, T_0, Tension);
  Calcium_Handling: niederer_smith_2007__Calcium_Handling();
  Calcium_membrane: niederer_smith_2007__Calcium_membrane();
  pH_regulation: niederer_smith_2007__pH_regulation();
end
