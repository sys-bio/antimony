//Created by libAntimony v1.3
model cellmlmod_environment()

  //Other declarations:
  var time;
end

model cellmlmod_membrane()

  // Rate Rules:
  V' = -((i_CaL + i_pCa + i_NaCa + i_Cab + i_Na + i_Nab + i_NaK + i_Kto_f + i_Kto_s + i_K1 + i_Ks + i_Kur + i_Kss + i_Kr + i_ClCa + i_stim))

  // Variable initializations:
  V = -82.4202;
  Cm = 1;
  Vmyo = 25.84e-6;
  VJSR = 0.12e-6;
  VNSR = 2.098e-6;
  Vss = 1.485e-9;
  Acap = 1.534e-4;
  Ko = 5400;
  Nao = 140000;
  Cao = 1800;
  R = 8.314;
  T = 298;
  F = 96.5;
  stim_start = 20;
  stim_end = 100000;
  stim_period = 71.43;
  stim_duration = 0.5;
  stim_amplitude = -80;

  //Other declarations:
  var V, Cm, Vmyo, VJSR, VNSR, Vss, Acap, Ko, Nao, Cao, R, T, F, i_stim, time;
  var i_CaL, i_pCa, i_NaCa, i_Cab, i_Na, i_Nab, i_NaK, i_Kto_f, i_Kto_s, i_K1;
  var i_Ks, i_Kur, i_Kss, i_ClCa, i_Kr, stim_start, stim_end, stim_period;
  var stim_duration, stim_amplitude;
end

model cellmlmod_calcium_concentration()

  // Assignment Rules:
  Bi := power(1  + CMDN_tot * Km_CMDN / power(Km_CMDN + Cai, 2 ), -(1 ))
  Bss := power(1  + CMDN_tot * Km_CMDN / power(Km_CMDN + Cass, 2 ), -(1 ))
  BJSR := power(1  + CSQN_tot * Km_CSQN / power(Km_CSQN + CaJSR, 2 ), -(1 ))

  // Rate Rules:
  Cai' = Bi * (J_leak + J_xfer - (J_up + J_trpn + (i_Cab + i_pCa - 2  * i_NaCa) * Acap * Cm / (2  * Vmyo * F)))
  Cass' = Bss * (J_rel * VJSR / Vss - (J_xfer * Vmyo / Vss + i_CaL * Acap * Cm / (2  * Vss * F)))
  CaJSR' = BJSR * (J_tr - J_rel)
  CaNSR' = (J_up - J_leak) * Vmyo / VNSR - J_tr * VJSR / VNSR

  // Variable initializations:
  Cai = 0.115001;
  Cass = 0.115001;
  CaJSR = 1299.5;
  CaNSR = 1299.5;
  CMDN_tot = 50;
  CSQN_tot = 15000;
  Km_CMDN = 0.238;
  Km_CSQN = 800;

  //Other declarations:
  var Cai, Cass, CaJSR, CaNSR, Bi, Bss, BJSR, CMDN_tot, CSQN_tot, Km_CMDN;
  var Km_CSQN, Acap, Vmyo, VJSR, Vss, VNSR, V, Cm, time, F, i_Cab, i_CaL;
  var i_NaCa, i_pCa, J_leak, J_rel, J_up, J_tr, J_trpn, J_xfer;
end

model cellmlmod_calcium_fluxes()

  // Assignment Rules:
  J_leak := v2 * (CaNSR - Cai)
  J_rel := v1 * (P_O1 + P_O2) * (CaJSR - Cass) * P_RyR
  J_up := v3 * power(Cai, 2 ) / (power(Km_up, 2 ) + power(Cai, 2 ))
  J_tr := (CaNSR - CaJSR) / tau_tr
  J_trpn := k_plus_htrpn * Cai * (HTRPN_tot - HTRPN_Ca) + k_plus_ltrpn * Cai * (LTRPN_tot - LTRPN_Ca) - (k_minus_htrpn * HTRPN_Ca + k_minus_ltrpn * LTRPN_Ca)
  J_xfer := (Cass - Cai) / tau_xfer

  // Rate Rules:
  P_RyR' = -(0.04 ) * P_RyR - 0.1  * i_CaL / i_CaL_max * exp(-(power(V - 5 , 2 )) / 648 )

  // Variable initializations:
  k_plus_htrpn = 0.00237;
  k_minus_htrpn = 3.2e-5;
  k_plus_ltrpn = 0.0327;
  k_minus_ltrpn = 0.0196;
  P_RyR = 0;
  v1 = 4.5;
  tau_tr = 20;
  v2 = 1.74e-5;
  tau_xfer = 8;
  v3 = 0.45;
  Km_up = 0.5;

  //Other declarations:
  var J_leak, J_rel, J_up, J_tr, J_trpn, J_xfer, k_plus_htrpn, k_minus_htrpn;
  var k_plus_ltrpn, k_minus_ltrpn, P_RyR, v1, tau_tr, v2, tau_xfer, v3, Km_up;
  var LTRPN_tot, HTRPN_tot, LTRPN_Ca, HTRPN_Ca, V, time, i_CaL_max, i_CaL;
  var Cai, Cass, CaJSR, CaNSR, P_O1, P_O2;
end

model cellmlmod_calcium_buffering()

  // Rate Rules:
  LTRPN_Ca' = k_plus_ltrpn * Cai * (LTRPN_tot - LTRPN_Ca) - k_minus_ltrpn * LTRPN_Ca
  HTRPN_Ca' = k_plus_htrpn * Cai * (HTRPN_tot - HTRPN_Ca) - k_minus_htrpn * HTRPN_Ca

  // Variable initializations:
  LTRPN_tot = 70;
  HTRPN_tot = 140;
  LTRPN_Ca = 11.2684;
  HTRPN_Ca = 125.29;

  //Other declarations:
  var LTRPN_tot, HTRPN_tot, LTRPN_Ca, HTRPN_Ca, time, Cai, k_plus_htrpn, k_minus_htrpn;
  var k_plus_ltrpn, k_minus_ltrpn;
end

model cellmlmod_ryanodine_receptors()

  // Assignment Rules:
  P_C1 := 1  - (P_C2 + P_O1 + P_O2)

  // Rate Rules:
  P_O1' = k_plus_a * power(Cass, n) * P_C1 + k_minus_b * P_O2 + k_minus_c * P_C2 - (k_minus_a * P_O1 + k_plus_b * power(Cass, m) * P_O1 + k_plus_c * P_O1)
  P_O2' = k_plus_b * power(Cass, m) * P_O1 - k_minus_b * P_O2
  P_C2' = k_plus_c * P_O1 - k_minus_c * P_C2

  // Variable initializations:
  P_O1 = 0.149102e-4;
  P_O2 = 0.951726e-10;
  P_C2 = 0.16774e-3;
  k_plus_a = 0.006075;
  k_minus_a = 0.07125;
  k_plus_b = 0.00405;
  k_minus_b = 0.965;
  k_plus_c = 0.009;
  k_minus_c = 0.0008;
  m = 3;
  n = 4;

  //Other declarations:
  var P_O1, P_O2, P_C1, P_C2, k_plus_a, k_minus_a, k_plus_b, k_minus_b, k_plus_c;
  var k_minus_c, m, n, time, Cass;
end

model cellmlmod_L_type_calcium_current()

  // Assignment Rules:
  i_CaL := g_CaL * O * (V - E_CaL)
  C1 := 1  - (O + C2 + C3 + C4 + I1 + I2 + I3)
  alpha := 0.4  * exp((V + 12 ) / 10 ) * (1  + 0.7  * exp(-(power(V + 40 , 2 )) / 10 ) - 0.75  * exp(-(power(V + 20 , 2 )) / 400 )) / (1  + 0.12  * exp((V + 12 ) / 10 ))
  beta := 0.05  * exp(-((V + 12 )) / 13 )
  gamma := Kpc_max * Cass / (Kpc_half + Cass)
  Kpcf := 13  * (1  - exp(-(power(V + 14.5 , 2 )) / 100 ))

  // Rate Rules:
  O' = alpha * C4 + Kpcb * I1 + 0.001  * (alpha * I2 - Kpcf * O) - (4  * beta * O + gamma * O)
  C2' = 4  * alpha * C1 + 2  * beta * C3 - (beta * C2 + 3  * alpha * C2)
  C3' = 3  * alpha * C2 + 3  * beta * C4 - (2  * beta * C3 + 2  * alpha * C3)
  C4' = 2  * alpha * C3 + 4  * beta * O + 0.01  * (4  * Kpcb * beta * I1 - alpha * gamma * C4) + 0.002  * (4  * beta * I2 - Kpcf * C4) + 4  * beta * Kpcb * I3 - (3  * beta * C4 + alpha * C4 + 1  * gamma * Kpcf * C4)
  I1' = gamma * O + 0.001  * (alpha * I3 - Kpcf * I1) + 0.01  * (alpha * gamma * C4 - 4  * beta * Kpcf * I1) - Kpcb * I1
  I2' = 0.001  * (Kpcf * O - alpha * I2) + Kpcb * I3 + 0.002  * (Kpcf * C4 - 4  * beta * I2) - gamma * I2
  I3' = 0.001  * (Kpcf * I1 - alpha * I3) + gamma * I2 + 1  * gamma * Kpcf * C4 - (4  * beta * Kpcb * I3 + Kpcb * I3)

  // Variable initializations:
  i_CaL_max = 7;
  E_CaL = 63;
  g_CaL = 0.1729;
  O = 0.930308e-18;
  C2 = 0.124216e-3;
  C3 = 0.578679e-8;
  C4 = 0.119816e-12;
  I1 = 0.497923e-18;
  I2 = 0.345847e-13;
  I3 = 0.185106e-13;
  Kpcb = 0.0005;
  Kpc_max = 0.23324;
  Kpc_half = 20;

  //Other declarations:
  var i_CaL, i_CaL_max, E_CaL, g_CaL, O, C1, C2, C3, C4, I1, I2, I3, alpha;
  var beta, gamma, Kpcf, Kpcb, Kpc_max, Kpc_half, time, V, Cass;
end

model cellmlmod_calcium_pump_current()

  // Assignment Rules:
  i_pCa := i_pCa_max * power(Cai, 2 ) / (power(Km_pCa, 2 ) + power(Cai, 2 ))

  // Variable initializations:
  i_pCa_max = 1;
  Km_pCa = 0.5;

  //Other declarations:
  var i_pCa, i_pCa_max, Km_pCa, Cai;
end

model cellmlmod_sodium_calcium_exchange_current()

  // Assignment Rules:
  i_NaCa := k_NaCa * 1  / (power(K_mNa, 3 ) + power(Nao, 3 )) * 1  / (K_mCa + Cao) * 1  / (1  + k_sat * exp((eta - 1 ) * V * F / (R * T))) * (exp(eta * V * F / (R * T)) * power(Nai, 3 ) * Cao - exp((eta - 1 ) * V * F / (R * T)) * power(Nao, 3 ) * Cai)

  // Variable initializations:
  k_NaCa = 292.8;
  K_mNa = 87500;
  K_mCa = 1380;
  k_sat = 0.1;
  eta = 0.35;

  //Other declarations:
  var i_NaCa, k_NaCa, K_mNa, K_mCa, k_sat, eta, V, R, T, F, Nai, Nao, Cai;
  var Cao;
end

model cellmlmod_calcium_background_current()

  // Assignment Rules:
  i_Cab := g_Cab * (V - E_CaN)
  E_CaN := R * T / (2  * F) * ln(Cao / Cai)

  // Variable initializations:
  g_Cab = 0.000367;

  //Other declarations:
  var i_Cab, g_Cab, E_CaN, V, R, T, F, Cai, Cao;
end

model cellmlmod_sodium_concentration()

  // Rate Rules:
  Nai' = -((i_Na + i_Nab + 3  * i_NaK + 3  * i_NaCa)) * Acap * Cm / (Vmyo * F)

  // Variable initializations:
  Nai = 14237.1;

  //Other declarations:
  var Nai, time, F, Vmyo, Cm, Acap, i_Na, i_NaCa, i_NaK, i_Nab;
end

model cellmlmod_fast_sodium_current()

  // Assignment Rules:
  i_Na := g_Na * O_Na * (V - E_Na)
  E_Na := R * T / F * ln((0.9  * Nao + 0.1  * Ko) / (0.9  * Nai + 0.1  * Ki))
  C_Na3 := 1  - (O_Na + C_Na1 + C_Na2 + IF_Na + I1_Na + I2_Na + IC_Na2 + IC_Na3)
  alpha_Na11 := 3.802  / (0.1027  * exp(-((V + 2.5 )) / 17 ) + 0.2  * exp(-((V + 2.5 )) / 150 ))
  beta_Na11 := 0.1917  * exp(-((V + 2.5 )) / 20.3 )
  alpha_Na12 := 3.802  / (0.1027  * exp(-((V + 2.5 )) / 15 ) + 0.23  * exp(-((V + 2.5 )) / 150 ))
  beta_Na12 := 0.2  * exp(-((V - 2.5 )) / 20.3 )
  alpha_Na13 := 3.802  / (0.1027  * exp(-((V + 2.5 )) / 12 ) + 0.25  * exp(-((V + 2.5 )) / 150 ))
  beta_Na13 := 0.22  * exp(-((V - 7.5 )) / 20.3 )
  alpha_Na3 := 7E-7  * exp(-((V + 7 )) / 7.7 )
  beta_Na3 := 0.0084  + 0.00002  * (V + 7 )
  alpha_Na2 := 1  / (0.188495  * exp(-((V + 7 )) / 16.6 ) + 0.393956 )
  beta_Na2 := alpha_Na13 * alpha_Na2 * alpha_Na3 / (beta_Na13 * beta_Na3)
  alpha_Na4 := alpha_Na2 / 1000
  beta_Na4 := alpha_Na3
  alpha_Na5 := alpha_Na2 / 95000
  beta_Na5 := alpha_Na3 / 50

  // Rate Rules:
  O_Na' = alpha_Na13 * C_Na1 + beta_Na2 * IF_Na - (beta_Na13 * O_Na + alpha_Na2 * O_Na)
  C_Na1' = alpha_Na12 * C_Na2 + beta_Na13 * O_Na + alpha_Na3 * IF_Na - (beta_Na12 * C_Na1 + alpha_Na13 * C_Na1 + beta_Na3 * C_Na1)
  C_Na2' = alpha_Na11 * C_Na3 + beta_Na12 * C_Na1 + alpha_Na3 * IC_Na2 - (beta_Na11 * C_Na2 + alpha_Na12 * C_Na2 + beta_Na3 * C_Na2)
  I1_Na' = alpha_Na4 * IF_Na + beta_Na5 * I2_Na - (beta_Na4 * I1_Na + alpha_Na5 * I1_Na)
  I2_Na' = alpha_Na5 * I1_Na - beta_Na5 * I2_Na
  IF_Na' = alpha_Na2 * O_Na + beta_Na3 * C_Na1 + beta_Na4 * I1_Na + alpha_Na12 * IC_Na2 - (beta_Na2 * IF_Na + alpha_Na3 * IF_Na + alpha_Na4 * IF_Na + beta_Na12 * IF_Na)
  IC_Na2' = alpha_Na11 * IC_Na3 + beta_Na12 * IF_Na + beta_Na3 * IC_Na2 - (beta_Na11 * IC_Na2 + alpha_Na12 * IC_Na2 + alpha_Na3 * IC_Na2)
  IC_Na3' = beta_Na11 * IC_Na2 + beta_Na3 * C_Na3 - (alpha_Na11 * IC_Na3 + alpha_Na3 * IC_Na3)

  // Variable initializations:
  g_Na = 13;
  O_Na = 0.713483e-6;
  C_Na1 = 0.279132e-3;
  C_Na2 = 0.020752;
  I1_Na = 0.673345e-6;
  I2_Na = 0.155787e-8;
  IF_Na = 0.153176e-3;
  IC_Na2 = 0.0113879;
  IC_Na3 = 0.34278;

  //Other declarations:
  var i_Na, E_Na, g_Na, O_Na, C_Na1, C_Na2, C_Na3, I1_Na, I2_Na, IF_Na, IC_Na2;
  var IC_Na3, alpha_Na11, beta_Na11, alpha_Na12, beta_Na12, alpha_Na13, beta_Na13;
  var alpha_Na3, beta_Na3, alpha_Na2, beta_Na2, alpha_Na4, beta_Na4, alpha_Na5;
  var beta_Na5, time, V, R, T, F, Nao, Nai, Ko, Ki;
end

model cellmlmod_sodium_background_current()

  // Assignment Rules:
  i_Nab := g_Nab * (V - E_Na)

  // Variable initializations:
  g_Nab = 0.0026;

  //Other declarations:
  var i_Nab, g_Nab, E_Na, V;
end

model cellmlmod_potassium_concentration()

  // Rate Rules:
  Ki' = -((i_Kto_f + i_Kto_s + i_K1 + i_Ks + i_Kss + i_Kur + i_Kr - 2  * i_NaK)) * Acap * Cm / (Vmyo * F)

  // Variable initializations:
  Ki = 143720;

  //Other declarations:
  var Ki, time, F, Vmyo, Cm, Acap, i_Kto_f, i_Kto_s, i_K1, i_Ks, i_Kss, i_Kur;
  var i_Kr, i_NaK;
end

model cellmlmod_fast_transient_outward_potassium_current()

  // Assignment Rules:
  i_Kto_f := g_Kto_f * power(ato_f, 3 ) * ito_f * (V - E_K)
  E_K := R * T / F * ln(Ko / Ki)
  alpha_a := 0.18064  * exp(0.03577  * (V + 30 ))
  beta_a := 0.3956  * exp(-(0.06237 ) * (V + 30 ))
  alpha_i := 0.000152  * exp(-((V + 13.5 )) / 7 ) / (0.0067083  * exp(-((V + 33.5 )) / 7 ) + 1 )
  beta_i := 0.00095  * exp((V + 33.5 ) / 7 ) / (0.051335  * exp((V + 33.5 ) / 7 ) + 1 )

  // Rate Rules:
  ato_f' = alpha_a * (1  - ato_f) - beta_a * ato_f
  ito_f' = alpha_i * (1  - ito_f) - beta_i * ito_f

  // Variable initializations:
  g_Kto_f = 0.4067;
  ato_f = 0.265563e-2;
  ito_f = 0.999977;

  //Other declarations:
  var i_Kto_f, E_K, g_Kto_f, ato_f, ito_f, alpha_a, beta_a, alpha_i, beta_i;
  var V, R, T, F, Ki, Ko, time;
end

model cellmlmod_slow_transient_outward_potassium_current()

  // Assignment Rules:
  i_Kto_s := g_Kto_s * ato_s * ito_s * (V - E_K)
  ass := 1  / (1  + exp(-((V + 22.5 )) / 7.7 ))
  iss := 1  / (1  + exp((V + 45.2 ) / 5.7 ))
  tau_ta_s := 0.493  * exp(-(0.0629 ) * V) + 2.058
  tau_ti_s := 270  + 1050  / (1  + exp((V + 45.2 ) / 5.7 ))

  // Rate Rules:
  ato_s' = (ass - ato_s) / tau_ta_s
  ito_s' = (iss - ito_s) / tau_ti_s

  // Variable initializations:
  g_Kto_s = 0;
  ato_s = 0.417069e-3;
  ito_s = 0.998543;

  //Other declarations:
  var i_Kto_s, ass, iss, g_Kto_s, ato_s, ito_s, tau_ta_s, tau_ti_s, E_K, V;
  var time;
end

model cellmlmod_time_independent_potassium_current()

  // Assignment Rules:
  i_K1 := 0.2938  * Ko / (Ko + 210 ) * (V - E_K) / (1  + exp(0.0896  * (V - E_K)))

  //Other declarations:
  var i_K1, Ko, E_K, V, time;
end

model cellmlmod_slow_delayed_rectifier_potassium_current()

  // Assignment Rules:
  i_Ks := g_Ks * power(nKs, 2 ) * (V - E_K)
  alpha_n := 0.00000481333  * (V + 26.5 ) / (1  - exp(-(0.128 ) * (V + 26.5 )))
  beta_n := 0.0000953333  * exp(-(0.038 ) * (V + 26.5 ))

  // Rate Rules:
  nKs' = alpha_n * (1  - nKs) - beta_n * nKs

  // Variable initializations:
  g_Ks = 0.00575;
  nKs = 0.262753e-3;

  //Other declarations:
  var i_Ks, g_Ks, nKs, alpha_n, beta_n, E_K, V, time;
end

model cellmlmod_ultra_rapidly_activating_delayed_rectifier_potassium_current()

  // Assignment Rules:
  i_Kur := g_Kur * aur * iur * (V - E_K)
  tau_aur := 0.493  * exp(-(0.0629 ) * V) + 2.058
  tau_iur := 1200  - 170  / (1  + exp((V + 45.2 ) / 5.7 ))

  // Rate Rules:
  aur' = (ass - aur) / tau_aur
  iur' = (iss - iur) / tau_iur

  // Variable initializations:
  g_Kur = 0.16;
  aur = 0.417069e-3;
  iur = 0.998543;

  //Other declarations:
  var i_Kur, g_Kur, aur, iur, tau_aur, tau_iur, E_K, V, time, ass, iss;
end

model cellmlmod_non_inactivating_steady_state_potassium_current()

  // Assignment Rules:
  i_Kss := g_Kss * aKss * iKss * (V - E_K)
  tau_Kss := 39.3  * exp(-(0.0862 ) * V) + 13.17

  // Rate Rules:
  aKss' = (ass - aKss) / tau_Kss
  iKss' = 0

  // Variable initializations:
  g_Kss = 0.05;
  aKss = 0.417069e-3;
  iKss = 1;

  //Other declarations:
  var i_Kss, g_Kss, aKss, iKss, tau_Kss, E_K, V, time, ass;
end

model cellmlmod_rapid_delayed_rectifier_potassium_current()

  // Assignment Rules:
  i_Kr := g_Kr * O_K * (V - R * T / F * ln((0.98  * Ko + 0.02  * Nao) / (0.98  * Ki + 0.02  * Nai)))
  C_K0 := 1  - (C_K1 + C_K2 + O_K + I_K)
  alpha_a0 := 0.022348  * exp(0.01176  * V)
  beta_a0 := 0.047002  * exp(-(0.0631 ) * V)
  alpha_a1 := 0.013733  * exp(0.038198  * V)
  beta_a1 := 0.0000689  * exp(-(0.04178 ) * V)
  alpha_i := 0.090821  * exp(0.023391  * (V + 5 ))
  beta_i := 0.006497  * exp(-(0.03268 ) * (V + 5 ))

  // Rate Rules:
  O_K' = alpha_a1 * C_K2 + beta_i * I_K - (beta_a1 * O_K + alpha_i * O_K)
  C_K1' = alpha_a0 * C_K0 + kb * C_K2 - (beta_a0 * C_K1 + kf * C_K1)
  C_K2' = kf * C_K1 + beta_a1 * O_K - (kb * C_K2 + alpha_a1 * C_K2)
  I_K' = alpha_i * O_K - beta_i * I_K

  // Variable initializations:
  g_Kr = 0.078;
  O_K = 0.175298e-3;
  C_K1 = 0.992513e-3;
  C_K2 = 0.641229e-3;
  I_K = 0.319129e-4;
  kb = 0.036778;
  kf = 0.023761;

  //Other declarations:
  var i_Kr, g_Kr, O_K, C_K1, C_K2, C_K0, I_K, alpha_a0, beta_a0, kb, kf, alpha_a1;
  var beta_a1, alpha_i, beta_i, time, V, R, T, F, Nao, Nai, Ko, Ki;
end

model cellmlmod_sodium_potassium_pump_current()

  // Assignment Rules:
  i_NaK := i_NaK_max * f_NaK * 1  / (1  + power(Km_Nai / Nai, 1.5 )) * Ko / (Ko + Km_Ko)
  f_NaK := 1  / (1  + 0.1245  * exp(-(0.1 ) * V * F / (R * T)) + 0.0365  * sigma * exp(-(V) * F / (R * T)))
  sigma := 1  / 7  * (exp(Nao / 67300 ) - 1 )

  // Variable initializations:
  i_NaK_max = 0.88;
  Km_Nai = 21000;
  Km_Ko = 1500;

  //Other declarations:
  var i_NaK, i_NaK_max, Km_Nai, Km_Ko, f_NaK, sigma, V, R, T, F, Nai, Nao;
  var Ko;
end

model cellmlmod_calcium_activated_chloride_current()

  // Assignment Rules:
  i_ClCa := g_ClCa * O_ClCa * Cai / (Cai + Km_Cl) * (V - E_Cl)
  O_ClCa := 0.2  / (1  + exp(-((V - 46.7 )) / 7.8 ))

  // Variable initializations:
  g_ClCa = 10;
  E_Cl = -40;
  Km_Cl = 10;

  //Other declarations:
  var i_ClCa, g_ClCa, O_ClCa, E_Cl, Km_Cl, V, Cai;
end

model bondarenko_model_2004_apex()

  // Sub-modules, and any changes to those submodules:
  environment: cellmlmod_environment()
  membrane: cellmlmod_membrane()
  calcium_concentration: cellmlmod_calcium_concentration()
  calcium_fluxes: cellmlmod_calcium_fluxes()
  calcium_buffering: cellmlmod_calcium_buffering()
  ryanodine_receptors: cellmlmod_ryanodine_receptors()
  L_type_calcium_current: cellmlmod_L_type_calcium_current()
  calcium_pump_current: cellmlmod_calcium_pump_current()
  sodium_calcium_exchange_current: cellmlmod_sodium_calcium_exchange_current()
  calcium_background_current: cellmlmod_calcium_background_current()
  sodium_concentration: cellmlmod_sodium_concentration()
  fast_sodium_current: cellmlmod_fast_sodium_current()
  sodium_background_current: cellmlmod_sodium_background_current()
  potassium_concentration: cellmlmod_potassium_concentration()
  fast_transient_outward_potassium_current: cellmlmod_fast_transient_outward_potassium_current()
  slow_transient_outward_potassium_current: cellmlmod_slow_transient_outward_potassium_current()
  time_independent_potassium_current: cellmlmod_time_independent_potassium_current()
  slow_delayed_rectifier_potassium_current: cellmlmod_slow_delayed_rectifier_potassium_current()
  ultra_rapidly_activating_delayed_rectifier_potassium_current: cellmlmod_ultra_rapidly_activating_delayed_rectifier_potassium_current()
  non_inactivating_steady_state_potassium_current: cellmlmod_non_inactivating_steady_state_potassium_current()
  rapid_delayed_rectifier_potassium_current: cellmlmod_rapid_delayed_rectifier_potassium_current()
  sodium_potassium_pump_current: cellmlmod_sodium_potassium_pump_current()
  calcium_activated_chloride_current: cellmlmod_calcium_activated_chloride_current()
  membrane.time is environment.time;
  calcium_concentration.time is environment.time;
  calcium_fluxes.time is environment.time;
  calcium_buffering.time is environment.time;
  ryanodine_receptors.time is environment.time;
  L_type_calcium_current.time is environment.time;
  sodium_concentration.time is environment.time;
  fast_sodium_current.time is environment.time;
  potassium_concentration.time is environment.time;
  fast_transient_outward_potassium_current.time is environment.time;
  slow_transient_outward_potassium_current.time is environment.time;
  slow_delayed_rectifier_potassium_current.time is environment.time;
  time_independent_potassium_current.time is environment.time;
  ultra_rapidly_activating_delayed_rectifier_potassium_current.time is environment.time;
  non_inactivating_steady_state_potassium_current.time is environment.time;
  rapid_delayed_rectifier_potassium_current.time is environment.time;
  membrane.i_CaL is L_type_calcium_current.i_CaL;
  membrane.V is L_type_calcium_current.V;
  membrane.i_pCa is calcium_pump_current.i_pCa;
  membrane.i_NaCa is sodium_calcium_exchange_current.i_NaCa;
  L_type_calcium_current.V is sodium_calcium_exchange_current.V;
  membrane.R is sodium_calcium_exchange_current.R;
  membrane.T is sodium_calcium_exchange_current.T;
  membrane.F is sodium_calcium_exchange_current.F;
  membrane.Cao is sodium_calcium_exchange_current.Cao;
  membrane.Nao is sodium_calcium_exchange_current.Nao;
  membrane.i_Cab is calcium_background_current.i_Cab;
  sodium_calcium_exchange_current.V is calcium_background_current.V;
  sodium_calcium_exchange_current.R is calcium_background_current.R;
  sodium_calcium_exchange_current.T is calcium_background_current.T;
  sodium_calcium_exchange_current.F is calcium_background_current.F;
  sodium_calcium_exchange_current.Cao is calcium_background_current.Cao;
  membrane.i_Na is fast_sodium_current.i_Na;
  calcium_background_current.V is fast_sodium_current.V;
  calcium_background_current.R is fast_sodium_current.R;
  calcium_background_current.T is fast_sodium_current.T;
  calcium_background_current.F is fast_sodium_current.F;
  membrane.Ko is fast_sodium_current.Ko;
  sodium_calcium_exchange_current.Nao is fast_sodium_current.Nao;
  membrane.i_Nab is sodium_background_current.i_Nab;
  fast_sodium_current.V is sodium_background_current.V;
  membrane.i_NaK is sodium_potassium_pump_current.i_NaK;
  sodium_background_current.V is sodium_potassium_pump_current.V;
  fast_sodium_current.R is sodium_potassium_pump_current.R;
  fast_sodium_current.T is sodium_potassium_pump_current.T;
  fast_sodium_current.F is sodium_potassium_pump_current.F;
  fast_sodium_current.Ko is sodium_potassium_pump_current.Ko;
  fast_sodium_current.Nao is sodium_potassium_pump_current.Nao;
  membrane.i_Kto_f is fast_transient_outward_potassium_current.i_Kto_f;
  sodium_potassium_pump_current.V is fast_transient_outward_potassium_current.V;
  sodium_potassium_pump_current.R is fast_transient_outward_potassium_current.R;
  sodium_potassium_pump_current.T is fast_transient_outward_potassium_current.T;
  sodium_potassium_pump_current.F is fast_transient_outward_potassium_current.F;
  sodium_potassium_pump_current.Ko is fast_transient_outward_potassium_current.Ko;
  membrane.i_Kto_s is slow_transient_outward_potassium_current.i_Kto_s;
  fast_transient_outward_potassium_current.V is slow_transient_outward_potassium_current.V;
  membrane.i_K1 is time_independent_potassium_current.i_K1;
  slow_transient_outward_potassium_current.V is time_independent_potassium_current.V;
  fast_transient_outward_potassium_current.Ko is time_independent_potassium_current.Ko;
  membrane.i_Ks is slow_delayed_rectifier_potassium_current.i_Ks;
  time_independent_potassium_current.V is slow_delayed_rectifier_potassium_current.V;
  membrane.i_Kur is ultra_rapidly_activating_delayed_rectifier_potassium_current.i_Kur;
  slow_delayed_rectifier_potassium_current.V is ultra_rapidly_activating_delayed_rectifier_potassium_current.V;
  membrane.i_Kss is non_inactivating_steady_state_potassium_current.i_Kss;
  ultra_rapidly_activating_delayed_rectifier_potassium_current.V is non_inactivating_steady_state_potassium_current.V;
  membrane.i_Kr is rapid_delayed_rectifier_potassium_current.i_Kr;
  non_inactivating_steady_state_potassium_current.V is rapid_delayed_rectifier_potassium_current.V;
  fast_transient_outward_potassium_current.R is rapid_delayed_rectifier_potassium_current.R;
  fast_transient_outward_potassium_current.T is rapid_delayed_rectifier_potassium_current.T;
  fast_transient_outward_potassium_current.F is rapid_delayed_rectifier_potassium_current.F;
  time_independent_potassium_current.Ko is rapid_delayed_rectifier_potassium_current.Ko;
  sodium_potassium_pump_current.Nao is rapid_delayed_rectifier_potassium_current.Nao;
  membrane.i_ClCa is calcium_activated_chloride_current.i_ClCa;
  rapid_delayed_rectifier_potassium_current.V is calcium_activated_chloride_current.V;
  membrane.Cm is calcium_concentration.Cm;
  calcium_activated_chloride_current.V is calcium_concentration.V;
  rapid_delayed_rectifier_potassium_current.F is calcium_concentration.F;
  calcium_concentration.V is calcium_fluxes.V;
  calcium_concentration.Cm is sodium_concentration.Cm;
  calcium_concentration.F is sodium_concentration.F;
  sodium_concentration.Cm is potassium_concentration.Cm;
  sodium_concentration.F is potassium_concentration.F;
  calcium_concentration.Cass is calcium_fluxes.Cass;
  calcium_concentration.CaJSR is calcium_fluxes.CaJSR;
  calcium_concentration.Cai is calcium_fluxes.Cai;
  calcium_concentration.CaNSR is calcium_fluxes.CaNSR;
  calcium_concentration.J_rel is calcium_fluxes.J_rel;
  calcium_concentration.J_tr is calcium_fluxes.J_tr;
  calcium_concentration.J_xfer is calcium_fluxes.J_xfer;
  calcium_concentration.J_leak is calcium_fluxes.J_leak;
  calcium_concentration.J_up is calcium_fluxes.J_up;
  calcium_concentration.J_trpn is calcium_fluxes.J_trpn;
  calcium_fluxes.Cai is calcium_buffering.Cai;
  calcium_fluxes.Cass is ryanodine_receptors.Cass;
  calcium_concentration.i_CaL is L_type_calcium_current.i_CaL;
  ryanodine_receptors.Cass is L_type_calcium_current.Cass;
  calcium_concentration.i_pCa is calcium_pump_current.i_pCa;
  calcium_buffering.Cai is calcium_pump_current.Cai;
  calcium_concentration.i_NaCa is sodium_calcium_exchange_current.i_NaCa;
  calcium_pump_current.Cai is sodium_calcium_exchange_current.Cai;
  calcium_concentration.i_Cab is calcium_background_current.i_Cab;
  sodium_calcium_exchange_current.Cai is calcium_background_current.Cai;
  calcium_background_current.Cai is calcium_activated_chloride_current.Cai;
  calcium_fluxes.LTRPN_tot is calcium_buffering.LTRPN_tot;
  calcium_fluxes.HTRPN_tot is calcium_buffering.HTRPN_tot;
  calcium_fluxes.LTRPN_Ca is calcium_buffering.LTRPN_Ca;
  calcium_fluxes.HTRPN_Ca is calcium_buffering.HTRPN_Ca;
  calcium_fluxes.k_plus_htrpn is calcium_buffering.k_plus_htrpn;
  calcium_fluxes.k_plus_ltrpn is calcium_buffering.k_plus_ltrpn;
  calcium_fluxes.k_minus_ltrpn is calcium_buffering.k_minus_ltrpn;
  calcium_fluxes.i_CaL_max is L_type_calcium_current.i_CaL_max;
  calcium_fluxes.i_CaL is L_type_calcium_current.i_CaL;
  calcium_fluxes.P_O1 is ryanodine_receptors.P_O1;
  calcium_fluxes.P_O2 is ryanodine_receptors.P_O2;
  sodium_concentration.Nai is fast_sodium_current.Nai;
  sodium_concentration.i_Na is fast_sodium_current.i_Na;
  sodium_concentration.i_Nab is sodium_background_current.i_Nab;
  fast_sodium_current.Nai is sodium_calcium_exchange_current.Nai;
  sodium_concentration.i_NaCa is sodium_calcium_exchange_current.i_NaCa;
  sodium_calcium_exchange_current.Nai is sodium_potassium_pump_current.Nai;
  sodium_concentration.i_NaK is sodium_potassium_pump_current.i_NaK;
  fast_sodium_current.E_Na is sodium_background_current.E_Na;
  fast_sodium_current.Ki is potassium_concentration.Ki;
  potassium_concentration.Ki is fast_transient_outward_potassium_current.Ki;
  potassium_concentration.i_Kto_f is fast_transient_outward_potassium_current.i_Kto_f;
  potassium_concentration.i_Kto_s is slow_transient_outward_potassium_current.i_Kto_s;
  potassium_concentration.i_K1 is time_independent_potassium_current.i_K1;
  potassium_concentration.i_Ks is slow_delayed_rectifier_potassium_current.i_Ks;
  potassium_concentration.i_Kr is rapid_delayed_rectifier_potassium_current.i_Kr;
  fast_transient_outward_potassium_current.Ki is rapid_delayed_rectifier_potassium_current.Ki;
  sodium_potassium_pump_current.Nai is rapid_delayed_rectifier_potassium_current.Nai;
  potassium_concentration.i_Kur is ultra_rapidly_activating_delayed_rectifier_potassium_current.i_Kur;
  potassium_concentration.i_NaK is sodium_potassium_pump_current.i_NaK;
  potassium_concentration.i_Kss is non_inactivating_steady_state_potassium_current.i_Kss;
  fast_transient_outward_potassium_current.E_K is slow_transient_outward_potassium_current.E_K;
  slow_transient_outward_potassium_current.E_K is time_independent_potassium_current.E_K;
  time_independent_potassium_current.E_K is slow_delayed_rectifier_potassium_current.E_K;
  slow_delayed_rectifier_potassium_current.E_K is ultra_rapidly_activating_delayed_rectifier_potassium_current.E_K;
  ultra_rapidly_activating_delayed_rectifier_potassium_current.E_K is non_inactivating_steady_state_potassium_current.E_K;
  slow_transient_outward_potassium_current.ass is ultra_rapidly_activating_delayed_rectifier_potassium_current.ass;
  slow_transient_outward_potassium_current.iss is ultra_rapidly_activating_delayed_rectifier_potassium_current.iss;
  ultra_rapidly_activating_delayed_rectifier_potassium_current.ass is non_inactivating_steady_state_potassium_current.ass;
end
