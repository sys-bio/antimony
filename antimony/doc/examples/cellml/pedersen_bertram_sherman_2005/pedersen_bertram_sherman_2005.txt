//Created by libAntimony v1.4
model pedersen_model_2005__environment(time_)
end

model pedersen_model_2005__Gi(Gi, Jglut, Jgk, time_)

  // Rate Rules:
  Gi' = Jglut - Jgk;

  // Variable initializations:
  Gi = 6.0637;
end

model pedersen_model_2005__Ge(Ge, time_)

  // Assignment Rules:
  Ge := glubasa1 + gluamp * (1 - glustep) * cos(time_ * 2 * pi / (60000 * gluper)) + GeStep;
  GeStep := piecewise( glustep * gluamp , (time_ - steptime) / 1000.0 > 1.0 , (time_ - steptime) / 1000.0 * glustep * gluamp , ( (time_ - steptime) / 1000.0 > 0.0) && ((time_ - steptime) / 1000.0 < 1.0 ), 0.0 , (time_ - steptime) / 1000.0 < 0.0 );

  // Variable initializations:
  gluper = 7.0;
  gluamp = 0.0;
  glubasa1 = 7.0;
  glustep = 0.0;
  steptime = 480000;
end

model pedersen_model_2005__G6P(G6P, kappa, JPFK, Jgk, time_)

  // Rate Rules:
  G6P' = kappa * (Jgk - JPFK);

  // Variable initializations:
  G6P = 525.97;
end

model pedersen_model_2005__FBP(FBP, kappa, JPFK, JGPDH, time_)

  // Rate Rules:
  FBP' = kappa * (JPFK - 0.5 * JGPDH);

  // Variable initializations:
  FBP = 0.2088;
end

model pedersen_model_2005__F6P(F6P, G6P)

  // Assignment Rules:
  F6P := 0.3 * G6P;
end

model pedersen_model_2005__Jglut(Jglut, Gi, Ge)

  // Assignment Rules:
  Jglut := Vglut * ((Ge - Gi) * Kglut / ((Kglut + Ge) * (Kglut + Gi)));

  // Variable initializations:
  Kglut = 7;
  Vglut = 8;
end

model pedersen_model_2005__Jgk(Jgk, Gi)

  // Assignment Rules:
  Jgk := Vgk * power(Gi, ngk) / (power(Kgk, ngk) + power(Gi, ngk));

  // Variable initializations:
  Kgk = 7;
  Vgk = 0.8;
  ngk = 4;
end

model pedersen_model_2005__JGPDH(JGPDH, FBP)

  // Assignment Rules:
  JGPDH := 0.2 * root(FBP / 1 );
end

model pedersen_model_2005__JPFK(JPFK, topb, topa16, bottom16)

  // Assignment Rules:
  JPFK := (pfkbas * cat * topa16 + cat * topb) / bottom16;

  // Variable initializations:
  pfkbas = 0.06;
  cat = 2;
end

model pedersen_model_2005__w(topa16, bottom16, topb, AMP, FBP, F6P, ATP)

  // Assignment Rules:
  topa16 := topa15 + weight16;
  bottom16 := bottom15 + weight16;
  topb := weight15;
  weight1 := 1;
  weight9 := AMP / K1;
  weight5 := FBP / K2;
  weight3 := power(F6P, 2 ) / (1 * K3);
  weight2 := power(ATP, 2 ) / (1 * K4);
  weight13 := AMP * FBP / (K1 * K2);
  weight11 := AMP * power(F6P, 2 ) / (1 * K1 * K3 * famp);
  weight10 := AMP * power(ATP, 2 ) / (1 * K1 * K4 * fmt);
  weight6 := FBP * power(ATP, 2 ) / (1 * K2 * K4 * fbt);
  weight4 := power(F6P * ATP, 2 ) / (1 * fatp * K3 * K4);
  weight15 := AMP * FBP * power(F6P, 2 ) / (1 * K1 * K2 * K3 * ffbp * famp);
  weight8 := FBP * power(F6P, 2 ) * power(ATP, 2 ) / (1 * K2 * K3 * K4 * ffbp * fbt * fatp);
  weight12 := AMP * power(F6P, 2 ) * power(ATP, 2 ) / (1 * K1 * K3 * K4 * famp * fmt * fatp);
  weight14 := AMP * FBP * power(ATP, 2 ) / (1 * K1 * K2 * K4 * fbt * fmt);
  weight16 := AMP * FBP * power(F6P, 2 ) * power(ATP, 2 ) / (1 * K1 * K2 * K3 * K4 * ffbp * famp * fbt * fmt * fatp);
  weight7 := FBP * power(F6P, 2 ) / (1 * K2 * K3 * ffbp);
  topa1 := 0;
  topa2 := topa1;
  topa3 := topa2 + weight3;
  topa4 := topa3 + weight4;
  topa5 := topa4;
  topa6 := topa5;
  topa7 := topa6 + weight7;
  topa8 := topa7 + weight8;
  topa9 := topa8;
  topa10 := topa9;
  topa11 := topa10 + weight11;
  topa12 := topa11 + weight12;
  topa13 := topa12;
  topa14 := topa13;
  topa15 := topa14;
  bottom1 := 1;
  bottom2 := bottom1 + weight2;
  bottom3 := bottom2 + weight3;
  bottom4 := bottom3 + weight4;
  bottom5 := bottom4 + weight5;
  bottom6 := bottom5 + weight6;
  bottom7 := bottom6 + weight7;
  bottom8 := bottom7 + weight8;
  bottom9 := bottom8 + weight9;
  bottom10 := bottom9 + weight10;
  bottom11 := bottom10 + weight11;
  bottom12 := bottom11 + weight12;
  bottom13 := bottom12 + weight13;
  bottom14 := bottom13 + weight14;
  bottom15 := bottom14 + weight15;

  // Variable initializations:
  famp = 0.02;
  ffbp = 0.2;
  fmt = 20;
  fbt = 20;
  fatp = 20;
  K1 = 30;
  K2 = 1;
  K3 = 50000;
  K4 = 1000;
end

model pedersen_model_2005__ATP(ATP, ADP)

  // Assignment Rules:
  ATP := 0.5 * (Atot + rad - ADP);
  rad := root(power(ADP - Atot, 2 ) - 4 * power(ADP, 2 ));

  // Variable initializations:
  Atot = 3000;
end

model pedersen_model_2005__AMP(AMP, ATP, ADP)

  // Assignment Rules:
  AMP := power(ADP, 2 ) / ATP;
end

model pedersen_model_2005__ADP(ADP, JGPDH, Ca, ATP, time_)

  // Assignment Rules:
  y := ky * JGPDH / (kg + JGPDH);
  fback := r + y;

  // Rate Rules:
  ADP' = autoadp * ((ATP - ADP * exp(fback * ((1 - Ca) / r1))) / tau_a) + 1 * (1 - autoadp) * (adpknot - ADP);

  // Variable initializations:
  ADP = 537.6;
  tau_a = 300000;
  r = 0.5;
  r1 = 0.35;
  autoadp = 1.0;
  adpknot = 800.0;
  ky = 2.2;
  kg = 0.1;
end

model pedersen_model_2005__membrane(v, I_Ca, I_K, I_K_Ca, I_K_ATP, time_)

  // Rate Rules:
  v' = -((I_K + I_Ca + I_K_Ca + I_K_ATP)) / cm;

  // Variable initializations:
  v = -66.7;
  cm = 5300;
end

model pedersen_model_2005__n(n, time_, v)

  // Assignment Rules:
  n_infinity := 0.5 * (1 + tanh((v - -16 ) / 11.2 ));
  tau_n := 1 / (0.035 * cosh((v - -16 ) / 22.4 ));

  // Rate Rules:
  n' = (n_infinity - n) / tau_n;

  // Variable initializations:
  n = 0.00012;
end

model pedersen_model_2005__I_K(I_K, time_, vK, v, n)

  // Sub-modules, and any changes to those submodules:
  n_mod: pedersen_model_2005__n(n, time_, v);

  // Assignment Rules:
  I_K := gK * n * (v - vK);

  // Variable initializations:
  gK = 2700;
end

model pedersen_model_2005__m(m_infinity, v)

  // Assignment Rules:
  m_infinity := 0.5 * (1 + tanh((v - -20 ) / 24 ));
end

model pedersen_model_2005__I_Ca(I_Ca, time_, vCa, v, m_infinity)

  // Sub-modules, and any changes to those submodules:
  m: pedersen_model_2005__m(m_infinity, v);

  // Assignment Rules:
  I_Ca := gCa * m_infinity * (v - vCa);

  // Variable initializations:
  gCa = 1000;
end

model pedersen_model_2005__I_K_Ca(I_K_Ca, time_, vK, Ca, v)

  // Assignment Rules:
  I_K_Ca := gkCa / (1 + power(KD / Ca, nh)) * (v - vK);

  // Variable initializations:
  gkCa = 400;
  KD = 0.5;
  nh = 2.0;
end

model pedersen_model_2005__I_K_ATP(I_K_ATP, time_, vK, ATP, ADP, v)

  // Assignment Rules:
  I_K_ATP := gkATP_bar * katpo * (v - vK);
  katpo := 20.0 * (topo / bottomo);
  topo := 0.08 * (1 + 2 * MgADP / 17 ) + 0.89 * power(MgADP / 17 , 2 );
  bottomo := power(1 + MgADP / 17 , 2 ) * (1 + ADP3 / 26 + ATP4 / 1 );
  MgADP := 0.165 * ADP;
  ADP3 := 0.135 * ADP;
  ATP4 := 0.05 * ATP;

  // Variable initializations:
  gkATP_bar = 2000;
end

model pedersen_model_2005__Ca(Ca, Jmem, Jer, time_)

  // Rate Rules:
  Ca' = fcyt * (Jmem + Jer);

  // Variable initializations:
  Ca = 0.05626;
  fcyt = 0.01;
end

model pedersen_model_2005__Caer(Caer, Jer, time_)

  // Rate Rules:
  Caer' = -(fer) * sigmav * Jer;

  // Variable initializations:
  Caer = 121.8;
  fer = 0.01;
  sigmav = 31;
end

model pedersen_model_2005__Jmem(Jmem, Ca, I_Ca)

  // Assignment Rules:
  Jmem := -((alpha * 1 * I_Ca + kPMCA * Ca));

  // Variable initializations:
  kPMCA = 0.18;
  alpha = 4.5e-6;
end

model pedersen_model_2005__Jer(Jer, Jleak, JSERCA)

  // Assignment Rules:
  Jer := Jleak - JSERCA;
end

model pedersen_model_2005__JSERCA(JSERCA, Ca)

  // Assignment Rules:
  JSERCA := kSERCA * Ca;

  // Variable initializations:
  kSERCA = 0.4;
end

model pedersen_model_2005__Jleak(Jleak, Ca, Caer)

  // Assignment Rules:
  Jleak := pleak * (Caer - Ca);

  // Variable initializations:
  pleak = 0.0002;
end

model pedersen_model_2005__I(I, Ca, time_)

  // Assignment Rules:
  I_infinity := I_max * (power(Ca, delta) / (power(ki, delta) + power(Ca, delta)));

  // Rate Rules:
  I' = (I_infinity - I) / tau_I;

  // Variable initializations:
  I = 0.316;
  tau_I = 10000;
  I_max = 20;
  delta = 8.0;
  ki = 0.1;
end

model pedersen_model_2005__model_parameters(kappa, vK, vCa)

  // Variable initializations:
  kappa = 0.005;
  vK = -75;
  vCa = 25;
end

model pedersen_model_2005____main()

  // Sub-modules, and any changes to those submodules:
  environment: pedersen_model_2005__environment(time_);
  Gi: pedersen_model_2005__Gi(Gi0, Jglut0, Jgk0, time_);
  Ge: pedersen_model_2005__Ge(Ge0, time_);
  G6P: pedersen_model_2005__G6P(G6P0, kappa, JPFK0, Jgk0, time_);
  FBP: pedersen_model_2005__FBP(FBP0, kappa, JPFK0, JGPDH0, time_);
  F6P: pedersen_model_2005__F6P(F6P0, G6P0);
  Jglut: pedersen_model_2005__Jglut(Jglut0, Gi0, Ge0);
  Jgk: pedersen_model_2005__Jgk(Jgk0, Gi0);
  JGPDH: pedersen_model_2005__JGPDH(JGPDH0, FBP0);
  JPFK: pedersen_model_2005__JPFK(JPFK0, topb, topa16, bottom16);
  w: pedersen_model_2005__w(topa16, bottom16, topb, AMP0, FBP0, F6P0, ATP0);
  ATP: pedersen_model_2005__ATP(ATP0, ADP0);
  AMP: pedersen_model_2005__AMP(AMP0, ATP0, ADP0);
  ADP: pedersen_model_2005__ADP(ADP0, JGPDH0, Ca0, ATP0, time_);
  membrane: pedersen_model_2005__membrane(v, I_Ca0, I_K0, I_K_Ca0, I_K_ATP0, time_);
  I_K: pedersen_model_2005__I_K(I_K0, time_, vK, v, n);
  I_Ca: pedersen_model_2005__I_Ca(I_Ca0, time_, vCa, v, m_infinity);
  I_K_Ca: pedersen_model_2005__I_K_Ca(I_K_Ca0, time_, vK, Ca0, v);
  I_K_ATP: pedersen_model_2005__I_K_ATP(I_K_ATP0, time_, vK, ATP0, ADP0, v);
  Ca: pedersen_model_2005__Ca(Ca0, Jmem0, Jer0, time_);
  Caer: pedersen_model_2005__Caer(Caer0, Jer0, time_);
  Jmem: pedersen_model_2005__Jmem(Jmem0, Ca0, I_Ca0);
  Jer: pedersen_model_2005__Jer(Jer0, Jleak0, JSERCA0);
  JSERCA: pedersen_model_2005__JSERCA(JSERCA0, Ca0);
  Jleak: pedersen_model_2005__Jleak(Jleak0, Ca0, Caer0);
  I: pedersen_model_2005__I(I0, Ca0, time_);
  model_parameters: pedersen_model_2005__model_parameters(kappa, vK, vCa);
end
