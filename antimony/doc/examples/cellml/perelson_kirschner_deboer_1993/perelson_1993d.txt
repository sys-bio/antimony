//Created by libAntimony v1.4
model perelson_1993d__environment(time_)
end

model perelson_1993d__uninfected(time_, N, k_1, k_2, k_3, mu_V, T_1, mu_b, T)

  // Assignment Rules:
  beta := gamma / k_3 * (1 + k_2 / mu_b);

  // Rate Rules:
  T' = s + p * T - gamma * power(T, 2 ) - (k_3 * beta + N * k_1 * k_2 / (k_1 * T + mu_V)) * T * T_1;

  // Variable initializations:
  s = 10;
  p = 0.01;
  gamma = 2E-5;
  T = 1000;
end

model perelson_1993d__latently_infected(time_, N, k_1, k_2, k_3, mu_V, T, T_1)

  // Assignment Rules:
  T_1_t := k_1 * T_0 * V_0 / (k_4 - k_3) * (exp(-(k_3) * time_) - exp(-(k_4) * time_));

  // Rate Rules:
  T_1' = piecewise( T_1_t , time_ <= t_min , N * k_1 * k_2 / (k_1 * T + mu_V) * T * T_1 - k_3 * T_1 );

  // Variable initializations:
  k_1 = 2.4E-5;
  k_3 = 0.023;
  k_4 = 2.424;
  T_0 = 1000;
  V_0 = 1E-3;
  t_min = 2;
  T_1 = 0;
end

model perelson_1993d__actively_infected(time_, k_2, mu_b, T_1)

  // Assignment Rules:
  T_2 := k_2 * T_1 / mu_b;

  // Variable initializations:
  k_2 = 3E-3;
  mu_b = 0.24;
end

model perelson_1993d__free_virus_particle(time_, N, mu_V, k_2, T_1, k_1, T)

  // Assignment Rules:
  V := N * k_2 * T_1 / (k_1 * T + mu_V);

  // Variable initializations:
  N = 1000;
  mu_V = 2.4;
end

model perelson_1993d____main()

  // Sub-modules, and any changes to those submodules:
  environment: perelson_1993d__environment(time_);
  uninfected: perelson_1993d__uninfected(time_, N, k_1, k_2, k_3, mu_V, T_1, mu_b, T);
  latently_infected: perelson_1993d__latently_infected(time_, N, k_1, k_2, k_3, mu_V, T, T_1);
  actively_infected: perelson_1993d__actively_infected(time_, k_2, mu_b, T_1);
  free_virus_particle: perelson_1993d__free_virus_particle(time_, N, mu_V, k_2, T_1, k_1, T);
end
