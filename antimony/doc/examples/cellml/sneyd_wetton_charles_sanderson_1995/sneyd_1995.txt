//Created by libAntimony v1.4
model sneyd_1995__enviroment(time_)
end

model sneyd_1995__P(P, time_)

  // Rate Rules:
  P' = piecewise( IPR_3_flux - V_p * P * k_p / (k_p + P) , time_ <= 15 , -(V_p) * P * k_p / (k_p + P) );

  // Variable initializations:
  P = 0;
  V_p = 0.08;
  k_p = 1;
  IPR_3_flux = 0.72;
end

model sneyd_1995__c(c, J_flux, J_pump, J_leak, time_)

  // Rate Rules:
  c' = J_flux - J_pump + J_leak;

  // Variable initializations:
  c = 0.3;
end

model sneyd_1995__J_flux(J_flux, mu, h, c)

  // Assignment Rules:
  J_flux := k_flux * mu * h * (b + (1 - b) * c / (k_1 + c));

  // Variable initializations:
  k_flux = 3;
  b = 0.11;
  k_1 = 0.7;
end

model sneyd_1995__J_pump(J_pump, c)

  // Assignment Rules:
  J_pump := gamma * power(c, 2 ) / (power(k_gamma, 2 ) + power(c, 2 ));

  // Variable initializations:
  gamma = 1;
  k_gamma = 0.27;
end

model sneyd_1995__J_leak(J_leak)

  // Assignment Rules:
  J_leak := beta;

  // Variable initializations:
  beta = 0.15;
end

model sneyd_1995__mu(mu, P)

  // Assignment Rules:
  mu := power(P, 3 ) / (power(k_mu, 3 ) + power(P, 3 ));

  // Variable initializations:
  k_mu = 0.01;
end

model sneyd_1995__h(h, c, time_)

  // Rate Rules:
  h' = (power(k_2, 2 ) / (power(k_2, 2 ) + power(c, 2 )) - h) / tau_h;

  // Variable initializations:
  h = 1;
  k_2 = 0.7;
  tau_h = 0.2;
end

model sneyd_1995____main()

  // Sub-modules, and any changes to those submodules:
  enviroment: sneyd_1995__enviroment(time_);
  P: sneyd_1995__P(P0, time_);
  c: sneyd_1995__c(c0, J_flux0, J_pump0, J_leak0, time_);
  J_flux: sneyd_1995__J_flux(J_flux0, mu0, h0, c0);
  J_pump: sneyd_1995__J_pump(J_pump0, c0);
  J_leak: sneyd_1995__J_leak(J_leak0);
  mu: sneyd_1995__mu(mu0, P0);
  h: sneyd_1995__h(h0, c0, time_);
end
