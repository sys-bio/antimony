//Created by libAntimony v1.4
model wolf_2000__environment(time_)
end

model wolf_2000__S1(S1, Jo, v1, time_)

  // Rate Rules:
  S1' = Jo - v1;

  // Variable initializations:
  S1 = 5.8;
end

model wolf_2000__S2(S2, v1, v2, v6, time_)

  // Rate Rules:
  S2' = 2.0 * v1 - (v2 + v6);

  // Variable initializations:
  S2 = 0.9;
end

model wolf_2000__S3(S3, v2, v3, time_)

  // Rate Rules:
  S3' = v2 - v3;

  // Variable initializations:
  S3 = 0.2;
end

model wolf_2000__S4(S4, v3, v4, J, time_)

  // Rate Rules:
  S4' = v3 - (v4 + J);

  // Variable initializations:
  S4 = 0.2;
end

model wolf_2000__S4_ex(S4_ex, v7, J, time_)

  // Rate Rules:
  S4_ex' = phi * J - v7;

  // Variable initializations:
  S4_ex = 0.1;
  phi = 0.1;
end

model wolf_2000__A3(A3, v1, v3, v5, time_)

  // Rate Rules:
  A3' = 2.0 * v3 - ( 2.0 * v1 + v5);

  // Variable initializations:
  A3 = 2.4;
end

model wolf_2000__A2(A2, A3)

  // Assignment Rules:
  A2 := A - A3;

  // Variable initializations:
  A = 4.0;
end

model wolf_2000__N2(N2, v2, v4, v6, time_)

  // Rate Rules:
  N2' = v2 - (v4 + v6);

  // Variable initializations:
  N2 = 0.1;
end

model wolf_2000__N1(N1, N2)

  // Assignment Rules:
  N1 := N - N2;

  // Variable initializations:
  N = 1.0;
end

model wolf_2000__v1(v1, S1, A3)

  // Assignment Rules:
  v1 := k_1 * S1 * A3 * f_A3;
  f_A3 := power( 1.0 + power( A3 / K_I , q ), -1.0 );

  // Variable initializations:
  K_I = 0.52;
  k_1 = 100.0;
  q = 4.0;
end

model wolf_2000__v2(v2, S2, N1)

  // Assignment Rules:
  v2 := k_2 * S2 * N1;

  // Variable initializations:
  k_2 = 6.0;
end

model wolf_2000__v3(v3, S3, A2)

  // Assignment Rules:
  v3 := k_3 * S3 * A2;

  // Variable initializations:
  k_3 = 16.0;
end

model wolf_2000__v4(v4, S4, N2)

  // Assignment Rules:
  v4 := k_4 * S4 * N2;

  // Variable initializations:
  k_4 = 100.0;
end

model wolf_2000__v5(v5, A3)

  // Assignment Rules:
  v5 := k_5 * A3;

  // Variable initializations:
  k_5 = 1.28;
end

model wolf_2000__v6(v6, S2, N2)

  // Assignment Rules:
  v6 := k_6 * S2 * N2;

  // Variable initializations:
  k_6 = 12.0;
end

model wolf_2000__v7(v7, S4_ex)

  // Assignment Rules:
  v7 := k * S4_ex;

  // Variable initializations:
  k = 1.3;
end

model wolf_2000__glucose_influx_rate(Jo)

  // Variable initializations:
  Jo = 3.0;
end

model wolf_2000__S4_flux_rate_across_the_plasma_membrane(J, S4_ex, S4)

  // Assignment Rules:
  J := kappa * ( S4 - S4_ex );

  // Variable initializations:
  kappa = 13.0;
end

model wolf_2000____main()

  // Sub-modules, and any changes to those submodules:
  environment: wolf_2000__environment(time_);
  S1: wolf_2000__S1(S10, Jo, v10, time_);
  S2: wolf_2000__S2(S20, v10, v20, v60, time_);
  S3: wolf_2000__S3(S30, v20, v30, time_);
  S4: wolf_2000__S4(S40, v30, v40, J, time_);
  S4_ex: wolf_2000__S4_ex(S4_ex0, v70, J, time_);
  A3: wolf_2000__A3(A30, v10, v30, v50, time_);
  A2: wolf_2000__A2(A20, A30);
  N2: wolf_2000__N2(N20, v20, v40, v60, time_);
  N1: wolf_2000__N1(N10, N20);
  v1: wolf_2000__v1(v10, S10, A30);
  v2: wolf_2000__v2(v20, S20, N10);
  v3: wolf_2000__v3(v30, S30, A20);
  v4: wolf_2000__v4(v40, S40, N20);
  v5: wolf_2000__v5(v50, A30);
  v6: wolf_2000__v6(v60, S20, N20);
  v7: wolf_2000__v7(v70, S4_ex0);
  glucose_influx_rate: wolf_2000__glucose_influx_rate(Jo);
  S4_flux_rate_across_the_plasma_membrane: wolf_2000__S4_flux_rate_across_the_plasma_membrane(J, S4_ex0, S40);
end
