//Created by libAntimony v1.3
model cellmlmod_membrane()

  // Rate Rules:
   V ' = -(( i_Na  +  i_K  +  i_leak  +  i_app )) /  Cm

  // Variable initializations:
  V = -65.0;
  R = 8314.41;
  T = 310.0;
  F = 96485.0;
  Cm = 1.0;

  //Other declarations:
  var V, R, T, F, Cm, i_app, i_Na, i_K, i_leak, time;
end

model cellmlmod_stimulus_protocol()

  // Variable initializations:
  IstimStart = 10;
  IstimEnd = 50000;
  IstimAmplitude = 40;
  IstimPeriod = 100;
  IstimPulseDuration = 1;

  //Other declarations:
  var Istim, IstimStart, IstimEnd, IstimAmplitude, IstimPeriod, IstimPulseDuration;
  var time;
end

model cellmlmod_sodium_current()

  // Assignment Rules:
  i_Na := 120.0   * power( x_infinity ,  3.0  ) * ( 1.0   -  n ) * ( V  -  120.0  )
  x_infinity := alpha_x / (alpha_x + beta_x)
  alpha_x := 0.2  * (V + 40 ) / (1  - exp(-((V + 40 )) / 10 ))
  beta_x := 8  * exp(-((V + 65  / 18 )))

  //Other declarations:
  var i_Na, x_infinity, time, V, n, alpha_x, beta_x;
end

model cellmlmod_potassium_current()

  // Assignment Rules:
  i_K := 36.0   * power( n ,  4.0  ) * ( V  +  77.0  )

  //Other declarations:
  var i_K, time, V, n;
end

model cellmlmod_potassium_current_n_gate()

  // Assignment Rules:
  alpha_n := 0.02   * ( V  +  55.0  ) / ( 1.0   - exp(-(( V  +  55.0  )) /  10.0  ))
  beta_n := 0.25   * exp(-(( V  +  65.0  )) /  80.0  )

  // Rate Rules:
   n ' = alpha_n  * ( 1.0   -  n ) -  beta_n  *  n

  //Other declarations:
  var n, alpha_n, beta_n, V, time;
end

model cellmlmod_leak_current()

  // Assignment Rules:
  i_leak := 0.3   * ( V  +  54.0  )

  //Other declarations:
  var i_leak, time, V;
end

model cellmlmod_transmitter_release()

  // Assignment Rules:
  T := T_ * R

  // Rate Rules:
   R ' = kr_plus  *  Ca  * ( 1.0   -  R ) -  kr_minus  *  R

  // Variable initializations:
  kr_plus = 0.15;
  kr_minus = 2.5;
  T_ = 4;

  //Other declarations:
  var R, kr_plus, kr_minus, Ca, time, T, T_;
end

model cellmlmod_calcium_concentration()

  // Assignment Rules:
  Ca := O * Ca_open + 0.1
  sigma := -5.182   *  i_V
  i_V := g_Ca  *  P  * ( 2.0   *  F  *  V  / ( R  *  T )) * ( Ca_ex  / ( 1.0   - exp( 2.0   *  F  *  V  / ( R  *  T ))))

  // Variable initializations:
  Ca_ex = 2.0;
  Dc = 220.0;
  r = 10.0;
  g_Ca = 1.2;
  P = 6.0;

  //Other declarations:
  var Ca, Ca_ex, Ca_open, Dc, r, sigma, i_V, g_Ca, P, R, F, T, V, O, time;
end

model cellmlmod_rate_constants()

  // Assignment Rules:
  alpha := 0.45   * exp( V  /  22.0  )
  alpha_ := alpha  /  8.0
  beta := 0.015   * exp(-( V ) /  14.0  )
  beta_ := beta  *  8.0
  kG_plus := 3.0   *  a  / ( 680.0   +  320.0   *  a )
  T := t

  // Rate Rules:
   a ' = ka_plus  *  T  * ( 1.0   -  a ) -  ka_minus  *  a

  // Variable initializations:
  ka_plus = 200.0;
  ka_minus = 0.0015;
  kG_minus = 0.00025;
  kG2_minus = 0.016;
  kG3_minus = 1.024;

  //Other declarations:
  var alpha, alpha_, beta, beta_, kG_plus, a, ka_plus, ka_minus, V, time;
  var kG_minus, kG2_minus, kG3_minus, t, T;
end

model cellmlmod_C1()

  // Rate Rules:
  C1' = beta * C2 + kG_minus * C_G1 - C1 * (4  * alpha + kG_plus)

  // Variable initializations:
  C1 = 1;

  //Other declarations:
  var alpha, beta, C1, C2, C_G1, kG_minus, kG_plus, time;
end

model cellmlmod_C2()

  // Rate Rules:
  C2' = 4  * alpha * C1 + 2  * beta * C3 + kG2_minus * C_G2 - C2 * (beta + 3  * alpha + kG_plus)

  // Variable initializations:
  C2 = 0;

  //Other declarations:
  var alpha, beta, C1, C2, C3, C_G2, kG_plus, kG2_minus, time;
end

model cellmlmod_C3()

  // Rate Rules:
  C3' = 3  * alpha * C2 + 3  * beta * C4 + kG3_minus * C_G3 - C3 * (2  * beta + 2  * alpha + kG_plus)

  // Variable initializations:
  C3 = 0;

  //Other declarations:
  var alpha, beta, C2, C3, C4, C_G3, kG_plus, kG3_minus, time;
end

model cellmlmod_C4()

  // Rate Rules:
  C4' = 2  * alpha * C3 + 4  * beta * O - C4 * (3  * beta + alpha)

  // Variable initializations:
  C4 = 0;

  //Other declarations:
  var alpha, beta, C3, C4, O, time;
end

model cellmlmod_O()

  // Assignment Rules:
  O := 1  - C1 - C2 - C3 - C4 - C_G1 - C_G2 - C_G3

  //Other declarations:
  var C1, C2, C3, C4, O, C_G1, C_G2, C_G3, time;
end

model cellmlmod_C_G1()

  // Rate Rules:
  C_G1' = beta_ * C_G2 + kG_plus * C1 - C_G1 * (4  * alpha_ + kG_minus)

  // Variable initializations:
  C_G1 = 0;

  //Other declarations:
  var alpha_, beta_, C1, C_G1, C_G2, time, kG_plus, kG_minus;
end

model cellmlmod_C_G2()

  // Rate Rules:
  C_G2' = 4  * alpha_ * C_G1 + 2  * beta_ * C_G3 + kG_plus * C2 - C_G2 * (beta_ + 3  * alpha_ + kG2_minus)

  // Variable initializations:
  C_G2 = 0;

  //Other declarations:
  var alpha_, beta_, C2, C_G1, C_G2, C_G3, time, kG_plus, kG2_minus;
end

model cellmlmod_C_G3()

  // Rate Rules:
  C_G3' = 3  * alpha_ * C_G2 + kG_plus * C3 - C_G3 * (2  * beta_ + kG3_minus)

  // Variable initializations:
  C_G3 = 0;

  //Other declarations:
  var alpha_, beta_, C3, C_G2, C_G3, time, kG_plus, kG3_minus;
end

model cellmlmod_environment()

  //Other declarations:
  var time;
end

model bertram_arnot_zamponi_2002_version01()

  // Sub-modules, and any changes to those submodules:
  membrane: cellmlmod_membrane()
  stimulus_protocol: cellmlmod_stimulus_protocol()
  sodium_current: cellmlmod_sodium_current()
  potassium_current: cellmlmod_potassium_current()
  potassium_current_n_gate: cellmlmod_potassium_current_n_gate()
  leak_current: cellmlmod_leak_current()
  transmitter_release: cellmlmod_transmitter_release()
  calcium_concentration: cellmlmod_calcium_concentration()
  rate_constants: cellmlmod_rate_constants()
  C1: cellmlmod_C1()
  C2: cellmlmod_C2()
  C3: cellmlmod_C3()
  C4: cellmlmod_C4()
  O: cellmlmod_O()
  C_G1: cellmlmod_C_G1()
  C_G2: cellmlmod_C_G2()
  C_G3: cellmlmod_C_G3()
  environment: cellmlmod_environment()
  environment.time is membrane.time;
  membrane.time is sodium_current.time;
  sodium_current.time is potassium_current.time;
  potassium_current.time is leak_current.time;
  leak_current.time is transmitter_release.time;
  transmitter_release.time is calcium_concentration.time;
  calcium_concentration.time is rate_constants.time;
  rate_constants.time is C1.time;
  C1.time is C2.time;
  C2.time is C3.time;
  C3.time is C4.time;
  C4.time is O.time;
  O.time is C_G1.time;
  C_G1.time is C_G2.time;
  C_G2.time is C_G3.time;
  membrane.V is sodium_current.V;
  membrane.i_Na is sodium_current.i_Na;
  sodium_current.V is potassium_current.V;
  membrane.i_K is potassium_current.i_K;
  sodium_current.n is potassium_current.n;
  potassium_current.V is leak_current.V;
  membrane.i_leak is leak_current.i_leak;
  leak_current.V is calcium_concentration.V;
  membrane.R is calcium_concentration.R;
  membrane.F is calcium_concentration.F;
  membrane.T is calcium_concentration.T;
  calcium_concentration.V is rate_constants.V;
  O.O is calcium_concentration.O;
  transmitter_release.Ca is calcium_concentration.Ca;
  transmitter_release.T is rate_constants.t;
  potassium_current.n is potassium_current_n_gate.n;
  rate_constants.V is potassium_current_n_gate.V;
  C_G3.time is potassium_current_n_gate.time;
  rate_constants.alpha is C1.alpha;
  rate_constants.beta is C1.beta;
  rate_constants.kG_plus is C1.kG_plus;
  rate_constants.kG_minus is C1.kG_minus;
  C2.C2 is C1.C2;
  C2.C1 is C1.C1;
  C_G1.C_G1 is C1.C_G1;
  C_G1.C1 is C1.C1;
  C1.alpha is C2.alpha;
  C1.beta is C2.beta;
  C1.kG_plus is C2.kG_plus;
  rate_constants.kG2_minus is C2.kG2_minus;
  C3.C3 is C2.C3;
  C3.C2 is C1.C2;
  C_G2.C_G2 is C2.C_G2;
  C_G2.C2 is C1.C2;
  C2.alpha is C3.alpha;
  C2.beta is C3.beta;
  C2.kG_plus is C3.kG_plus;
  rate_constants.kG3_minus is C3.kG3_minus;
  C4.C4 is C3.C4;
  C4.C3 is C2.C3;
  C_G3.C_G3 is C3.C_G3;
  C_G3.C3 is C2.C3;
  C3.alpha is C4.alpha;
  C3.beta is C4.beta;
  calcium_concentration.O is C4.O;
  O.C4 is C3.C4;
  C1.C1 is O.C1;
  C1.C2 is O.C2;
  C2.C3 is O.C3;
  C1.C_G1 is O.C_G1;
  C2.C_G2 is O.C_G2;
  C3.C_G3 is O.C_G3;
  rate_constants.alpha_ is C_G1.alpha_;
  rate_constants.beta_ is C_G1.beta_;
  C3.kG_plus is C_G1.kG_plus;
  C1.kG_minus is C_G1.kG_minus;
  O.C_G2 is C_G1.C_G2;
  C_G2.C_G1 is O.C_G1;
  C_G1.alpha_ is C_G2.alpha_;
  C_G1.beta_ is C_G2.beta_;
  C_G1.kG_plus is C_G2.kG_plus;
  C2.kG2_minus is C_G2.kG2_minus;
  O.C_G3 is C_G2.C_G3;
  C_G3.C_G2 is C_G1.C_G2;
  C_G2.alpha_ is C_G3.alpha_;
  C_G2.beta_ is C_G3.beta_;
  C_G2.kG_plus is C_G3.kG_plus;
  C3.kG3_minus is C_G3.kG3_minus;
  potassium_current_n_gate.time is stimulus_protocol.time;
  membrane.i_app is stimulus_protocol.Istim;
end
