//Created by libAntimony v1.4
model bindschadler_sneyd_2001__environment(time_)
end

model bindschadler_sneyd_2001__h1(time_, phi3_c1, h1, phi1_c1, phi2_c1, p, phi_1_c1)

  // Rate Rules:
  h1' = phi3_c1 * (1 - h1) - phi1_c1 * phi2_c1 * h1 * p / (phi1_c1 * p + phi_1_c1);

  // Variable initializations:
  h1 = 0.8;
end

model bindschadler_sneyd_2001__h2(time_, phi3_c2, h2, phi1_c2, phi2_c2, p, phi_1_c2)

  // Rate Rules:
  h2' = phi3_c2 * (1 - h2) - phi1_c2 * phi2_c2 * h2 * p / (phi1_c2 * p + phi_1_c2);

  // Variable initializations:
  h2 = 0.1;
end

model bindschadler_sneyd_2001__phi(phi1_c1, phi_1_c1, phi2_c1, phi3_c1, phi1_c2, phi_1_c2, phi2_c2, phi3_c2, r2, R1, k1, R3, k2, r4, k3, R5, c1, c2)

  // Assignment Rules:
  phi1_c1 := r2 * c1 / (R1 + c1);
  phi_1_c1 := k1 / (R3 + c1);
  phi2_c1 := (k2 + r4 * c1) / (R3 + c1);
  phi3_c1 := k3 / (R5 + c1);
  phi1_c2 := r2 * c2 / (R1 + c2);
  phi_1_c2 := k1 / (R3 + c2);
  phi2_c2 := (k2 + r4 * c2) / (R3 + c2);
  phi3_c2 := k3 / (R5 + c2);
end

model bindschadler_sneyd_2001__j_pump(Vp, c1, c2, Kp, j_pump_c1, j_pump_c2)

  // Assignment Rules:
  j_pump_c1 := Vp * power(c1, 2 ) / (power(Kp, 2 ) + power(c1, 2 ));
  j_pump_c2 := Vp * power(c2, 2 ) / (power(Kp, 2 ) + power(c2, 2 ));
end

model bindschadler_sneyd_2001__j_receptor(kf, p, h1, phi1_c1, phi1_c2, phi_1_c1, phi_1_c2, j_receptor_c1, j_receptor_c2, h2)

  // Assignment Rules:
  j_receptor_c1 := kf * power(p * h1 * phi1_c1 / (phi1_c1 * p + phi_1_c1), 4 );
  j_receptor_c2 := kf * power(p * h2 * phi1_c2 / (phi1_c2 * p + phi_1_c2), 4 );
end

model bindschadler_sneyd_2001__j_diffusion(j_diffusion, D, c1, c2)

  // Assignment Rules:
  j_diffusion := D * (c2 - c1);
end

model bindschadler_sneyd_2001__c1(c1, j_receptor_c1, j_pump_c1, j_leak, j_diffusion, time_)

  // Rate Rules:
  c1' = j_receptor_c1 - j_pump_c1 + j_leak + j_diffusion;

  // Variable initializations:
  c1 = 0.3;
end

model bindschadler_sneyd_2001__c2(c2, j_receptor_c2, j_pump_c2, j_leak, j_diffusion, time_)

  // Rate Rules:
  c2' = j_receptor_c2 - j_pump_c2 + j_leak + j_diffusion;

  // Variable initializations:
  c2 = 0.1;
end

model bindschadler_sneyd_2001__rxn_parameters(kf, Vp, R5, R3, r2, R1, j_leak, Kp, k2, k1, r4, k3, p, D)

  // Variable initializations:
  kf = 28;
  Vp = 1.2;
  R5 = 1.6;
  R3 = 50;
  r2 = 100;
  R1 = 6;
  j_leak = 0.2;
  Kp = 0.18;
  k2 = 26.5;
  k1 = 44;
  r4 = 20;
  k3 = 1.6;
  p = 0.2778;
  D = 0.01;
end

model bindschadler_sneyd_2001____main()

  // Sub-modules, and any changes to those submodules:
  environment: bindschadler_sneyd_2001__environment(time_);
  h1: bindschadler_sneyd_2001__h1(time_, phi3_c1, h10, phi1_c1, phi2_c1, p, phi_1_c1);
  h2: bindschadler_sneyd_2001__h2(time_, phi3_c2, h20, phi1_c2, phi2_c2, p, phi_1_c2);
  phi: bindschadler_sneyd_2001__phi(phi1_c1, phi_1_c1, phi2_c1, phi3_c1, phi1_c2, phi_1_c2, phi2_c2, phi3_c2, r2, R1, k1, R3, k2, r4, k3, R5, c10, c20);
  j_pump: bindschadler_sneyd_2001__j_pump(Vp, c10, c20, Kp, j_pump_c1, j_pump_c2);
  j_receptor: bindschadler_sneyd_2001__j_receptor(kf, p, h10, phi1_c1, phi1_c2, phi_1_c1, phi_1_c2, j_receptor_c1, j_receptor_c2, h20);
  j_diffusion: bindschadler_sneyd_2001__j_diffusion(j_diffusion0, D, c10, c20);
  c1: bindschadler_sneyd_2001__c1(c10, j_receptor_c1, j_pump_c1, j_leak, j_diffusion0, time_);
  c2: bindschadler_sneyd_2001__c2(c20, j_receptor_c2, j_pump_c2, j_leak, j_diffusion0, time_);
  rxn_parameters: bindschadler_sneyd_2001__rxn_parameters(kf, Vp, R5, R3, r2, R1, j_leak, Kp, k2, k1, r4, k3, p, D);
end
