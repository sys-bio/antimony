//Created by libAntimony v1.3
model cellmlmod_environment()

  // Variable initializations:
  epi = 1;
  endo = 0;
  mcell = 0;

  //Other declarations:
  var time, epi, endo, mcell;
end

model cellmlmod_membrane()

  // Assignment Rules:
  Vm := V_0 + u * (V_fi - V_0)

  // Rate Rules:
  u' = -((J_fi + J_so + J_si + J_stim))

  // Variable initializations:
  u = 0;
  V_0 = -83;
  V_fi = 2.7;

  //Other declarations:
  var u, Vm, V_0, V_fi, time, J_fi, J_so, J_si, J_stim;
end

model cellmlmod_m()

  // Variable initializations:
  u_m = 0.3;

  //Other declarations:
  var m, u_m, u, time;
end

model cellmlmod_p()

  // Variable initializations:
  u_p = 0.13;

  //Other declarations:
  var p, u_p, u, time;
end

model cellmlmod_q()

  //Other declarations:
  var q, epi, endo, mcell, u_q, u, time;
end

model cellmlmod_r()

  //Other declarations:
  var r, epi, endo, mcell, u_r, u, time;
end

model cellmlmod_fast_inward_current()

  // Assignment Rules:
  J_fi := -(m) * v * (u - u_m) * (u_u - u) / tau_fi

  //Other declarations:
  var J_fi, tau_fi, epi, endo, mcell, m, q, u_p, u_u, u_m, time, u, u_q, v;
end

model cellmlmod_fast_inward_current_v_gate()

  // Assignment Rules:
  tau_v_minus := q * tau_v2_minus + (1  - q) * tau_v1_minus

  // Rate Rules:
  v' = (1  - m) * (v_inf - v) / tau_v_minus - m * v / tau_v_plus

  // Variable initializations:
  v = 1;
  tau_v_plus = 1.45;

  //Other declarations:
  var v, v_inf, epi, endo, mcell, tau_v_minus, tau_v1_minus, tau_v2_minus;
  var tau_v_plus, q, m, u, u_q, time;
end

model cellmlmod_slow_outward_current()

  // Assignment Rules:
  J_so := u * (1  - p) / tau_o + p / tau_so
  tau_o := (1  - r) * tau_o1 + r * tau_o2
  tau_so := tau_so1 + (tau_so2 - tau_so1) * (1  + tanh(k_so * (u - u_so))) / 2

  //Other declarations:
  var J_so, epi, endo, mcell, tau_o, tau_o1, tau_o2, tau_so, tau_so1, tau_so2;
  var k_so, u_so, r, p, time, u;
end

model cellmlmod_slow_inward_current()

  // Assignment Rules:
  J_si := -(p) * w * s / tau_si

  //Other declarations:
  var J_si, epi, endo, mcell, tau_si, p, r, time, u, w, s;
end

model cellmlmod_slow_inward_current_w_gate()

  // Assignment Rules:
  w_inf := (1  - r) * (1  - u * 1  / tau_winf) + r * wstar_inf
  tau_w_minus := tau_w1_minus + (tau_w2_minus - tau_w1_minus) * (1  + tanh(k_w_minus * (u - u_w_minus))) / 2

  // Rate Rules:
  w' = (1  - r) * (w_inf - w) / tau_w_minus - r * w / tau_w_plus

  // Variable initializations:
  w = 1;

  //Other declarations:
  var w, epi, endo, mcell, w_inf, tau_winf, wstar_inf, tau_w_minus, tau_w1_minus;
  var tau_w2_minus, k_w_minus, u_w_minus, tau_w_plus, r, u, time;
end

model cellmlmod_slow_inward_current_s_gate()

  // Assignment Rules:
  tau_s := (1  - p) * tau_s1 + p * tau_s2

  // Rate Rules:
  s' = ((1  + tanh(k_s * (u - u_s))) / 2  - s) / tau_s

  // Variable initializations:
  s = 0;
  tau_s1 = 2.7342;
  k_s = 2.0994;
  u_s = 0.9087;

  //Other declarations:
  var s, epi, endo, mcell, tau_s, tau_s1, tau_s2, k_s, u_s, p, u, time;
end

model bueno_2007()

  // Sub-modules, and any changes to those submodules:
  environment: cellmlmod_environment()
  membrane: cellmlmod_membrane()
  m: cellmlmod_m()
  p: cellmlmod_p()
  q: cellmlmod_q()
  r: cellmlmod_r()
  fast_inward_current: cellmlmod_fast_inward_current()
  fast_inward_current_v_gate: cellmlmod_fast_inward_current_v_gate()
  slow_outward_current: cellmlmod_slow_outward_current()
  slow_inward_current: cellmlmod_slow_inward_current()
  slow_inward_current_w_gate: cellmlmod_slow_inward_current_w_gate()
  slow_inward_current_s_gate: cellmlmod_slow_inward_current_s_gate()
  membrane.time is environment.time;
  m.time is environment.time;
  p.time is environment.time;
  q.time is environment.time;
  q.epi is environment.epi;
  q.endo is environment.endo;
  q.mcell is environment.mcell;
  r.time is environment.time;
  r.epi is environment.epi;
  r.endo is environment.endo;
  r.mcell is environment.mcell;
  fast_inward_current.time is environment.time;
  fast_inward_current.epi is environment.epi;
  fast_inward_current.endo is environment.endo;
  fast_inward_current.mcell is environment.mcell;
  slow_outward_current.time is environment.time;
  slow_outward_current.epi is environment.epi;
  slow_outward_current.endo is environment.endo;
  slow_outward_current.mcell is environment.mcell;
  slow_inward_current.time is environment.time;
  slow_inward_current.epi is environment.epi;
  slow_inward_current.endo is environment.endo;
  slow_inward_current.mcell is environment.mcell;
  membrane.u is fast_inward_current.u;
  membrane.J_fi is fast_inward_current.J_fi;
  fast_inward_current.u is slow_outward_current.u;
  membrane.J_so is slow_outward_current.J_so;
  slow_outward_current.u is slow_inward_current.u;
  membrane.J_si is slow_inward_current.J_si;
  slow_inward_current.u is m.u;
  m.u is p.u;
  p.u is q.u;
  q.u is r.u;
  m.m is fast_inward_current.m;
  m.u_m is fast_inward_current.u_m;
  p.u_p is fast_inward_current.u_p;
  p.p is slow_outward_current.p;
  r.r is slow_outward_current.r;
  slow_outward_current.p is slow_inward_current.p;
  slow_outward_current.r is slow_inward_current.r;
  q.q is fast_inward_current.q;
  q.u_q is fast_inward_current.u_q;
  fast_inward_current.v is fast_inward_current_v_gate.v;
  fast_inward_current.q is fast_inward_current_v_gate.q;
  environment.time is fast_inward_current_v_gate.time;
  environment.epi is fast_inward_current_v_gate.epi;
  environment.endo is fast_inward_current_v_gate.endo;
  environment.mcell is fast_inward_current_v_gate.mcell;
  fast_inward_current.m is fast_inward_current_v_gate.m;
  r.u is fast_inward_current_v_gate.u;
  fast_inward_current.u_q is fast_inward_current_v_gate.u_q;
  slow_inward_current.w is slow_inward_current_w_gate.w;
  slow_inward_current.r is slow_inward_current_w_gate.r;
  fast_inward_current_v_gate.time is slow_inward_current_w_gate.time;
  fast_inward_current_v_gate.epi is slow_inward_current_w_gate.epi;
  fast_inward_current_v_gate.endo is slow_inward_current_w_gate.endo;
  fast_inward_current_v_gate.mcell is slow_inward_current_w_gate.mcell;
  fast_inward_current_v_gate.u is slow_inward_current_w_gate.u;
  slow_inward_current.s is slow_inward_current_s_gate.s;
  slow_inward_current.p is slow_inward_current_s_gate.p;
  slow_inward_current_w_gate.u is slow_inward_current_s_gate.u;
  slow_inward_current_w_gate.time is slow_inward_current_s_gate.time;
  slow_inward_current_w_gate.epi is slow_inward_current_s_gate.epi;
  slow_inward_current_w_gate.endo is slow_inward_current_s_gate.endo;
  slow_inward_current_w_gate.mcell is slow_inward_current_s_gate.mcell;
end
