//Created by libAntimony v1.4
model nagerl_novo_mody_vergara_2000_version01__environment(time_)
end

model nagerl_novo_mody_vergara_2000_version01__Ca(Ca, CaD, CaDM1, CaDM2, CaBi)

  // Assignment Rules:
  Ca := Ca_T - (CaD + CaDM1 + CaDM2 + CaBi);
end

model nagerl_novo_mody_vergara_2000_version01__DM_T(DM_T)

  // Variable initializations:
  DM_T = 5.0;
end

model nagerl_novo_mody_vergara_2000_version01__DM1(DM1, alpha, DM_T, CaDM1)

  // Assignment Rules:
  DM1 := DM_T * alpha - CaDM1;
end

model nagerl_novo_mody_vergara_2000_version01__DM1_T(DM1_T, DM1, CaDM1)

  // Assignment Rules:
  DM1_T := DM1 + CaDM1;
end

model nagerl_novo_mody_vergara_2000_version01__DM2(DM2, alpha, DM_T, CaDM2)

  // Assignment Rules:
  DM2 := DM_T * ( 1.0 - alpha) - CaDM2;
end

model nagerl_novo_mody_vergara_2000_version01__DM2_T(DM2_T, DM2, CaDM2)

  // Assignment Rules:
  DM2_T := DM2 + CaDM2;
end

model nagerl_novo_mody_vergara_2000_version01__D(D, CaD)

  // Assignment Rules:
  D := D_T - CaD;

  // Variable initializations:
  D_T = 100.0;
end

model nagerl_novo_mody_vergara_2000_version01__Bi(Bi, CaBi)

  // Assignment Rules:
  Bi_T := Bi + CaBi;
end

model nagerl_novo_mody_vergara_2000_version01__CaDM1(CaDM1, Ca, DM1, kon_DM, koff_DM, k_trans, t_pulse, time_)

  // Rate Rules:
  CaDM1' = piecewise( kon_DM * Ca * DM1 - koff_DM * CaDM1 , t_pulse == 0.0 , kon_DM * Ca * DM1 - k_trans * CaDM1 );
end

model nagerl_novo_mody_vergara_2000_version01__CaDM2(CaDM2, Ca, DM2, kon_DM, koff_DM, time_)

  // Rate Rules:
  CaDM2' = kon_DM * Ca * DM2 - koff_DM * CaDM2;
end

model nagerl_novo_mody_vergara_2000_version01__CaD(CaD, Ca, D, kon_D, koff_D, time_)

  // Rate Rules:
  CaD' = kon_D * Ca * D - koff_D * CaD;
end

model nagerl_novo_mody_vergara_2000_version01__CaBi(CaBi, Ca, Bi, kon_Bi, koff_Bi, time_)

  // Rate Rules:
  CaBi' = kon_Bi * Ca * Bi - koff_Bi * CaBi;
end

model nagerl_novo_mody_vergara_2000_version01__constants(kon_DM, koff_DM, kon_D, koff_D, kon_Bi, koff_Bi, k_trans, t_pulse, alpha, time_)

  // Assignment Rules:
  k_trans := koff_DM + ( koff_DM_ - koff_DM ) * ( 1.0 - exp(-(( time_ - t_pulse )) / tau_photolysis ));

  // Variable initializations:
  kon_DM = 0.03;
  koff_DM = 0.00006;
  kon_D = 0.124;
  koff_D = 5.6;
  kon_Bi = 1.0;
  koff_Bi = 1.0;
  t_pulse = 1.0;
  alpha = 0.5;
  koff_DM_ = 75.0;
  tau_photolysis = 20.0;
end

model nagerl_novo_mody_vergara_2000_version01____main()

  // Sub-modules, and any changes to those submodules:
  environment: nagerl_novo_mody_vergara_2000_version01__environment(time_);
  Ca: nagerl_novo_mody_vergara_2000_version01__Ca(Ca0, CaD0, CaDM10, CaDM20, CaBi0);
  DM_T: nagerl_novo_mody_vergara_2000_version01__DM_T(DM_T0);
  DM1: nagerl_novo_mody_vergara_2000_version01__DM1(DM10, alpha, DM_T0, CaDM10);
  DM1_T: nagerl_novo_mody_vergara_2000_version01__DM1_T(DM1_T0, DM10, CaDM10);
  DM2: nagerl_novo_mody_vergara_2000_version01__DM2(DM20, alpha, DM_T0, CaDM20);
  DM2_T: nagerl_novo_mody_vergara_2000_version01__DM2_T(DM2_T0, DM20, CaDM20);
  D: nagerl_novo_mody_vergara_2000_version01__D(D0, CaD0);
  Bi: nagerl_novo_mody_vergara_2000_version01__Bi(Bi0, CaBi0);
  CaDM1: nagerl_novo_mody_vergara_2000_version01__CaDM1(CaDM10, Ca0, DM10, kon_DM, koff_DM, k_trans, t_pulse, time_);
  CaDM2: nagerl_novo_mody_vergara_2000_version01__CaDM2(CaDM20, Ca0, DM20, kon_DM, koff_DM, time_);
  CaD: nagerl_novo_mody_vergara_2000_version01__CaD(CaD0, Ca0, D0, kon_D, koff_D, time_);
  CaBi: nagerl_novo_mody_vergara_2000_version01__CaBi(CaBi0, Ca0, Bi0, kon_Bi, koff_Bi, time_);
  constants: nagerl_novo_mody_vergara_2000_version01__constants(kon_DM, koff_DM, kon_D, koff_D, kon_Bi, koff_Bi, k_trans, t_pulse, alpha, time_);
end
