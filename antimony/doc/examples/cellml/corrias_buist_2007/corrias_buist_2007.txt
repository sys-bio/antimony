//Created by libAntimony v1.4
model SM_model__Time(time_)
end

model SM_model__Neural_input(Ach)

  // Variable initializations:
  Ach = 0.00001;
end

model SM_model__Gap_junction(Gcouple)

  // Variable initializations:
  Gcouple = 1.3;
end

model SM_model__Environment(T, T_exp, F, R, Q10Ca, Q10K, Q10Na, Ca_o, Na_o, K_o, Cl_o, T_correction_Na, T_correction_K, T_correction_Ca, T_correction_BK, FoRT, RToF)

  // Assignment Rules:
  T_correction_Na := power(Q10Na , (T - T_exp ) / 10 );
  T_correction_K := power(Q10K , (T - T_exp ) / 10 );
  T_correction_Ca := power(Q10Ca , (T - T_exp ) / 10 );
  T_correction_BK := 1.1 * (T - T_exp );
  FoRT := F / ( R * T );
  RToF := R * T / F;

  // Variable initializations:
  T = 310;
  T_exp = 297;
  F = 96486;
  R = 8314.4;
  Q10Ca = 2.1;
  Q10K = 1.365;
  Q10Na = 2.45;
  Ca_o = 2.5;
  Na_o = 137;
  K_o = 5.9;
  Cl_o = 134;
end

model SM_model__m_Na_SM(Vm_SM, m_Na_SM, time_, T_correction_Na)

  // Assignment Rules:
  m_inf_Na := 1.0 / (1.0 + exp(( Vm_SM + 47 ) / -4.8 ));
  tau_m_Na := T_correction_Na * (Vm_SM * -0.017 * 1 + 0.440 );

  // Rate Rules:
  m_Na_SM' = ( m_inf_Na - m_Na_SM) / tau_m_Na;

  // Variable initializations:
  m_Na_SM = 0.005;
end

model SM_model__h_Na_SM(Vm_SM, h_Na_SM, time_, T_correction_Na)

  // Assignment Rules:
  h_inf_Na := 1.0 / (1.0 + exp(( Vm_SM + 78 ) / 3 ));
  tau_h_Na := T_correction_Na * (Vm_SM * -0.25 * 1 + 5.50 );

  // Rate Rules:
  h_Na_SM' = ( h_inf_Na - h_Na_SM) / tau_h_Na;

  // Variable initializations:
  h_Na_SM = 0.05787;
end

model SM_model__I_Na_SM(I_Na_SM, Vm_SM, h_Na_SM, m_Na_SM, RToF, Na_o, Na_i, T_correction_Na, time_)

  // Sub-modules, and any changes to those submodules:
  m_Na_SM_mod: SM_model__m_Na_SM(Vm_SM, m_Na_SM, time_, T_correction_Na);
  h_Na_SM_mod: SM_model__h_Na_SM(Vm_SM, h_Na_SM, time_, T_correction_Na);

  // Assignment Rules:
  I_Na_SM := G_max_Na_SM * ( h_Na_SM * m_Na_SM ) * ( Vm_SM - E_Na );
  E_Na := RToF * ln( Na_o / Na_i );

  // Variable initializations:
  G_max_Na_SM = 3;
end

model SM_model__d_Ltype_SM(Vm_SM, d_Ltype_SM, time_, T_correction_Ca)

  // Assignment Rules:
  d_inf_Ltype_SM := 1.0 / (1.0 + exp(( Vm_SM + 17 ) / -4.3 ));
  tau_d_Ltype_SM := T_correction_Ca * 0.47;

  // Rate Rules:
  d_Ltype_SM' = ( d_inf_Ltype_SM - d_Ltype_SM) / tau_d_Ltype_SM;

  // Variable initializations:
  d_Ltype_SM = 0.0;
end

model SM_model__f_Ltype_SM(Vm_SM, f_Ltype_SM, time_, T_correction_Ca)

  // Assignment Rules:
  f_inf_Ltype_SM := 1.0 / (1.0 + exp(( Vm_SM + 43 ) / 8.9 ));
  tau_f_Ltype_SM := T_correction_Ca * 86;

  // Rate Rules:
  f_Ltype_SM' = ( f_inf_Ltype_SM - f_Ltype_SM) / tau_f_Ltype_SM;

  // Variable initializations:
  f_Ltype_SM = 0.95;
end

model SM_model__f_ca_Ltype_SM(Ca_i, f_ca_Ltype_SM, time_, T_correction_Ca)

  // Assignment Rules:
  f_ca_inf_Ltype_SM := 1.0 - 1.0 / (1.0 + exp(( Ca_i - 0.00008999 - 0.000214 ) / -0.0000131 ));
  tau_f_ca_Ltype_SM := T_correction_Ca * 2;

  // Rate Rules:
  f_ca_Ltype_SM' = ( f_ca_inf_Ltype_SM - f_ca_Ltype_SM) / tau_f_ca_Ltype_SM;

  // Variable initializations:
  f_ca_Ltype_SM = 1.0;
end

model SM_model__I_Ltype_SM(I_Ltype_SM, Vm_SM, f_Ltype_SM, d_Ltype_SM, f_ca_Ltype_SM, RToF, Ca_o, Ca_i, T_correction_Ca, time_)

  // Sub-modules, and any changes to those submodules:
  d_Ltype_SM_mod: SM_model__d_Ltype_SM(Vm_SM, d_Ltype_SM, time_, T_correction_Ca);
  f_Ltype_SM_mod: SM_model__f_Ltype_SM(Vm_SM, f_Ltype_SM, time_, T_correction_Ca);
  f_ca_Ltype_SM_mod: SM_model__f_ca_Ltype_SM(Ca_i, f_ca_Ltype_SM, time_, T_correction_Ca);

  // Assignment Rules:
  I_Ltype_SM := G_max_Ltype * ( f_Ltype_SM * d_Ltype_SM * f_ca_Ltype_SM ) * ( Vm_SM - E_Ca );
  E_Ca := 0.5 * RToF * ln( Ca_o / Ca_i );

  // Variable initializations:
  G_max_Ltype = 65;
end

model SM_model__d_LVA_SM(Vm_SM, d_LVA_SM, time_, T_correction_Ca)

  // Assignment Rules:
  d_inf_LVA_SM := 1.0 / (1.0 + exp(( Vm_SM + 27.5 ) / -10.9 ));
  tau_d_LVA_SM := T_correction_Ca * 3.0;

  // Rate Rules:
  d_LVA_SM' = ( d_inf_LVA_SM - d_LVA_SM) / tau_d_LVA_SM;

  // Variable initializations:
  d_LVA_SM = 0.02;
end

model SM_model__f_LVA_SM(Vm_SM, f_LVA_SM, time_, T_correction_Ca)

  // Assignment Rules:
  f_inf_LVA_SM := 1.0 / (1.0 + exp(( Vm_SM + 15.8 ) / 7 ));
  tau_f_LVA_SM := T_correction_Ca * (7.58 * exp(Vm_SM * 0.00817 ));

  // Rate Rules:
  f_LVA_SM' = ( f_inf_LVA_SM - f_LVA_SM) / tau_f_LVA_SM;

  // Variable initializations:
  f_LVA_SM = 0.99;
end

model SM_model__I_LVA_SM(I_LVA_SM, Vm_SM, f_LVA_SM, d_LVA_SM, RToF, Ca_o, Ca_i, T_correction_Ca, time_)

  // Sub-modules, and any changes to those submodules:
  d_LVA_SM_mod: SM_model__d_LVA_SM(Vm_SM, d_LVA_SM, time_, T_correction_Ca);
  f_LVA_SM_mod: SM_model__f_LVA_SM(Vm_SM, f_LVA_SM, time_, T_correction_Ca);

  // Assignment Rules:
  I_LVA_SM := G_max_LVA * ( f_LVA_SM * d_LVA_SM ) * ( Vm_SM - E_Ca );
  E_Ca := 0.5 * RToF * ln( Ca_o / Ca_i );

  // Variable initializations:
  G_max_LVA = 0.18;
end

model SM_model__d_BK_SM(Vm_SM, Ca_i, d_BK_SM, time_)

  // Assignment Rules:
  d_BK_SM := 1.0 / (1.0 + exp( Vm_SM / -17 - 2.0 * ln( Ca_i / 0.001 )));
end

model SM_model__I_BK_SM(I_BK_SM, Ca_i, Vm_SM, d_BK_SM, RToF, K_o, K_i, T_correction_BK, time_)

  // Sub-modules, and any changes to those submodules:
  d_BK_SM_mod: SM_model__d_BK_SM(Vm_SM, Ca_i, d_BK_SM, time_);

  // Assignment Rules:
  I_BK_SM := ( G_max_BK + T_correction_BK ) * d_BK_SM * ( Vm_SM - E_K );
  E_K := RToF * ln( K_o / K_i );

  // Variable initializations:
  G_max_BK = 45.7;
end

model SM_model__xr1_SM(Vm_SM, xr1_SM, time_, T_correction_K)

  // Assignment Rules:
  xr1_inf_SM := 1.0 / (1.0 + exp(( Vm_SM + 27 ) / -5.0 ));
  tau_xr1_SM := T_correction_K * 80;

  // Rate Rules:
  xr1_SM' = ( xr1_inf_SM - xr1_SM) / tau_xr1_SM;

  // Variable initializations:
  xr1_SM = 0.0;
end

model SM_model__xr2_SM(Vm_SM, xr2_SM, time_, T_correction_K)

  // Assignment Rules:
  xr2_inf_SM := 0.2 + 0.8 / (1.0 + exp(( Vm_SM + 58 ) / 10 ));
  tau_xr2_SM := T_correction_K * (-707 + 1481 * exp(( Vm_SM + 36 ) / 95 ));

  // Rate Rules:
  xr2_SM' = ( xr2_inf_SM - xr2_SM) / tau_xr2_SM;

  // Variable initializations:
  xr2_SM = 0.82;
end

model SM_model__I_kr_SM(I_kr_SM, Vm_SM, xr1_SM, xr2_SM, RToF, K_o, K_i, T_correction_K, time_)

  // Sub-modules, and any changes to those submodules:
  xr1_SM_mod: SM_model__xr1_SM(Vm_SM, xr1_SM, time_, T_correction_K);
  xr2_SM_mod: SM_model__xr2_SM(Vm_SM, xr2_SM, time_, T_correction_K);

  // Assignment Rules:
  I_kr_SM := G_max_kr_SM * ( xr1_SM * xr2_SM ) * ( Vm_SM - E_K );
  E_K := RToF * ln( K_o / K_i );

  // Variable initializations:
  G_max_kr_SM = 35;
end

model SM_model__xa1_SM(Vm_SM, xa1_SM, time_, T_correction_K)

  // Assignment Rules:
  xa1_inf_SM := 1.0 / (1.0 + exp(( Vm_SM + 26.5 ) / -7.9 ));
  tau_xa1_SM := T_correction_K * (31.8 + 175 * exp(-0.5 * power((Vm_SM + 44.4 ) / 22.3 , 2 )));

  // Rate Rules:
  xa1_SM' = ( xa1_inf_SM - xa1_SM) / tau_xa1_SM;

  // Variable initializations:
  xa1_SM = 0.00414;
end

model SM_model__xa2_SM(Vm_SM, xa2_SM, time_, T_correction_K)

  // Assignment Rules:
  xa2_inf_SM := 0.1 + 0.9 / (1.0 + exp(( Vm_SM + 65 ) / 6.2 ));
  tau_xa2_SM := T_correction_K * 90;

  // Rate Rules:
  xa2_SM' = ( xa2_inf_SM - xa2_SM) / tau_xa2_SM;

  // Variable initializations:
  xa2_SM = 0.72;
end

model SM_model__I_ka_SM(I_ka_SM, Vm_SM, xa1_SM, xa2_SM, RToF, K_o, K_i, T_correction_K, time_)

  // Sub-modules, and any changes to those submodules:
  xa1_SM_mod: SM_model__xa1_SM(Vm_SM, xa1_SM, time_, T_correction_K);
  xa2_SM_mod: SM_model__xa2_SM(Vm_SM, xa2_SM, time_, T_correction_K);

  // Assignment Rules:
  I_ka_SM := G_max_ka_SM * ( xa1_SM * xa2_SM ) * ( Vm_SM - E_K );
  E_K := RToF * ln( K_o / K_i );

  // Variable initializations:
  G_max_ka_SM = 9;
end

model SM_model__I_bk_SM(I_bk_SM, Vm_SM, RToF, K_o, K_i)

  // Assignment Rules:
  I_bk_SM := G_max_bk * ( Vm_SM - E_K );
  E_K := RToF * ln( K_o / K_i );

  // Variable initializations:
  G_max_bk = 0.0144;
end

model SM_model__m_NSCC_SM(Vm_SM, m_NSCC_SM, time_)

  // Assignment Rules:
  m_inf_NSCC_SM := 1.0 / (1.0 + exp(( Vm_SM + 25.0 ) / -20 ));
  tau_m_NSCC_SM := 1.0 / (1.0 + exp((Vm_SM + 66 ) / -26 )) * 150;

  // Rate Rules:
  m_NSCC_SM' = ( m_inf_NSCC_SM - m_NSCC_SM) / tau_m_NSCC_SM;

  // Variable initializations:
  m_NSCC_SM = 0.0;
end

model SM_model__I_NSCC_SM(I_NSCC_SM, Vm_SM, Ca_i, Ach, m_NSCC_SM, RToF, Na_o, Na_i, K_o, K_i, time_)

  // Sub-modules, and any changes to those submodules:
  m_NSCC_SM_mod: SM_model__m_NSCC_SM(Vm_SM, m_NSCC_SM, time_);

  // Assignment Rules:
  I_NSCC_SM := G_max_NSCC_SM * m_NSCC_SM * f_ca_NSCC_SM * rach_NSCC_SM * ( Vm_SM - E_NSCC );
  f_ca_NSCC_SM := 1.0 / (1.0 + power(Ca_i / 0.0002 , -4.0 ));
  rach_NSCC_SM := 1.0 / (1.0 + 0.01 / Ach);

  // Variable initializations:
  E_NSCC = -28;
  G_max_NSCC_SM = 50;
end

model SM_model__J_CaSR_SM(J_CaSR_SM, Ca_i)

  // Assignment Rules:
  J_CaSR_SM := J_max_CaSR * power(Ca_i * 1.0 , 1.34 );

  // Variable initializations:
  J_max_CaSR = 0.31705;
end

model SM_model__SM_Membrane(Vol_SM, Vm_SM, time_, Ca_i, Na_i, K_i, Ca_o, Ach, Na_o, K_o, Cl_o, T_correction_Ca, T_correction_Na, T_correction_K, T_correction_BK, RToF, FoRT, F, I_Na_SM, I_Ltype_SM, I_LVA_SM, I_kr_SM, I_ka_SM, I_BK_SM, I_NSCC_SM, I_bk_SM, J_CaSR_SM, I_stim)

  // Sub-modules, and any changes to those submodules:
  I_Na_SM_mod: SM_model__I_Na_SM(I_Na_SM, Vm_SM, h_Na_SM, m_Na_SM, RToF, Na_o, Na_i, T_correction_Na, time_);
  I_Ltype_SM_mod: SM_model__I_Ltype_SM(I_Ltype_SM, Vm_SM, f_Ltype_SM, d_Ltype_SM, f_ca_Ltype_SM, RToF, Ca_o, Ca_i, T_correction_Ca, time_);
  I_LVA_SM_mod: SM_model__I_LVA_SM(I_LVA_SM, Vm_SM, f_LVA_SM, d_LVA_SM, RToF, Ca_o, Ca_i, T_correction_Ca, time_);
  I_BK_SM_mod: SM_model__I_BK_SM(I_BK_SM, Ca_i, Vm_SM, d_BK_SM, RToF, K_o, K_i, T_correction_BK, time_);
  I_kr_SM_mod: SM_model__I_kr_SM(I_kr_SM, Vm_SM, xr1_SM, xr2_SM, RToF, K_o, K_i, T_correction_K, time_);
  I_ka_SM_mod: SM_model__I_ka_SM(I_ka_SM, Vm_SM, xa1_SM, xa2_SM, RToF, K_o, K_i, T_correction_K, time_);
  I_bk_SM_mod: SM_model__I_bk_SM(I_bk_SM, Vm_SM, RToF, K_o, K_i);
  I_NSCC_SM_mod: SM_model__I_NSCC_SM(I_NSCC_SM, Vm_SM, Ca_i, Ach, m_NSCC_SM, RToF, Na_o, Na_i, K_o, K_i, time_);
  J_CaSR_SM_mod: SM_model__J_CaSR_SM(J_CaSR_SM, Ca_i);

  // Rate Rules:
  Vm_SM' = -1.0 * (1.0 / Cm_SM) * ( I_Na_SM + I_Ltype_SM + I_LVA_SM + I_kr_SM + I_ka_SM + I_BK_SM + I_NSCC_SM + I_bk_SM + -1.0 * I_stim );
  Ca_i' = (-1 * I_Ltype_SM + -1 * I_LVA_SM ) / (2.0 * 0.001 * F * Vol_SM ) + -1 * J_CaSR_SM;

  // Variable initializations:
  Cm_SM = 77;
  Vol_SM = 3500;
  Vm_SM = -69.75;
  Ca_i = 0.00008;
  Na_i = 10;
  K_i = 164;
end

model SM_model__I_stim(time_, Gcouple, I_stim)

  // Assignment Rules:
  local_time := time_ - (stim_start + t_ICCpeak);
  stim_start := piecewise( period * 1.0 , ( time_ > period * 1.0) && (time_ <= period * 2.0 ), period * 2.0 , ( time_ > period * 2.0) && (time_ <= period * 3.0 ), period * 3.0 , ( time_ > period * 3.0) && (time_ <= period * 4.0 ), period * 4.0 , ( time_ > period * 4.0) && (time_ <= period * 5.0 ), 0.0 );
  I_stim := piecewise( Gcouple * delta_VICC , local_time < t_ICCpeak , Gcouple * delta_VICC * ( 1.0 / ( 1.0 + exp(( local_time - 8000 ) / 1000 ))) , ( local_time >= t_ICCpeak) && (local_time <= t_ICCplateau ), Gcouple * V_decay * ( 1.0 / ( 1.0 + exp(( local_time - 8000 ) / 150 ))) , ( local_time > t_ICCplateau) && (local_time < t_ICC_stimulus ), 0.0 );

  // Variable initializations:
  period = 20000;
  delta_VICC = 59;
  t_ICCpeak = 98;
  t_ICCplateau = 7582;
  t_ICC_stimulus = 10000;
  V_decay = 37.25;
end

model SM_model____main()

  // Sub-modules, and any changes to those submodules:
  Time_: SM_model__Time(time_);
  Neural_input: SM_model__Neural_input(Ach);
  Gap_junction: SM_model__Gap_junction(Gcouple);
  Environment: SM_model__Environment(T, T_exp, F, R, Q10Ca, Q10K, Q10Na, Ca_o, Na_o, K_o, Cl_o, T_correction_Na, T_correction_K, T_correction_Ca, T_correction_BK, FoRT, RToF);
  SM_Membrane: SM_model__SM_Membrane(Vol_SM, Vm_SM, time_, Ca_i, Na_i, K_i, Ca_o, Ach, Na_o, K_o, Cl_o, T_correction_Ca, T_correction_Na, T_correction_K, T_correction_BK, RToF, FoRT, F, I_Na_SM, I_Ltype_SM, I_LVA_SM, I_kr_SM, I_ka_SM, I_BK_SM, I_NSCC_SM, I_bk_SM, J_CaSR_SM, I_stim0);
  I_stim: SM_model__I_stim(time_, Gcouple, I_stim0);
end
