//Created by libAntimony v1.3
model cellmlmod_environment()

  //Other declarations:
  var time;
end

model cellmlmod_Rs()

  // Rate Rules:
  Rs' = v3 - v1

  // Variable initializations:
  Rs = 11100;

  //Other declarations:
  var Rs, v1, v3, time;
end

model cellmlmod_RL()

  // Rate Rules:
  RL' = v1 - v2 - v4

  // Variable initializations:
  RL = 0;

  //Other declarations:
  var RL, v1, v2, v4, time;
end

model cellmlmod_Ri()

  // Rate Rules:
  Ri' = v2 + v3 + v6

  // Variable initializations:
  Ri = 3900;

  //Other declarations:
  var Ri, v2, v3, v6, time;
end

model cellmlmod_L()

  // Rate Rules:
  L' = -(v1)

  // Variable initializations:
  L = 0.0000001;

  //Other declarations:
  var L, v1, time;
end

model cellmlmod_R2L2()

  // Rate Rules:
  R2L2' = v4 - v5 - v7

  // Variable initializations:
  R2L2 = 0;

  //Other declarations:
  var R2L2, v4, v5, v7, time;
end

model cellmlmod_R2_CPP()

  // Rate Rules:
  R2_CPP' = v7 - v8

  // Variable initializations:
  R2_CPP = 0;

  //Other declarations:
  var R2_CPP, v7, v8, time;
end

model cellmlmod_Li()

  // Rate Rules:
  Li' = v2 + v6

  // Variable initializations:
  Li = 0;

  //Other declarations:
  var Li, v2, v6, time;
end

model cellmlmod_R2i()

  // Rate Rules:
  R2i' = v5 + v8 - v6

  // Variable initializations:
  R2i = 0;

  //Other declarations:
  var R2i, v5, v6, v8, time;
end

model cellmlmod_Shc()

  // Rate Rules:
  Shc' = v10 - v9

  // Variable initializations:
  Shc = 30000;

  //Other declarations:
  var Shc, v9, v10, time;
end

model cellmlmod_ShcP()

  // Rate Rules:
  ShcP' = v27 - v10 - v11

  // Variable initializations:
  ShcP = 0;

  //Other declarations:
  var ShcP, v10, v11, v27, time;
end

model cellmlmod_ShcGS()

  // Rate Rules:
  ShcGS' = v13 + v11 - v27 - v12

  // Variable initializations:
  ShcGS = 0;

  //Other declarations:
  var ShcGS, v13, v11, v27, v12, time;
end

model cellmlmod_GS()

  // Rate Rules:
  GS' = v28 - v11

  // Variable initializations:
  GS = 20000;

  //Other declarations:
  var GS, v28, v11, time;
end

model cellmlmod_GSP()

  // Rate Rules:
  GSP' = v27 - v28

  // Variable initializations:
  GSP = 0;

  //Other declarations:
  var GSP, v27, v28, time;
end

model cellmlmod_RasGDP()

  // Rate Rules:
  RasGDP' = v15 - v12

  // Variable initializations:
  RasGDP = 19800;

  //Other declarations:
  var RasGDP, v15, v12, time;
end

model cellmlmod_Ras_ShcGS()

  // Rate Rules:
  Ras_ShcGS' = v12 - v13

  // Variable initializations:
  Ras_ShcGS = 0;

  //Other declarations:
  var Ras_ShcGS, v12, v13, time;
end

model cellmlmod_RasGTP()

  // Rate Rules:
  RasGTP' = v13 + v17 - v14 - v16

  // Variable initializations:
  RasGTP = 200;

  //Other declarations:
  var RasGTP, RasGDP, v13, v17, v14, v16, time;
end

model cellmlmod_GAP()

  // Rate Rules:
  GAP' = v15 - v14

  // Variable initializations:
  GAP = 15000;

  //Other declarations:
  var GAP, v15, v14, time;
end

model cellmlmod_Ras_GAP()

  // Rate Rules:
  Ras_GAP' = v14 - v15

  // Variable initializations:
  Ras_GAP = 0;

  //Other declarations:
  var Ras_GAP, v14, v15, time;
end

model cellmlmod_Raf()

  // Rate Rules:
  Raf' = v18 - v16

  // Variable initializations:
  Raf = 10000;

  //Other declarations:
  var Raf, v18, v16, time;
end

model cellmlmod_Ras_Raf()

  // Rate Rules:
  Ras_Raf' = v16 - v17

  // Variable initializations:
  Ras_Raf = 0;

  //Other declarations:
  var Ras_Raf, v16, v17, time;
end

model cellmlmod_Rafa()

  // Rate Rules:
  Rafa' = v17 - v19 - v21 - v18

  // Variable initializations:
  Rafa = 0;

  //Other declarations:
  var Rafa, v17, v18, v19, v21, time;
end

model cellmlmod_MEK()

  // Rate Rules:
  MEK' = v20 - v19

  // Variable initializations:
  MEK = 360000;

  //Other declarations:
  var MEK, v20, v19, time;
end

model cellmlmod_MEKP()

  // Rate Rules:
  MEKP' = v19 + v22 - v20 - v21

  // Variable initializations:
  MEKP = 0;

  //Other declarations:
  var MEKP, v19, v20, v21, v22, time;
end

model cellmlmod_MEKPP()

  // Rate Rules:
  MEKPP' = v21 - v22

  // Variable initializations:
  MEKPP = 0;

  //Other declarations:
  var MEKPP, v21, v22, time;
end

model cellmlmod_ERK()

  // Rate Rules:
  ERK' = v24 - v23

  // Variable initializations:
  ERK = 750000;

  //Other declarations:
  var ERK, v24, v23, time;
end

model cellmlmod_ERKP()

  // Rate Rules:
  ERKP' = v23 + v26 - v24 - v25

  // Variable initializations:
  ERKP = 0;

  //Other declarations:
  var ERKP, v23, v26, v24, v25, time;
end

model cellmlmod_ERKPP()

  // Rate Rules:
  ERKPP' = v25 - v26

  // Variable initializations:
  ERKPP = 0;

  //Other declarations:
  var ERKPP, v25, v26, time;
end

model cellmlmod_t()

  // Rate Rules:
  t' = v29

  // Variable initializations:
  t = 0;

  //Other declarations:
  var t, v29, time;
end

model cellmlmod_X()

  // Rate Rules:
  X' = v30

  // Variable initializations:
  X = 0;

  //Other declarations:
  var X, v30, time;
end

model cellmlmod_v1()

  // Assignment Rules:
  v1 := k1 * Rs * L - kn1 * RL

  // Variable initializations:
  k1 = 384210000;
  kn1 = 0.73;

  //Other declarations:
  var v1, Rs, L, RL, k1, kn1;
end

model cellmlmod_v2()

  // Assignment Rules:
  v2 := f * k2 * (E + (1  - E) * (1  - exp(-(power(t / DT, 3 ))))) * RL

  // Variable initializations:
  DT = 6.5;
  E = 0.12;
  k2 = 0.7;
  f = 0.2;

  //Other declarations:
  var v2, RL, t, DT, E, k2, f;
end

model cellmlmod_v3()

  // Assignment Rules:
  v3 := k3 * Ri - f * kn3 * (E + (1  - E) * (1  - exp(-(power(t / DT, 3 ))))) * Rs

  // Variable initializations:
  DT = 6.5;
  E = 0.12;
  kn3 = 0.7;
  f = 0.2;
  k3 = 0.0484;

  //Other declarations:
  var v3, Rs, Ri, t, DT, E, kn3, f, k3;
end

model cellmlmod_v4()

  // Assignment Rules:
  v4 := k4 * RL * RL - k2_4 * R2L2

  // Variable initializations:
  k2_4 = 0.0000001;
  k4 = 0.001383;

  //Other declarations:
  var v4, RL, R2L2, k2_4, k4;
end

model cellmlmod_v5()

  // Assignment Rules:
  v5 := f * k5 * (E + (1  - E) * (1  - exp(-(power(t / DT, 3 ))))) * R2L2

  // Variable initializations:
  DT = 6.5;
  E = 0.12;
  k5 = 0.35;
  f = 0.2;

  //Other declarations:
  var v5, R2L2, t, DT, E, k5, f;
end

model cellmlmod_v6()

  // Assignment Rules:
  v6 := k6 * (E + (1  - E) * (1  - exp(-(power(t / DT, 3 ))))) * R2i

  // Variable initializations:
  DT = 6.5;
  E = 0.12;
  k6 = 0.35;

  //Other declarations:
  var v6, R2i, t, DT, E, k6;
end

model cellmlmod_v7()

  // Assignment Rules:
  v7 := k7 * f * R2L2 - kn7 * R2_CPP

  // Variable initializations:
  k7 = 1;
  f = 0.2;
  kn7 = 0.000347;

  //Other declarations:
  var v7, R2L2, R2_CPP, k7, f, kn7;
end

model cellmlmod_v8()

  // Assignment Rules:
  v8 := k8 * (E + (1  - E) * (1  - exp(-(power(t / DT, 3 ))))) * R2_CPP

  // Variable initializations:
  DT = 6.5;
  E = 0.12;
  k8 = 0.35;

  //Other declarations:
  var v8, R2_CPP, t, DT, E, k8;
end

model cellmlmod_v9()

  // Assignment Rules:
  v9 := k9 * 2  * (R2L2 + R2i + R2_CPP) * Shc / (K_9 + Shc)

  // Variable initializations:
  k9 = 12;
  K_9 = 6000;

  //Other declarations:
  var v9, R2L2, R2i, R2_CPP, Shc, k9, K_9;
end

model cellmlmod_v10()

  // Assignment Rules:
  v10 := V_10 * ShcP / (K_10 + ShcP)

  // Variable initializations:
  V_10 = 300000;
  K_10 = 6000;

  //Other declarations:
  var v10, ShcP, V_10, K_10;
end

model cellmlmod_v11()

  // Assignment Rules:
  v11 := k11 * ShcP * GS - kn11 * ShcGS

  // Variable initializations:
  k11 = 0.002;
  kn11 = 3.81;

  //Other declarations:
  var v11, ShcP, GS, ShcGS, k11, kn11;
end

model cellmlmod_v12()

  // Assignment Rules:
  v12 := k12 * RasGDP * ShcGS - kn12 * Ras_ShcGS

  // Variable initializations:
  k12 = 0.0163;
  kn12 = 10;

  //Other declarations:
  var v12, RasGDP, ShcGS, Ras_ShcGS, k12, kn12;
end

model cellmlmod_v13()

  // Assignment Rules:
  v13 := k_13 * Ras_ShcGS

  // Variable initializations:
  k_13 = 15;

  //Other declarations:
  var v13, Ras_ShcGS, k_13;
end

model cellmlmod_v14()

  // Assignment Rules:
  v14 := k14 * RasGTP * GAP - kn14 * Ras_GAP

  // Variable initializations:
  k14 = 0.005;
  kn14 = 60;

  //Other declarations:
  var v14, RasGTP, GAP, Ras_GAP, k14, kn14;
end

model cellmlmod_v15()

  // Assignment Rules:
  v15 := k15 * Ras_GAP

  // Variable initializations:
  k15 = 720;

  //Other declarations:
  var v15, Ras_GAP, k15;
end

model cellmlmod_v16()

  // Assignment Rules:
  v16 := k16 * RasGTP * Raf - kn16 * Ras_Raf

  // Variable initializations:
  k16 = 0.0012;
  kn16 = 3;

  //Other declarations:
  var v16, RasGTP, Raf, Ras_Raf, k16, kn16;
end

model cellmlmod_v17()

  // Assignment Rules:
  v17 := k17 * Ras_Raf

  // Variable initializations:
  k17 = 27;

  //Other declarations:
  var v17, Ras_Raf, k17;
end

model cellmlmod_v18()

  // Assignment Rules:
  v18 := V_18 * Rafa / (K_18 + Rafa)

  // Variable initializations:
  V_18 = 97000;
  K_18 = 6000;

  //Other declarations:
  var v18, Rafa, V_18, K_18;
end

model cellmlmod_v19()

  // Assignment Rules:
  v19 := Rafa * MEK * k19 / (K_19 + MEK)

  // Variable initializations:
  k19 = 50;
  K_19 = 9000;

  //Other declarations:
  var v19, Rafa, MEK, k19, K_19;
end

model cellmlmod_v20()

  // Assignment Rules:
  v20 := V_20 * MEKP / (K_20 + MEKP)

  // Variable initializations:
  V_20 = 920000;
  K_20 = 600000;

  //Other declarations:
  var v20, MEKP, V_20, K_20;
end

model cellmlmod_v21()

  // Assignment Rules:
  v21 := Rafa * MEKP * k21 / (K_21 + MEKP)

  // Variable initializations:
  k21 = 50;
  K_21 = 9000;

  //Other declarations:
  var v21, Rafa, MEKP, k21, K_21;
end

model cellmlmod_v22()

  // Assignment Rules:
  v22 := V_22 * MEKPP / (K_22 + MEKPP)

  // Variable initializations:
  V_22 = 920000;
  K_22 = 600000;

  //Other declarations:
  var v22, MEKPP, V_22, K_22;
end

model cellmlmod_v23()

  // Assignment Rules:
  v23 := k23 * ERK * (MEKP + MEKPP) / (K_23 + ERK)

  // Variable initializations:
  k23 = 8.3;
  K_23 = 90000;

  //Other declarations:
  var v23, ERK, MEKP, MEKPP, k23, K_23;
end

model cellmlmod_v24()

  // Assignment Rules:
  v24 := V_24 * ERKP / (K_24 + ERKP)

  // Variable initializations:
  V_24 = 200000;
  K_24 = 600000;

  //Other declarations:
  var v24, ERKP, V_24, K_24;
end

model cellmlmod_v25()

  // Assignment Rules:
  v25 := k25 * ERKP * (MEKP + MEKPP) / (K_25 + ERKP)

  // Variable initializations:
  k25 = 8.3;
  K_25 = 90000;

  //Other declarations:
  var v25, ERKP, MEKP, MEKPP, k25, K_25;
end

model cellmlmod_v26()

  // Assignment Rules:
  v26 := V_26 * ERKPP / (K_26 + ERKPP)

  // Variable initializations:
  V_26 = 400000;
  K_26 = 600000;

  //Other declarations:
  var v26, ERKPP, V_26, K_26;
end

model cellmlmod_v27()

  // Assignment Rules:
  v27 := ERKPP * ShcGS * k27 / (K_27 + ShcGS)

  // Variable initializations:
  k27 = 1.6;
  K_27 = 600000;

  //Other declarations:
  var v27, ERKPP, ShcGS, k27, K_27;
end

model cellmlmod_v28()

  // Assignment Rules:
  v28 := V_28 * GSP / (K_28 + GSP)

  // Variable initializations:
  V_28 = 75;
  K_28 = 20000;

  //Other declarations:
  var v28, GSP, V_28, K_28;
end

model cellmlmod_v29()

  // Assignment Rules:
  v29 := v_1

  // Variable initializations:
  v_1 = 1;

  //Other declarations:
  var v29, v_1;
end

model cellmlmod_v30()

  // Assignment Rules:
  v30 := k_11 * t

  // Variable initializations:
  k_11 = 0;

  //Other declarations:
  var v30, t, k_11;
end

model brightman_fell_2000()

  // Sub-modules, and any changes to those submodules:
  environment: cellmlmod_environment()
  Rs: cellmlmod_Rs()
  RL: cellmlmod_RL()
  Ri: cellmlmod_Ri()
  L: cellmlmod_L()
  R2L2: cellmlmod_R2L2()
  R2_CPP: cellmlmod_R2_CPP()
  Li: cellmlmod_Li()
  R2i: cellmlmod_R2i()
  Shc: cellmlmod_Shc()
  ShcP: cellmlmod_ShcP()
  ShcGS: cellmlmod_ShcGS()
  GS: cellmlmod_GS()
  GSP: cellmlmod_GSP()
  RasGDP: cellmlmod_RasGDP()
  Ras_ShcGS: cellmlmod_Ras_ShcGS()
  RasGTP: cellmlmod_RasGTP()
  GAP: cellmlmod_GAP()
  Ras_GAP: cellmlmod_Ras_GAP()
  Raf: cellmlmod_Raf()
  Ras_Raf: cellmlmod_Ras_Raf()
  Rafa: cellmlmod_Rafa()
  MEK: cellmlmod_MEK()
  MEKP: cellmlmod_MEKP()
  MEKPP: cellmlmod_MEKPP()
  ERK: cellmlmod_ERK()
  ERKP: cellmlmod_ERKP()
  ERKPP: cellmlmod_ERKPP()
  t: cellmlmod_t()
  X: cellmlmod_X()
  v1: cellmlmod_v1()
  v2: cellmlmod_v2()
  v3: cellmlmod_v3()
  v4: cellmlmod_v4()
  v5: cellmlmod_v5()
  v6: cellmlmod_v6()
  v7: cellmlmod_v7()
  v8: cellmlmod_v8()
  v9: cellmlmod_v9()
  v10: cellmlmod_v10()
  v11: cellmlmod_v11()
  v12: cellmlmod_v12()
  v13: cellmlmod_v13()
  v14: cellmlmod_v14()
  v15: cellmlmod_v15()
  v16: cellmlmod_v16()
  v17: cellmlmod_v17()
  v18: cellmlmod_v18()
  v19: cellmlmod_v19()
  v20: cellmlmod_v20()
  v21: cellmlmod_v21()
  v22: cellmlmod_v22()
  v23: cellmlmod_v23()
  v24: cellmlmod_v24()
  v25: cellmlmod_v25()
  v26: cellmlmod_v26()
  v27: cellmlmod_v27()
  v28: cellmlmod_v28()
  v29: cellmlmod_v29()
  v30: cellmlmod_v30()
  Rs.time is environment.time;
  RL.time is environment.time;
  Ri.time is environment.time;
  L.time is environment.time;
  R2L2.time is environment.time;
  R2_CPP.time is environment.time;
  Li.time is environment.time;
  R2i.time is environment.time;
  Shc.time is environment.time;
  ShcP.time is environment.time;
  ShcGS.time is environment.time;
  GS.time is environment.time;
  GSP.time is environment.time;
  RasGDP.time is environment.time;
  Ras_ShcGS.time is environment.time;
  RasGTP.time is environment.time;
  GAP.time is environment.time;
  Ras_GAP.time is environment.time;
  Raf.time is environment.time;
  Ras_Raf.time is environment.time;
  Rafa.time is environment.time;
  MEK.time is environment.time;
  MEKP.time is environment.time;
  MEKPP.time is environment.time;
  ERK.time is environment.time;
  ERKP.time is environment.time;
  ERKPP.time is environment.time;
  t.time is environment.time;
  X.time is environment.time;
  Rs.Rs is v1.Rs;
  Rs.v1 is v1.v1;
  v1.Rs is v3.Rs;
  Rs.v3 is v3.v3;
  RL.RL is v1.RL;
  RL.v1 is v1.v1;
  v1.RL is v2.RL;
  RL.v2 is v2.v2;
  v2.RL is v4.RL;
  RL.v4 is v4.v4;
  Ri.v2 is v2.v2;
  Ri.v3 is v3.v3;
  Ri.Ri is v3.Ri;
  Ri.v6 is v6.v6;
  L.L is v1.L;
  L.v1 is v1.v1;
  R2L2.R2L2 is v4.R2L2;
  R2L2.v4 is v4.v4;
  v4.R2L2 is v5.R2L2;
  R2L2.v5 is v5.v5;
  v5.R2L2 is v7.R2L2;
  R2L2.v7 is v7.v7;
  v7.R2L2 is v9.R2L2;
  R2_CPP.R2_CPP is v7.R2_CPP;
  R2_CPP.v7 is v7.v7;
  v7.R2_CPP is v8.R2_CPP;
  R2_CPP.v8 is v8.v8;
  v8.R2_CPP is v9.R2_CPP;
  Li.v2 is v2.v2;
  Li.v6 is v6.v6;
  R2i.v5 is v5.v5;
  R2i.R2i is v6.R2i;
  R2i.v6 is v6.v6;
  R2i.v8 is v8.v8;
  v6.R2i is v9.R2i;
  Shc.Shc is v9.Shc;
  Shc.v9 is v9.v9;
  Shc.v10 is v10.v10;
  ShcP.ShcP is v10.ShcP;
  ShcP.v10 is v10.v10;
  v10.ShcP is v11.ShcP;
  ShcP.v11 is v11.v11;
  ShcP.v27 is v27.v27;
  ShcGS.ShcGS is v11.ShcGS;
  ShcGS.v11 is v11.v11;
  ShcGS.v13 is v13.v13;
  v11.ShcGS is v27.ShcGS;
  ShcGS.v27 is v27.v27;
  v27.ShcGS is v12.ShcGS;
  ShcGS.v12 is v12.v12;
  GS.v28 is v28.v28;
  GS.GS is v11.GS;
  GS.v11 is v11.v11;
  GSP.v27 is v27.v27;
  GSP.GSP is v28.GSP;
  GSP.v28 is v28.v28;
  RasGDP.v15 is v15.v15;
  RasGDP.RasGDP is v12.RasGDP;
  RasGDP.v12 is v12.v12;
  Ras_ShcGS.Ras_ShcGS is v12.Ras_ShcGS;
  Ras_ShcGS.v12 is v12.v12;
  v12.Ras_ShcGS is v13.Ras_ShcGS;
  Ras_ShcGS.v13 is v13.v13;
  RasGTP.RasGDP is v12.RasGDP;
  RasGTP.v13 is v13.v13;
  RasGTP.v17 is v17.v17;
  RasGTP.RasGTP is v14.RasGTP;
  RasGTP.v14 is v14.v14;
  v14.RasGTP is v16.RasGTP;
  RasGTP.v16 is v16.v16;
  GAP.v15 is v15.v15;
  GAP.GAP is v14.GAP;
  GAP.v14 is v14.v14;
  Ras_GAP.Ras_GAP is v14.Ras_GAP;
  Ras_GAP.v14 is v14.v14;
  v14.Ras_GAP is v15.Ras_GAP;
  Ras_GAP.v15 is v15.v15;
  Raf.v18 is v18.v18;
  Raf.Raf is v16.Raf;
  Raf.v16 is v16.v16;
  Ras_Raf.Ras_Raf is v16.Ras_Raf;
  Ras_Raf.v16 is v16.v16;
  v16.Ras_Raf is v17.Ras_Raf;
  Ras_Raf.v17 is v17.v17;
  Rafa.Rafa is v18.Rafa;
  Rafa.v18 is v18.v18;
  v18.Rafa is v19.Rafa;
  Rafa.v19 is v19.v19;
  v19.Rafa is v21.Rafa;
  Rafa.v21 is v21.v21;
  Rafa.v17 is v17.v17;
  MEK.v20 is v20.v20;
  MEK.v19 is v19.v19;
  MEK.MEK is v19.MEK;
  MEKP.v19 is v19.v19;
  MEKP.v20 is v20.v20;
  MEKP.MEKP is v20.MEKP;
  v20.MEKP is v21.MEKP;
  MEKP.v21 is v21.v21;
  MEKP.v22 is v22.v22;
  v21.MEKP is v23.MEKP;
  v23.MEKP is v25.MEKP;
  MEKPP.v21 is v21.v21;
  MEKPP.MEKPP is v22.MEKPP;
  MEKPP.v22 is v22.v22;
  v22.MEKPP is v23.MEKPP;
  v23.MEKPP is v25.MEKPP;
  ERK.v24 is v24.v24;
  ERK.ERK is v23.ERK;
  ERK.v23 is v23.v23;
  ERKP.v23 is v23.v23;
  ERKP.v26 is v26.v26;
  ERKP.ERKP is v24.ERKP;
  ERKP.v24 is v24.v24;
  v24.ERKP is v25.ERKP;
  ERKP.v25 is v25.v25;
  ERKPP.v25 is v25.v25;
  ERKPP.ERKPP is v26.ERKPP;
  ERKPP.v26 is v26.v26;
  v26.ERKPP is v27.ERKPP;
  t.v29 is v29.v29;
  t.t is v2.t;
  v2.t is v3.t;
  v3.t is v5.t;
  v5.t is v6.t;
  v6.t is v8.t;
  v8.t is v30.t;
  X.v30 is v30.v30;
end
