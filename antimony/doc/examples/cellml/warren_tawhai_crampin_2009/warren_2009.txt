//Created by libAntimony v1.4
model warren_2009__environment(time_)
end

model warren_2009__volume_i(volume_i0, volume_i)

  // Assignment Rules:
  volume_i := volume_i0;

  // Variable initializations:
  volume_i0 = 1450;
end

model warren_2009__volume_er(volume_i, volume_er)

  // Assignment Rules:
  volume_er := volume_i / gamma;

  // Variable initializations:
  gamma = 4.9;
end

model warren_2009__volumeCa_i(volumeCa_i, volume_i, Jipt, Jryr, Jer, Jserca, Jin, Jpm, time_)

  // Rate Rules:
  volumeCa_i' = Jipt + Jryr + Jer - Jserca + (Jin - Jpm);

  // Variable initializations:
  volumeCa_i = 75.8335890358239;
end

model warren_2009__Ca_i(Ca_i, volume_i, volumeCa_i)

  // Assignment Rules:
  Ca_i := volumeCa_i / volume_i;
end

model warren_2009__volumeCa_er(volumeCa_er, volume_er, Jipt, Jryr, Jer, Jserca, time_)

  // Rate Rules:
  volumeCa_er' = -((Jipt + Jryr + Jer - Jserca));

  // Variable initializations:
  volumeCa_er = 1199.73747802144;
end

model warren_2009__Ca_er(Ca_er, volume_er, volumeCa_er)

  // Assignment Rules:
  Ca_er := volumeCa_er / volume_er;
end

model warren_2009__volume_iIP3(volume_iIP3, volume_i, J_ip3P, J_ip3D, time_)

  // Rate Rules:
  volume_iIP3' = (J_ip3P - J_ip3D) * volume_i;

  // Variable initializations:
  volume_iIP3 = -3.28287434380887e-93;
end

model warren_2009__IP3(IP3, volume_i, volume_iIP3)

  // Assignment Rules:
  IP3 := volume_iIP3 / volume_i;
end

model warren_2009__PIP2(PIP2, J_ip3P, J_ip3R, IPX, time_)

  // Rate Rules:
  PIP2' = J_ip3R * IPX - J_ip3P / PIP2_Total;

  // Variable initializations:
  PIP2 = 1;
  PIP2_Total = 5;
end

model warren_2009__IPX(IPX, PIP2, IP3)

  // Assignment Rules:
  IPX := 1 - IP3 / PIP2_Total - PIP2;

  // Variable initializations:
  PIP2_Total = 25;
end

model warren_2009__J_ip3R(J_ip3R)

  // Assignment Rules:
  J_ip3R := J_ip3R0;

  // Variable initializations:
  J_ip3R0 = 10;
end

model warren_2009__receptor(ATP_e, time_, V_IP3, V_mech, C_1, C_2, C_3, C_4)

  // Assignment Rules:
  V_IP3 := C_1 * ATP_e / (C_2 + ATP_e) + C_3 * power(ATP_e, 2 ) / (power(C_4, 2 ) + power(ATP_e, 2 ));
  V_mech := piecewise( V_mech0 , (( time_ > 10) && (time_ < 25) && (MechanicalStimulation > 0 )), 0 );

  // Rate Rules:
  ATP_e' = -(V_ATP) * ATP_e / (K_ATP + ATP_e);

  // Variable initializations:
  ATP_e = 0;
  MechanicalStimulation = 0;
  V_mech0 = 1;
  C_1 = 2.6;
  C_2 = 0.02;
  C_3 = 2.3;
  C_4 = 10;
  V_ATP = 0.001;
  K_ATP = 0.0001;
end

model warren_2009__J_ip3P(J_ip3P, V_IP3, PIP2)

  // Assignment Rules:
  J_ip3P := V_IP3 * PIP2;
end

model warren_2009__J_ip3D(J_ip3D, IP3, volume_i0, Ca_i)

  // Assignment Rules:
  J_ip3D := (Beta_1 + Beta_2 * power(F_Ca, 2 )) * IP3 / (K_IP3 + IP3);
  F_Ca := Ca_i / (K_rc + Ca_i);

  // Variable initializations:
  Beta_1 = 0;
  Beta_2 = 36;
  K_rc = 0.3;
  K_IP3 = 0.01;
end

model warren_2009__Jipt(Jipt, Ca_i, Ca_er, O, volume_i0)

  // Assignment Rules:
  Jipt := Jipt0 * volume_i0 * Pipt * (Ca_er - Ca_i);
  Pipt := power(O, 4 );

  // Variable initializations:
  Jipt0 = 28;
end

model warren_2009__Jryr(Ca_i, Ca_er, volume_i0, Jryr)

  // Assignment Rules:
  Jryr := Jryr0 * volume_i0 * (Ca_er - Ca_i);
  Pryr := W_inf * (1 + power(Ka / Ca_i, 4 ) + power(Ca_i / Kb, 3 )) / (1 + 1 / Kc + power(Ca_i / Kb, 3 ) + power(Ka / Ca_i, 4 ));
  W_inf := (1 + power(Ka / Ca_i, 4 ) + power(Ca_i / Kb, 3 )) / (1 + 1 / Kc + power(Ca_i / Kb, 3 ) + power(Ka / Ca_i, 4 ));

  // Variable initializations:
  Ka = 0.3722419;
  Kb = 0.636005;
  Kc = 0.0571428;
  Jryr0 = 0;
end

model warren_2009__Jer(Jer, Ca_i, Ca_er, volume_i0)

  // Assignment Rules:
  Jer := Jer0 * volume_i0 * (Ca_er - Ca_i);

  // Variable initializations:
  Jer0 = 0.0035;
end

model warren_2009__Jserca(Jserca, Ca_i, Ca_er, volume_i0)

  // Assignment Rules:
  Jserca := volume_i0 * Vserca * power(Ca_i, 2 ) / (power(Kserca, 2 ) + power(Ca_i, 2 )) * 1 / Ca_er;

  // Variable initializations:
  Vserca = 0.09;
  Kserca = 0.04;
end

model warren_2009__Jin(Jin, Ca_i, Ca_er, volume_i0, V_mech)

  // Assignment Rules:
  Jin := Jin_1 + Jin_2;
  V_Ca := R * T / (z_Ca * F) * ln(Ca_ext / Ca_i);
  Iin_1 := volume_i0 * P_pm_1 * (V_Ca - Vm);
  Iin_2 := volume_i0 * P_pm_2 * V_mech * (V_Ca - Vm);
  Jin_1 := Iin_1 / (z_Ca * F);
  Jin_2 := Iin_2 / (z_Ca * F);

  // Variable initializations:
  Vm = -39;
  R = 8314;
  T = 310;
  F = 96485;
  z_Ca = 2;
  Ca_ext = 1300;
  P_pm_1 = 0.6;
  P_pm_2 = 28;
end

model warren_2009__Jpm(Jpm, Ca_i, volume_i0)

  // Assignment Rules:
  Jpm := Vpm * volume_i0 * power(Ca_i, 2 ) / (power(Kpm, 2 ) + power(Ca_i, 2 ));

  // Variable initializations:
  Vpm = 0.072;
  Kpm = 0.6;
end

model warren_2009__O(O, I1, I2, IP3, k1, k1_, k2, time_)

  // Assignment Rules:
  S := 1 - (O + I1 + I2);

  // Rate Rules:
  O' = k1 * IP3 * S - (k1_ * O + k2 * O);

  // Variable initializations:
  O = -2.42013500345263e-89;
end

model warren_2009__I1(I1, O, k2, k3, k4, time_)

  // Rate Rules:
  I1' = k2 * O - (k3 + k4) * I1;

  // Variable initializations:
  I1 = 2.24343309680416e-81;
end

model warren_2009__I2(I2, I1, k4, k5, time_)

  // Rate Rules:
  I2' = k4 * I1 - k5 * I2;

  // Variable initializations:
  I2 = 1.01276768045278e-40;
end

model warren_2009__constants(k1, k1_, k2, k3, k4, k5, IP3, Ca_i)

  // Assignment Rules:
  k1 := alpha_1 * power(Ca_i, 3 ) / (power(beta_1, 3 ) + power(Ca_i, 3 ));
  k4 := alpha_4 * IP3 / (beta_4 + IP3);

  // Variable initializations:
  k1_ = 0.88;
  k2 = 0.5;
  k3 = 0.5;
  k5 = 0.02;
  alpha_1 = 40;
  beta_1 = 0.8;
  alpha_4 = 0.06;
  beta_4 = 0.01;
end

model warren_2009____main()

  // Sub-modules, and any changes to those submodules:
  environment: warren_2009__environment(time_);
  volume_i: warren_2009__volume_i(volume_i0, volume_i1);
  volume_er: warren_2009__volume_er(volume_i1, volume_er0);
  volumeCa_i: warren_2009__volumeCa_i(volumeCa_i0, volume_i1, Jipt0, Jryr0, Jer0, Jserca0, Jin0, Jpm0, time_);
  Ca_i: warren_2009__Ca_i(Ca_i0, volume_i1, volumeCa_i0);
  volumeCa_er: warren_2009__volumeCa_er(volumeCa_er0, volume_er0, Jipt0, Jryr0, Jer0, Jserca0, time_);
  Ca_er: warren_2009__Ca_er(Ca_er0, volume_er0, volumeCa_er0);
  volume_iIP3: warren_2009__volume_iIP3(volume_iIP30, volume_i1, J_ip3P0, J_ip3D0, time_);
  IP3: warren_2009__IP3(IP30, volume_i1, volume_iIP30);
  PIP2: warren_2009__PIP2(PIP20, J_ip3P0, J_ip3R0, IPX0, time_);
  IPX: warren_2009__IPX(IPX0, PIP20, IP30);
  J_ip3R: warren_2009__J_ip3R(J_ip3R0);
  receptor: warren_2009__receptor(ATP_e, time_, V_IP3, V_mech, C_1, C_2, C_3, C_4);
  J_ip3P: warren_2009__J_ip3P(J_ip3P0, V_IP3, PIP20);
  J_ip3D: warren_2009__J_ip3D(J_ip3D0, IP30, volume_i0, Ca_i0);
  Jipt: warren_2009__Jipt(Jipt0, Ca_i0, Ca_er0, O0, volume_i0);
  Jryr: warren_2009__Jryr(Ca_i0, Ca_er0, volume_i0, Jryr0);
  Jer: warren_2009__Jer(Jer0, Ca_i0, Ca_er0, volume_i0);
  Jserca: warren_2009__Jserca(Jserca0, Ca_i0, Ca_er0, volume_i0);
  Jin: warren_2009__Jin(Jin0, Ca_i0, Ca_er0, volume_i0, V_mech);
  Jpm: warren_2009__Jpm(Jpm0, Ca_i0, volume_i0);
  O: warren_2009__O(O0, I10, I20, IP30, k1, k1_, k2, time_);
  I1: warren_2009__I1(I10, O0, k2, k3, k4, time_);
  I2: warren_2009__I2(I20, I10, k4, k5, time_);
  constants: warren_2009__constants(k1, k1_, k2, k3, k4, k5, IP30, Ca_i0);
end
