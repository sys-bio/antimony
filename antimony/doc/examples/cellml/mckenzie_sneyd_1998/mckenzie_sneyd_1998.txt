//Created by libAntimony v1.3

//Warnings from automatic translation:
//    Unable to translate an assignment to "del( P )/del( time )" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).
//    Unable to translate an assignment to "del( c )/del( time )" in the Antimony format because Antimony does not handle partial differential equations (though neither do existing CellML tools).

model mckenzie_1998_version01__environment(time_)
end

model mckenzie_1998_version01__IP3(P, time_)

  // Variable initializations:
  P = 0.0;
  D_P = 300.0;
end

model mckenzie_1998_version01__calcium(c, time_, J_channel, J_pump, J_leak)

  // Variable initializations:
  c = 0.3;
  D_c = 20.0;
end

model mckenzie_1998_version01__IP3_receptor_h_gate(h, c, time_)

  // Assignment Rules:
  h_infinity := power( k2 , 2.0 ) / (power( k2 , 2.0 ) + power( c , 2.0 ));

  // Rate Rules:
  h' = ( h_infinity - h ) / tau_h;

  // Variable initializations:
  tau_h = 2.0;
  k2 = 0.7;
end

model mckenzie_1998_version01__IP3_receptor(J_channel, time_, c, P, h)

  // Sub-modules, and any changes to those submodules:
  IP3_receptor_h_gate: mckenzie_1998_version01__IP3_receptor_h_gate(h, c, time_);

  // Assignment Rules:
  J_channel := k_flux * mu_P * h * ( b + ( 1.0 - b ) * c / ( k1 + c ));
  mu_P := mu_0 + mu_1 * P / ( k_mu + P );

  // Variable initializations:
  k_flux = 16.0;
  mu_0 = 0.29;
  mu_1 = 0.30;
  k1 = 0.7;
  k_mu = 4.0;
  b = 0.111;
end

model mckenzie_1998_version01__calcium_pump(J_pump, time_, c)

  // Assignment Rules:
  J_pump := gamma * c / ( k_gamma + c );

  // Variable initializations:
  gamma = 2.0;
  k_gamma = 0.10;
end

model mckenzie_1998_version01__calcium_leak(J_leak, time_)

  // Assignment Rules:
  J_leak := beta;

  // Variable initializations:
  beta = 0.0;
end

model mckenzie_1998_version01____main()

  // Sub-modules, and any changes to those submodules:
  environment: mckenzie_1998_version01__environment(time_);
  IP3: mckenzie_1998_version01__IP3(P, time_);
  calcium: mckenzie_1998_version01__calcium(c, time_, J_channel, J_pump, J_leak);
  IP3_receptor: mckenzie_1998_version01__IP3_receptor(J_channel, time_, c, P, h);
  calcium_pump: mckenzie_1998_version01__calcium_pump(J_pump, time_, c);
  calcium_leak: mckenzie_1998_version01__calcium_leak(J_leak, time_);
end
