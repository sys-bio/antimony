//Created by libAntimony v1.3
model roux_model_2006__environment(time_)
end

model roux_model_2006__reversal_potentials(E_Na, E_Ca, E_K, E_Cl, R, T, F, time_, Nai, Nao, Cai, Cao, Ki, Ko, Cli, Clo)

  // Assignment Rules:
  E_Na := R * T / F * ln(Nao / Nai);
  E_Ca := R * T / (2 * F) * ln(Cao / Cai);
  E_K := R * T / F * ln(Ko / Ki);
  E_Cl := R * T / F * ln(Cli / Clo);
end

model roux_model_2006__delayed_rectifier_K_current_xa_gate(xa, V, time_)

  // Assignment Rules:
  xa_infinity := 1 / (1 + exp((5.5 - V) / 6 ));
  tau_xa := 0.003262 - 0.00003552 * V;

  // Rate Rules:
  xa' = (xa_infinity - xa) / tau_xa;

  // Variable initializations:
  xa = 0.001;
end

model roux_model_2006__delayed_rectifier_K_current_xi1_gate(xi1, V, time_)

  // Assignment Rules:
  xi1_infinity := 1 / (1 + exp((V + 4.3 ) / 7.5 ));

  // Rate Rules:
  xi1' = (xi1_infinity - xi1) / tau_xi1;

  // Variable initializations:
  xi1 = 0;
  tau_xi1 = 0.25;
end

model roux_model_2006__delayed_rectifier_K_current_xi2_gate(xi2, V, time_)

  // Assignment Rules:
  xi2_infinity := 1 / (1 + exp((V + 4.3 ) / 7.5 ));

  // Rate Rules:
  xi2' = (xi2_infinity - xi2) / tau_xi2;

  // Variable initializations:
  xi2 = 0;
  tau_xi2 = 1.98;
end

model roux_model_2006__delayed_rectifier_K_current(i_Kdr, time_, V, E_K, xa, xi1, xi2)

  // Sub-modules, and any changes to those submodules:
  delayed_rectifier_K_current_xa_gate: roux_model_2006__delayed_rectifier_K_current_xa_gate(xa, V, time_);
  delayed_rectifier_K_current_xi1_gate: roux_model_2006__delayed_rectifier_K_current_xi1_gate(xi1, V, time_);
  delayed_rectifier_K_current_xi2_gate: roux_model_2006__delayed_rectifier_K_current_xi2_gate(xi2, V, time_);

  // Assignment Rules:
  i_Kdr := g_Kdr * (gamma_KSS + (xi1 + xi2) * (1 - gamma_KSS)) * power(xa, 2 ) * (V - E_K);

  // Variable initializations:
  g_Kdr = 0.035;
  gamma_KSS = 0.15;
end

model roux_model_2006__L_type_Ca_current_d_gate(d, V, time_)

  // Assignment Rules:
  alpha_d := 30 * (V + 18 ) / (1 - exp(-(0.25 ) * (V + 18 )));
  beta_d := 12 * (V + 18 ) / (exp(0.1 * (V + 18 )) - 1 );

  // Rate Rules:
  d' = alpha_d - (alpha_d + beta_d) * d;

  // Variable initializations:
  d = 0;
end

model roux_model_2006__L_type_Ca_current_f_gate(f, V, time_)

  // Assignment Rules:
  f_infinity := 1 / (1 + exp((23 + V) / 6.6 ));

  // Rate Rules:
  f' = (f_infinity - f) / tau_f;

  // Variable initializations:
  f = 1;
  tau_f = 0.0173;
end

model roux_model_2006__L_type_Ca_current(i_CaL, time_, V, Cai, Cao, R, T, F, d, f)

  // Sub-modules, and any changes to those submodules:
  L_type_Ca_current_d_gate: roux_model_2006__L_type_Ca_current_d_gate(d, V, time_);
  L_type_Ca_current_f_gate: roux_model_2006__L_type_Ca_current_f_gate(f, V, time_);

  // Assignment Rules:
  i_CaL := 4 * P_CaL * d * f * ICaL_perm2;
  ICaL_perm1 := (V - V_surf) * F / (R * T * (1 - exp(-((V - V_surf)) * 2 * F / (R * T))));
  ICaL_perm2 := ICaL_perm1 * (Cai * exp(V_surf / (0.5 * R * T / F)) - Cao * exp(-((V - V_surf)) / (0.5 * R * T / F)));

  // Variable initializations:
  P_CaL = 0.003;
  V_surf = 150;
end

model roux_model_2006__Ca_activated_K_current_xCa1_gate(xCa1, V, Cai, time_, R, T, F)

  // Assignment Rules:
  xCa1_infinity := (power(Cai, 2 ) + K4 * Cai) / (power(Cai, 2 ) + K4 * Cai * (1 + alpha / beta) + K4 * K2 * alpha / beta);
  K2 := 0.000275 * exp(-(1.51 ) * V * F / (R * T));
  K4 := 0.0000125 * exp(-(1.99 ) * V * F / (R * T));

  // Rate Rules:
  xCa1' = (xCa1_infinity - xCa1) / tau_xCa1;

  // Variable initializations:
  xCa1 = 1;
  tau_xCa1 = 1;
  alpha = 280;
  beta = 480;
end

model roux_model_2006__Ca_activated_K_current_B_gate(B, V, xCa1, Cai, time_)

  // Assignment Rules:
  K1 := 0.85 * exp(0.04 * V);
  K_1 := 0.24 * exp(-(0.012 ) * V);

  // Rate Rules:
  B' = piecewise( K1 * Cai * xCa1 - K_1 * B , Cai >= 0.1 , 1 );

  // Variable initializations:
  B = 0.001;
end

model roux_model_2006__Ca_activated_K_current(i_KCa, time_, V, Cai, E_K, R, T, F, xCa1, B)

  // Sub-modules, and any changes to those submodules:
  Ca_activated_K_current_xCa1_gate: roux_model_2006__Ca_activated_K_current_xCa1_gate(xCa1, V, Cai, time_, R, T, F);
  Ca_activated_K_current_B_gate: roux_model_2006__Ca_activated_K_current_B_gate(B, V, xCa1, Cai, time_);

  // Assignment Rules:
  i_KCa := g_KCa * xCa1 * B * (V - E_K);

  // Variable initializations:
  g_KCa = 2.45;
end

model roux_model_2006__Ca_activated_Cl_current(i_ClCa, V, Cai, E_Cl)

  // Assignment Rules:
  i_ClCa := g_Cl * (V - E_Cl) * 1 / (1 + power(CaCT / Cai, h));

  // Variable initializations:
  g_Cl = 0.01;
  CaCT = 0.0005;
  h = 3;
end

model roux_model_2006__nonspecific_cationic_current_ns_gate(ns, V, time_)

  // Assignment Rules:
  tau_ns := 0.20025 - 0.00089875 * V;
  ns_infinity := 1 / (1 + exp((V - 69.8 ) / -(11.9 )));

  // Rate Rules:
  ns' = (ns_infinity - ns) / tau_ns;

  // Variable initializations:
  ns = 1;
end

model roux_model_2006__nonspecific_cationic_current(i_cationic, time_, V, Cai, Cao, Nai, Nao, Ki, Ko, R, T, F, ns)

  // Sub-modules, and any changes to those submodules:
  nonspecific_cationic_current_ns_gate: roux_model_2006__nonspecific_cationic_current_ns_gate(ns, V, time_);

  // Assignment Rules:
  i_cationic := i_nsNa + i_nsK + i_nsCa;
  i_nsNa := ns * alpha_Ca * P_nsCa * V * power(F, 2 ) / (R * T) * (0.75 * Nai * exp(V * F / (R * T)) - 0.75 * Nao) / (exp(V * F / (R * T)) - 1 );
  i_nsK := ns * alpha_Ca * P_nsCa * V * power(F, 2 ) / (R * T) * (0.75 * Ki * exp(V * F / (R * T)) - 0.75 * Ko) / (exp(V * F / (R * T)) - 1 );
  i_nsCa := ns * alpha_Ca * P_nsCa * 4 * V * power(F, 2 ) / (R * T) * (1.5 * Cai * exp(V * F / (R * T)) - 1.5 * Cao) / (exp(V * F / (R * T)) - 1 );
  alpha_Ca := 1 / (1 + power(Km_nsCa / Cai, 3 ));

  // Variable initializations:
  P_nsCa = 0.000000175;
  Km_nsCa = 0.0012;
end

model roux_model_2006__Ca_pump_current(i_pCa, Cai)

  // Assignment Rules:
  i_pCa := i_pCamax * Cai / (Kmp_Ca + Cai);

  // Variable initializations:
  i_pCamax = 1.15;
  Kmp_Ca = 0.05;
end

model roux_model_2006__Na_K_pump_current(i_NaK, V, Nai, Ko)

  // Assignment Rules:
  i_NaK := i_NaKmax * Ko / (Ko + Km_K) * Nai / (Nai + Km_Na);

  // Variable initializations:
  i_NaKmax = 0.7;
  Km_Na = 40;
  Km_K = 1;
end

model roux_model_2006__Ca_background_current(i_bCa, V, E_Ca)

  // Assignment Rules:
  i_bCa := g_bCa * (V - E_Ca);

  // Variable initializations:
  g_bCa = 1.194e-5;
end

model roux_model_2006__K_background_current(i_bK, V, E_K)

  // Assignment Rules:
  i_bK := g_bK * (V - E_K);

  // Variable initializations:
  g_bK = 0.008729;
end

model roux_model_2006__Na_background_current(i_bNa, V, E_Na)

  // Assignment Rules:
  i_bNa := g_bNa * (V - E_Na);

  // Variable initializations:
  g_bNa = 0.003263;
end

model roux_model_2006__membrane(V, time_, i_CaL, i_Kdr, i_KCa, i_ClCa, i_cationic, i_NaK, i_pCa, i_bCa, i_bK, i_bNa)

  // Rate Rules:
  V' = -(1 ) / cap * (i_CaL + i_Kdr + i_KCa + i_ClCa + i_cationic + i_NaK + i_pCa + i_bCa + i_bK + i_bNa);

  // Variable initializations:
  V = -60;
  cap = 0.00002;
end

model roux_model_2006__model_parameters(R, T, F, Nai, Nao, Cai, Cao, Ki, Ko, Cli, Clo, time_)

  // Assignment Rules:
  Cai := C + upeak + peak + plat;
  upeak := piecewise( up , time_ < x1 + x2 , 0 );
  up := piecewise( 0 , time_ < x1 , (time_ - x1) * A / x2 );
  peak := piecewise( 0 , time_ < x0 , A * exp(-((time_ - x0)) / t36) );
  plat := B / (1 + exp((time_ - (x1 + p + ds)) / n)) - B / (1 + exp((time_ - (x1 + p)) / n));
  x0 := x1 + x2;

  // Variable initializations:
  R = 8314.472;
  T = 310;
  F = 96485.3415;
  Nai = 12;
  Nao = 130;
  Cao = 2;
  Ki = 150;
  Ko = 5;
  Cli = 55;
  Clo = 140;
  A = 0.0008;
  B = 0.00008;
  C = 0.00012;
  x1 = 15;
  x2 = 0.8;
  ds = 30;
  p = 0.4;
  n = 0.2;
  t36 = 1.5;
end

model roux_model_2006____main()

  // Sub-modules, and any changes to those submodules:
  environment: roux_model_2006__environment(time_);
  reversal_potentials: roux_model_2006__reversal_potentials(E_Na, E_Ca, E_K, E_Cl, R, T, F, time_, Nai, Nao, Cai, Cao, Ki, Ko, Cli, Clo);
  delayed_rectifier_K_current: roux_model_2006__delayed_rectifier_K_current(i_Kdr, time_, V, E_K, xa, xi1, xi2);
  L_type_Ca_current: roux_model_2006__L_type_Ca_current(i_CaL, time_, V, Cai, Cao, R, T, F, d, f);
  Ca_activated_K_current: roux_model_2006__Ca_activated_K_current(i_KCa, time_, V, Cai, E_K, R, T, F, xCa1, B);
  Ca_activated_Cl_current: roux_model_2006__Ca_activated_Cl_current(i_ClCa, V, Cai, E_Cl);
  nonspecific_cationic_current: roux_model_2006__nonspecific_cationic_current(i_cationic, time_, V, Cai, Cao, Nai, Nao, Ki, Ko, R, T, F, ns);
  Ca_pump_current: roux_model_2006__Ca_pump_current(i_pCa, Cai);
  Na_K_pump_current: roux_model_2006__Na_K_pump_current(i_NaK, V, Nai, Ko);
  Ca_background_current: roux_model_2006__Ca_background_current(i_bCa, V, E_Ca);
  K_background_current: roux_model_2006__K_background_current(i_bK, V, E_K);
  Na_background_current: roux_model_2006__Na_background_current(i_bNa, V, E_Na);
  membrane: roux_model_2006__membrane(V, time_, i_CaL, i_Kdr, i_KCa, i_ClCa, i_cationic, i_NaK, i_pCa, i_bCa, i_bK, i_bNa);
  model_parameters: roux_model_2006__model_parameters(R, T, F, Nai, Nao, Cai, Cao, Ki, Ko, Cli, Clo, time_);
end
