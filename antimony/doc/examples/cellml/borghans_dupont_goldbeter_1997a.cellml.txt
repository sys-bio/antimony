//Created by libAntimony v1.3
model cellmlmod_environment()

  //Other declarations:
  var time;
end

model cellmlmod_Ca()

  // Rate Rules:
  Z' = V_in - V_2 + V_3 + (K_f * Y - K * Z)
  Y' = V_2 - V_3 - K_f * Y

  // Variable initializations:
  Z = 0.3;
  Y = 2.7;
  K_f = 1;
  K = 10;

  //Other declarations:
  var time, Z, Y, V_in, V_2, V_3, K_f, K;
end

model cellmlmod_Ca_flux()

  // Variable initializations:
  beta = 1;

  //Other declarations:
  var time, beta, Z, Y, V_in, V_2, V_3;
end

model cellmlmod_V_in()

  // Assignment Rules:
  V_in := v_0 + v_1 * beta

  // Variable initializations:
  v_0 = 1;
  v_1 = 1;

  //Other declarations:
  var V_in, v_0, v_1, beta;
end

model cellmlmod_V_2()

  // Assignment Rules:
  V_2 := V_M2 * (power(Z, 2 ) / (power(K_2, 2 ) + power(Z, 2 )))

  // Variable initializations:
  V_M2 = 6.5;
  K_2 = 0.1;

  //Other declarations:
  var Z, V_2, V_M2, K_2;
end

model cellmlmod_V_3()

  // Assignment Rules:
  V_3 := beta * R_plus * V_M3 * (power(Y, 2 ) / (power(K_y, 2 ) + power(Y, 2 )))

  // Variable initializations:
  K_y = 0.2;
  V_M3 = 50;

  //Other declarations:
  var time, Z, Y, V_3, K_y, V_M3, beta, R_plus;
end

model cellmlmod_Ca_channels()

  // Assignment Rules:
  R_plus := gamma * (rho / (1  + gamma))

  // Rate Rules:
  rho' = -((k_d * power(Z, 4 ) * rho * 1 )) + k_r * (1  - rho)

  // Variable initializations:
  rho = 0.2;
  k_d = 5000.0;
  k_r = 5.0;

  //Other declarations:
  var time, Z, rho, gamma, k_d, k_r, R_plus;
end

model cellmlmod_gamma()

  // Assignment Rules:
  gamma := a / d * power(Z, 4 ) * 1

  // Variable initializations:
  a = 10000.0;
  d = 100.0;

  //Other declarations:
  var Z, gamma, a, d;
end

model borghans_model_1997a()

  // Sub-modules, and any changes to those submodules:
  environment: cellmlmod_environment()
  Ca: cellmlmod_Ca()
  Ca_flux: cellmlmod_Ca_flux()
  V_in: cellmlmod_V_in()
  V_2: cellmlmod_V_2()
  V_3: cellmlmod_V_3()
  Ca_channels: cellmlmod_Ca_channels()
  gamma: cellmlmod_gamma()
  environment.time is Ca.time;
  Ca.time is Ca_flux.time;
  Ca.V_in is Ca_flux.V_in;
  Ca.V_2 is Ca_flux.V_2;
  Ca.V_3 is Ca_flux.V_3;
  Ca.Z is Ca_flux.Z;
  Ca.Y is Ca_flux.Y;
  Ca_flux.beta is V_in.beta;
  Ca_flux.V_in is V_in.V_in;
  Ca_flux.V_2 is V_2.V_2;
  Ca_flux.Z is V_2.Z;
  Ca_flux.time is V_3.time;
  V_in.beta is V_3.beta;
  Ca_flux.V_3 is V_3.V_3;
  V_2.Z is V_3.Z;
  Ca_flux.Y is V_3.Y;
  V_3.time is Ca_channels.time;
  V_3.Z is Ca_channels.Z;
  V_3.R_plus is Ca_channels.R_plus;
  Ca_channels.Z is gamma.Z;
  Ca_channels.gamma is gamma.gamma;
end
