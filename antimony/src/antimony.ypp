
%{
  //#define YYSTYPE double
#include <math.h>
#include <stdio.h>
#include <string>
#include <ctype.h>
#include <fstream>
#include <iostream>
#include <set>
#ifndef NSBML
#include <sbml/SBMLTypes.h>
#endif
#include "registry.h"
#include "module.h"

  class Formula;
  class ReactantList;
  class AntimonyReaction;
  class Variable;

  using namespace std;
  int yylex(void);
  void yyerror(char const *);
  bool CaselessStrCmp(const string& lhs, const string& rhs);
  Registry g_registry;
  int yylloc_first_line = 1;
  int yylloc_last_line = 1;
  std::vector<int> yylloc_last_lines;
%}

/*Bison declarations */
%union {
  char character;
  const string* word;
  double num;
  rd_type reactionDivider;
  Formula* formula;
  Formula* spacedformula;
  Module* module;
  ReactantList* reactantList;
  Variable* variable;
  Variable* variablein;
  Variable* varmaybein;
  Variable* maybein;
}

%type <character> mathThing
%type <formula> formula
%type <formula> spacedformula
%type <module> module
%type <reactantList> reactantList
%type <reactionDivider> reactionDivider
%type <variable> variable variablein varmaybein maybein

%left '(' ')' '+' '-' '*' '/' '^' ','

%token <num> NUM
%token <word> WORD MODNAME FILENAME
%token <word> MODULE END SPECIES REACTION FORMULA DNA GENE OPERATOR EVENT COMPARTMENT IN IS VAR CONST DASHES ELLIPSES FUNCTION IMPORT AT FUNCTIONWORD

%debug
%error-verbose

%% /* The grammar: */

input:          /* empty */
        |       input import {}
        |       input module { /*cout << endl << $2->ToString() << endl << endl;*/ }
        |       input modulepart {}
        |       input function {}
        |       input error {YYABORT;} 
        ;

import:         IMPORT FILENAME { if (g_registry.OpenFile(*($2))==0) YYABORT;}
        ;

module:         MODULE WORD {g_registry.NewCurrentModule($2);} '(' variableexportlist ')' modulebody END
                {
                  $$ = g_registry.CurrentModule();
                  if ($$->Finalize()) YYABORT;
                  g_registry.RevertToPreviousModule();
                }
        |       MODULE WORD {g_registry.NewCurrentModule($2);} modulebody END
                {
                  $$ = g_registry.CurrentModule();
                  if ($$->Finalize()) YYABORT;
                  g_registry.RevertToPreviousModule();
                }
        |       MODULE MODNAME {g_registry.SetError("module '" + *($2) + "' already defined."); YYABORT;}
        |       MODULE FUNCTION {g_registry.SetError("Cannot define '" + *($2) + "' as a module because it is already a defined function."); YYABORT;} 
        ;

function:       FUNCTIONWORD WORD {g_registry.NewUserFunction($2);} '(' variableexportlist ')' spacedformula END {if (g_registry.SetUserFunction($7)) YYABORT;}
        |       FUNCTIONWORD MODNAME {g_registry.SetError("Cannot use '" + *($2) +"' as a function name because it is already the name of a module."); YYABORT;}
        |       FUNCTIONWORD FUNCTION {g_registry.SetError("Cannot define '" + *($2) + "' as a new function because it is already a defined function."); YYABORT;} 
        ;

spacedformula:  formula {$$ = $1;}
        |       lineend spacedformula {$$ = $2;}
        |       spacedformula lineend {$$ = $1;}
        ;

variableexportlist:
                /* empty */ {}
        |       variable {g_registry.AddVariableToCurrentExportList($1); }
        |       variableexportlist ',' variable { g_registry.AddVariableToCurrentExportList($3); }
        ;

variable:       WORD {$$ = g_registry.AddVariableToCurrent($1); }
        |       variable '.' WORD {$$ = $1->GetSubVariable($3);
                  if ($$ == NULL) {
                    g_registry.SetError("'" + *($3) + "' is not a subvariable of '" + $1->GetNameDelimitedBy('.') + "'.");
                    YYABORT;
                  }
                }
        //|       '<' variable '>' {$$ = $2; if ($$->SetIsConst(true)) YYABORT;}
        ;

variablein:    variable IN variable {if ($1->SetCompartment($3)) YYABORT; $$ = $1;}
        ;

varmaybein:    variable {$$ = $1;}
        |      variablein {$$ = $1;}
        ;

maybein:        /* empty */ {$$ = NULL;}
        |       IN variable {$$ = $2;}
        ;

modulebody:     modulepart {}
        |       modulebody modulepart {}
        ;

modulepart:     reaction lineend {}
        |       assignment lineend {}
        |       submodule lineend {}
        |       varinitialize lineend {}
        |       dnadef lineend {}
        |       event lineend {}
        |       variablein {}
        |       lineend {}
        ;

reaction:       varmaybein ':' reactantList reactionDivider reactantList ';' formula maybein
                {
                  Variable* var = g_registry.AddNewReactionToCurrent($4, $7, $1);
                  if (var == NULL) YYABORT;
                  if ($8 != NULL) {
                    if ($1->SetCompartment($8)) YYABORT;
                  }
                }
        |       reactantList reactionDivider reactantList ';' formula maybein
                {
                  Variable* var = g_registry.AddNewReactionToCurrent($2, $5);
                  if (var == NULL) YYABORT;
                  if ($6 != NULL) {
                    if (var->SetCompartment($6)) YYABORT;
                  }
                }
        ;

reactantList:   /* empty */ {$$ = g_registry.NewBlankReactantList(); }
        |       variable {$$ = g_registry.NewBlankReactantList(); $$->AddReactant($1); }
        |       NUM variable {$$ = g_registry.NewBlankReactantList(); $$->AddReactant($2, $1); }
        |       reactantList '+' variable {$$ = $1; $1->AddReactant($3); }
        |       reactantList '+' NUM variable {$$ = $1; $1->AddReactant($4, $3); }
        ;

reactionDivider:
                '-' '>' {$$ = rdBecomes;}
        |       '-' '|' {$$ = rdInhibits;}
        |       '-' '(' {$$ = rdInfluences;}
        |       '-' WORD {if (*$2 != "o") {g_registry.SetError("'-" + *$2 + "' is not a valid set of characters to demark reactions.  Try '->' for reactions, and '-|', '-o', and '-(' for interactions."); YYABORT;} $$ = rdActivates;}
        ;

formula:        /* empty */ {$$ = g_registry.NewBlankFormula(); }
        |       ELLIPSES {$$ = g_registry.NewBlankFormula(); $$->AddEllipses();}
        |       variable {$$ = g_registry.NewBlankFormula(); $$->AddVariable($1); }
        |       NUM  {$$ = g_registry.NewBlankFormula(); $$->AddNum($1); }
        |       FUNCTION {$$ = g_registry.NewBlankFormula(); $$->AddText($1);}
        |       mathThing {$$ = g_registry.NewBlankFormula(); $$->AddMathThing($1); }
        |       formula ELLIPSES {$$ = $1; $1->AddEllipses();}
        |       formula variable {$$ = $1; $1->AddVariable($2); }
        |       formula NUM  {$$ = $1; $1->AddNum($2); }
        |       formula FUNCTION {$$ = $1; $1->AddText($2);}
        |       formula mathThing {$$ = $1; $1->AddMathThing($2); }
        |       formula '<' '=' {$$ = $1; $1->AddMathThing('<'); $1->AddMathThing('='); }
        |       formula '>' '=' {$$ = $1; $1->AddMathThing('>'); $1->AddMathThing('='); }
        |       formula '=' '=' {$$ = $1; $1->AddMathThing('='); $1->AddMathThing('='); }
        |       formula '!' '=' {$$ = $1; $1->AddMathThing('!'); $1->AddMathThing('='); }
        |       formula '&' '&' {$$ = $1; $1->AddMathThing('&'); $1->AddMathThing('&'); }
        |       formula '|' '|' {$$ = $1; $1->AddMathThing('|'); $1->AddMathThing('|'); }
        ;

mathThing:      '+' {$$ = '+';}
        |       '-' {$$ = '-';}
        |       '*' {$$ = '*';}
        |       '/' {$$ = '/';}
        |       '(' {$$ = '(';}
        |       ')' {$$ = ')';}
        |       '^' {$$ = '^';}
        |       ',' {$$ = ',';}
        |       '>' {$$ = '>';}
        |       '<' {$$ = '<';}
        |       '!' {$$ = '!';}
        ;

lineend:        ';' {}
        |       '\n' {}
        ;

assignment:     varmaybein '=' formula {if ($1->SetFormula($3)) YYABORT; }
        |       varmaybein IS variable {if ($1->Synchronize($3)) YYABORT;}
        |       varmaybein ':' '=' formula {if ($1->SetAssignmentRule($4)) YYABORT;}
        |       varmaybein '\'' '=' formula {if ($1->SetRateRule($4)) YYABORT;}
        ;

submodule:      varmaybein ':' MODNAME '(' {if ($1->SetModule($3)) YYABORT;} variableimportlist ')' maybein {if ($8 != NULL) {if ($1->SetCompartment($8)) YYABORT;}}
        |       MODNAME '(' {if(g_registry.CurrentModule()->SetModule($1)) YYABORT;} variableimportlist ')' maybein {if ($6 != NULL) {if (g_registry.SetCompartmentOfCurrentSubmod($6)) YYABORT;}}
        ;
variableimportlist:
                /* empty */ {}
        |       variable {if (g_registry.AddVariableToCurrentImportList($1)) YYABORT; }
        |       variableimportlist ',' variable { if (g_registry.AddVariableToCurrentImportList($3)) YYABORT; }
        ;

varinitialize:  specinit { }
        |       formulainit { }
        |       reactioninit { }
        |       dnainit { }
        |       geneinit { }
        |       operatorinit { }
//        |       eventinit { }
        |       compartmentinit { }
        |       varconstinit { }
        ;

specinit:       SPECIES varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varSpeciesUndef)) YYABORT; }
        |       VAR SPECIES varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varSpeciesUndef)) YYABORT; }
        |       CONST SPECIES varmaybein {g_registry.SetConstness(constCONST); $3->SetRegConst(); if ($3->SetType(varSpeciesUndef)) YYABORT; }
        |       specinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varSpeciesUndef)) YYABORT; }
        ;

formulainit:    FORMULA varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varFormulaUndef)) YYABORT; }
        |       VAR FORMULA varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varFormulaUndef)) YYABORT; }
        |       CONST FORMULA varmaybein {g_registry.SetConstness(constCONST); $3->SetRegConst(); if ($3->SetType(varFormulaUndef)) YYABORT; }
        |       formulainit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varFormulaUndef)) YYABORT; }
        ;

reactioninit:   REACTION varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varReactionUndef)) YYABORT; }
        |       VAR REACTION varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varReactionUndef)) YYABORT; }
        |       CONST REACTION {g_registry.SetError("Reactions may not be set 'const'."); YYABORT; }
        |       reactioninit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varReactionUndef)) YYABORT; }
        ;

dnainit:        DNA varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varDNA)) YYABORT; }
        |       VAR DNA varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varDNA)) YYABORT; }
        |       CONST DNA varmaybein {g_registry.SetConstness(constCONST); $3->SetRegConst(); if ($3->SetType(varDNA)) YYABORT; }
        |       dnainit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varDNA)) YYABORT; }
        ;

geneinit:       GENE varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varReactionGene)) YYABORT; }
        |       VAR GENE varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varReactionGene)) YYABORT; }
        |       CONST GENE varmaybein {g_registry.SetError("Genes may not be set 'const'."); YYABORT; }
        |       geneinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varReactionGene)) YYABORT; }
        ;

operatorinit:   OPERATOR varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varFormulaOperator)) YYABORT; }
        |       VAR OPERATOR varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varFormulaOperator)) YYABORT; }
        |       CONST OPERATOR varmaybein {g_registry.SetConstness(constCONST); $3->SetRegConst(); if ($3->SetType(varFormulaOperator)) YYABORT; }
        |       operatorinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varFormulaOperator)) YYABORT; }
        ;

//Decided to only allow declaration of events in context, so we never get events with no event assignments.
/*
eventinit:      EVENT varmaybein {g_registry.SetConstness(constVAR); $2->SetRegConst(); if ($2->SetType(varEvent)) YYABORT; }
        |       VAR EVENT varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varEvent)) YYABORT; }
        |       CONST EVENT varmaybein {g_registry.SetError("Events may not be set 'const'."); YYABORT; }
        |       eventinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varEvent)) YYABORT; }
        ;
*/

compartmentinit:
                COMPARTMENT varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varCompartment)) YYABORT; }
        |       VAR COMPARTMENT varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varCompartment)) YYABORT; }
        |       CONST COMPARTMENT varmaybein {g_registry.SetConstness(constCONST); $3->SetRegConst(); if ($3->SetType(varCompartment)) YYABORT; }
        |       compartmentinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varCompartment)) YYABORT; }
        ;

varconstinit:   VAR varmaybein {g_registry.SetConstness(constVAR); $2->SetRegConst();}
        |       CONST varmaybein {g_registry.SetConstness(constCONST); $2->SetRegConst();}
        |       varconstinit ',' varmaybein {$3->SetRegConst();}
        ;

dnadef:         dnastrand {if (g_registry.SaveWorkingStrand()) YYABORT;}
        |       varmaybein ':' dnastrand {if (g_registry.SetStrandAs($1)) YYABORT;}
        ;

dnastrand:      DASHES variable {if (g_registry.SetNewUpstreamOpen($2)) YYABORT;}
        |       DASHES dnamiddle {g_registry.SetOpenUpstream(); }
        |       dnamiddle variable {if (g_registry.SetDownstreamEnd($2)) YYABORT;}
        |       DASHES dnamiddle variable {g_registry.SetOpenUpstream(); if(g_registry.SetDownstreamEnd($3)) YYABORT;}
        |       dnamiddle { }
        ;

dnamiddle:      variable DASHES {if (g_registry.SetNewDownstreamOpen($1)) YYABORT;}
        |       dnamiddle variable DASHES {if (g_registry.SetDownstreamOpen($2)) YYABORT;}
        ;

event:          AT formula ':' {if (g_registry.SetNewCurrentEvent($2)) YYABORT;} assignmentlist {}
        |       varmaybein ':' AT formula ':' {if (g_registry.SetNewCurrentEvent($4, $1)) YYABORT;} assignmentlist {}
        |       varmaybein ':' AT formula ':' '\n' {if (g_registry.SetNewCurrentEvent($4, $1)) YYABORT;} assignmentlist {}
        ;

assignmentlist: variable '=' formula {if (g_registry.AddResultToCurrentEvent($1, $3)) YYABORT;}
        |       variable '=' formula ':' assignmentlist {if (g_registry.AddResultToCurrentEvent($1, $3)) YYABORT;}
        |       variable '=' formula ':' '\n' assignmentlist {if (g_registry.AddResultToCurrentEvent($1, $3)) YYABORT;}
        ;

%%


void yyerror(char const *s)
{
  g_registry.SetError(s);
}

int yylex(void)
{
  char cc = 0;
  g_registry.input->get(cc);

  //If we're done with the file:
  if (g_registry.input->eof()) {
    if (g_registry.SwitchToPreviousFile()) {
      return 0;
    }
    else {
      yylloc_first_line = yylloc_last_lines.back();
      yylloc_last_line = yylloc_last_lines.back();
      yylloc_last_lines.pop_back();
      return yylex();
    }
  }
  if (!g_registry.input->good()) {
    //Something else went wrong!
    g_registry.SetError("The input file is no longer good, for an unknown reason.");
    return -1;
  }

  yylloc_first_line = yylloc_last_line;

  // Skip white space.
  while (cc == ' ' ||
         cc == '\t') {
    g_registry.input->get(cc);
  }
  // Skip carriage returns after '\':
  if (cc == '\\') {
    g_registry.input->get(cc);
    if (cc == '\r' || cc == '\n') {
      while (cc == '\r' || cc == '\n') {
	g_registry.input->get(cc);
      }
      ++yylloc_last_line;
      g_registry.input->unget();
      return yylex();
    }
    else {
      g_registry.input->unget();
      cc = '\\';
    }
  }

  // Parse words
  if (isalpha(cc) || cc == '_') {
    string word;
    while ((isalpha(cc) || isdigit(cc) || cc == '_') && !g_registry.input->eof()) {
      word += cc;
      g_registry.input->get(cc);
    }
    g_registry.input->unget();
    if (CaselessStrCmp(word, "module")) {
      return MODULE;
    }
    if (CaselessStrCmp(word, "model")) {
      return MODULE;
    }
    if (CaselessStrCmp(word, "end")) {
      return END;
    }
    if (CaselessStrCmp(word, "species")) {
      return SPECIES;
    }
    if (CaselessStrCmp(word, "formula")) {
      return FORMULA;
    }
    if (CaselessStrCmp(word, "reaction")) {
      return REACTION;
    }
    if (CaselessStrCmp(word, "DNA")) {
      return DNA;
    }
    if (CaselessStrCmp(word, "gene")) {
      return GENE;
    }
    if (CaselessStrCmp(word, "operator")) {
      return OPERATOR;
    }
    if (CaselessStrCmp(word, "compartment")) {
      return COMPARTMENT;
    }
    if (CaselessStrCmp(word, "in")) {
      return IN;
    }
    if (CaselessStrCmp(word, "is")) {
      return IS;
    }
    if (CaselessStrCmp(word, "var")) {
      return VAR;
    }
    if (CaselessStrCmp(word, "const")) {
      return CONST;
    }
    if (CaselessStrCmp(word, "ext")) {
      return CONST;
    }
    if (CaselessStrCmp(word, "import")) {
      return IMPORT;
    }
    if (CaselessStrCmp(word, "event")) {
      return EVENT;
    }
    if (CaselessStrCmp(word, "at")) {
      return AT;
    }
    if (CaselessStrCmp(word, "function")) {
      return FUNCTIONWORD;
    }
    
    if (g_registry.IsFunction(word) != NULL) {
      yylval.word = g_registry.IsFunction(word);
      return FUNCTION;
    }
    //Otherwise, it's a user-defined variable:
    yylval.word = g_registry.AddWord(word);
    //cout << "\tRead word '" << word << "'." << endl;
    if (g_registry.IsModuleName(word)) {
      return MODNAME;
    }
    return WORD;
  }

  // Parse numbers
  if (isdigit(cc)) {
    double number;
    g_registry.input->unget();
    *g_registry.input >> number;
    yylval.num = number;
    //Now check to see if the last thing read was an 'E'/'e'
    g_registry.input->unget();
    g_registry.input->get(cc);
    if (cc == 'e' || cc == 'E') {
      g_registry.input->unget();
    }
    return NUM;
  }

  //Parse reaction dividers and dashes
  if (cc == '-') {
    g_registry.input->get(cc);
    if (cc == '-') {
      while (cc == '-') {
        g_registry.input->get(cc);
      }
      g_registry.input->unget();
      return DASHES;
    }
    g_registry.input->unget();
    cc = '-';
    return cc;
  }

  //Skip comments:
  if (cc == '/') {
    g_registry.input->get(cc);
    if (cc == '/') {
      while (cc != '\n' && cc != '\r') {
        g_registry.input->get(cc);
      }
    }
    else if (cc == '*') {
      bool nextstar = false;
      g_registry.input->get(cc);
      while ((!g_registry.input->eof()) && !(nextstar && cc == '/')) {
        if (cc == '*') {
          nextstar = true;
        }
        else {
          nextstar = false;
        }
        g_registry.input->get(cc);
      }
    }
    else {
      g_registry.input->unget();
      cc = '/';
    }
  }

  //Parse ellipses
  if (cc == '.') {
    char c1, c2;
    g_registry.input->get(c1);
    g_registry.input->get(c2);
    if (c1=='.' && c2=='.') {
      return ELLIPSES;
    }
    g_registry.input->unget();
    g_registry.input->unget();
  }

  //Parse filenames
  if (cc == '"') {
    string filename;
    long ccount = 0;
    g_registry.input->get(cc);
    while (cc != '"' && cc != '\r' && cc != '\n' && !g_registry.input->eof()) {
      filename += cc;
      ccount++;
      g_registry.input->get(cc);
    }
    if (cc == '\r' || cc == '\n' || g_registry.input->eof()) {
      for (; ccount > 0; ccount--) {
        g_registry.input->unget();
      }
      cc = '"';
    }
    else {
      yylval.word = g_registry.AddWord(filename);
      return FILENAME;
    }
  }

  //Parse '@'
  if (cc == '@') {
    return AT;
  }

  //This converts PC and Mac end-of-line characters to \n:
  if (cc == '\r') {
    g_registry.input->get(cc);
    if (cc != '\n') {
      g_registry.input->unget();
    }
    cc = '\n';
  }
  if (cc == '\n') {
    ++yylloc_last_line;
  }
  return cc;
}

bool CaselessStrCmp(const string& lhs, const string& rhs)
{

  if (lhs.size() != rhs.size()) return false;

  for (size_t i = 0; i < lhs.size(); ++i) {
    if (toupper(lhs[i]) != toupper(rhs[i])) return false;
  }
  return true;

} /* CaselessStrCmp */
