
%{
  //#define YYSTYPE double
#include <math.h>
#include <stdio.h>
#include <string>
#include <ctype.h>
#include <fstream>
#include <iostream>
#include <set>
#include <sbml/SBMLTypes.h>

#include "antimony_api.h"
#include "registry.h"
#include "rd_type.h"
#include "stringx.h"
#include "module.h"

  class Formula;
  class ReactantList;
  class AntimonyReaction;
  class Variable;

  using namespace std;
  int yylex(void);
  void yyerror(char const *);
  bool CaselessStrCmp(const string& lhs, const string& rhs);
  Registry g_registry;
  int yylloc_first_line = 1;
  int yylloc_last_line = 1;
%}

/*Bison declarations */
%union {
  char character;
  const string* word;
  double num;
  rd_type reactionDivider;
  Formula* formula;
  Module* module;
  ReactantList* reactantList;
  AntimonyReaction* reaction;
  Variable* variable;
  Variable* localvariable;
}

%type <character> mathThing
%type <formula> formula
%type <module> module
%type <reactantList> reactantList
%type <reaction> reaction
%type <reactionDivider> reactionDivider
%type <variable> variable localvariable

%left '(' ')' '+' '-' '*' '/' '^'

%token <num> NUM
%token <word> WORD MODNAME FILENAME
%token <word> MODULE END BECOMES INHIBITS ACTIVATES INFLUENCES SPECIES REACTION DNA GENE PROMOTER OPERATOR VAR CONST DASHES ELLIPSES FUNCTION INCLUDE

%debug
%error-verbose

%% /* The grammar: */

input:          /* empty */
        |       input include {}
        |       input module { /*cout << endl << $2->ToString() << endl << endl;*/ }
        |       input modulepart {}
        |       input error {YYABORT;} 
        ;

include:        '#' INCLUDE FILENAME { if (g_registry.OpenFile(*($3))==0) YYABORT;}
        ;

module:         MODULE WORD {g_registry.NewCurrentModule($2);} '(' variableexportlist ')' modulebody END
                {
                  $$ = g_registry.CurrentModule();
                  $$->CompileExportLists();
                  g_registry.RevertToPreviousModule();
                }
        |       MODULE WORD {g_registry.NewCurrentModule($2);} modulebody END
                {
                  $$ = g_registry.CurrentModule();
                  $$->CompileExportLists();
                  g_registry.RevertToPreviousModule();
                }
        |       MODULE MODNAME {g_registry.SetError("line " + ToString(@2.last_line) + ":  module '" + *($2) + "' already defined."); YYABORT;}
        ;

variableexportlist:
                /* empty */ {}
        |       variable {g_registry.AddVariableToCurrentExportList($1); }
        |       variableexportlist ',' variable { g_registry.AddVariableToCurrentExportList($3); }
        ;

variable:       WORD {$$ = g_registry.AddVariableToCurrent($1); }
        |       variable '.' WORD {$$ = $1->GetSubVariable($3);
                  if ($$ == NULL) {
                    g_registry.SetError("'" + *($3) + "' is not a subvariable of '" + $1->GetNameDelimitedBy('.') + "'.");
                    YYABORT;
                  }
                }
        |       '<' variable '>' {$$ = $2; if ($$->SetIsConst(true)) YYABORT;}
        ;

//Nothing here needs to actually do anything, since we've already added these
// things to the current module.
modulebody:     modulepart {}
        |       modulebody modulepart {}
        ;

modulepart:     reaction lineend {}
        |       assignment lineend {}
        |       submodule lineend {}
        |       varinitialize lineend {}
        |       dnastrand lineend {}
        |       lineend {}
        ;

reaction:       variable ':' { g_registry.CurrentModule()->SetReactionVariable($1); } reactantList reactionDivider reactantList ';' formula
                {
                  $$ = g_registry.AddNewReactionToCurrent($4, $5, $6, $8, g_registry.CurrentModule()->GetReactionVariable());
                  if ($$ == NULL) YYABORT;
                }
        |       reactantList reactionDivider reactantList ';' formula
                {
                  $$ = g_registry.AddNewReactionToCurrent($1, $2, $3, $5);
                  if ($$ == NULL) YYABORT;
                }
        ;

reactantList:   /* empty */ {$$ = g_registry.NewBlankReactantList(); }
        |       variable {$$ = g_registry.NewBlankReactantList(); $$->AddReactant($1); }
        |       NUM variable {$$ = g_registry.NewBlankReactantList(); $$->AddReactant($2, $1); }
        |       reactantList '+' variable {$$ = $1; $1->AddReactant($3); }
        |       reactantList '+' NUM variable {$$ = $1; $1->AddReactant($4, $3); }
        ;

reactionDivider:
                BECOMES   {$$ = rdBecomes;}
        |       INHIBITS  {$$ = rdInhibits;}
        |       ACTIVATES {$$ = rdActivates;}
        |       INFLUENCES  {$$ = rdInfluences;}
        ;

formula:        /* empty */ {$$ = g_registry.NewBlankFormula(); }
        |       ELLIPSES {$$ = g_registry.NewBlankFormula(); $$->AddEllipses();}
        |       variable {$$ = g_registry.NewBlankFormula(); $$->AddVariable($1); }
        |       NUM  {$$ = g_registry.NewBlankFormula(); $$->AddNum($1); }
        |       FUNCTION {$$ = g_registry.NewBlankFormula(); $$->AddText($1);}
        |       mathThing {$$ = g_registry.NewBlankFormula(); $$->AddMathThing($1); }
        |       formula variable {$$ = $1; $1->AddVariable($2); }
        |       formula NUM  {$$ = $1; $1->AddNum($2); }
        |       formula FUNCTION {$$ = $1; $1->AddText($2);}
        |       formula mathThing {$$ = $1; $1->AddMathThing($2); }
        ;

mathThing:      '+' {$$ = '+';}
        |       '-' {$$ = '-';}
        |       '*' {$$ = '*';}
        |       '/' {$$ = '/';}
        |       '(' {$$ = '(';}
        |       ')' {$$ = ')';}
        |       '^' {$$ = '^';}
        |       ',' {$$ = ',';}
        ;

lineend:        ';' {}
        |       '\n' {}
        ;

assignment:     variable '=' { g_registry.SetAssignmentVariable($1); } formula {if (g_registry.GetAssignmentVariable()->SetFormula($4)) YYABORT; }
        ;

submodule:      variable ':' MODNAME '(' {if ($1->ImportModule($3)) YYABORT;} variableimportlist ')'
        |       MODNAME '(' {if(g_registry.CurrentModule()->ImportModule($1)) YYABORT;} variableimportlist ')'
        ;
variableimportlist:
                /* empty */ {}
        |       variable {if (g_registry.AddVariableToCurrentImportList($1)) YYABORT; }
        |       variableimportlist ',' variable { if (g_registry.AddVariableToCurrentImportList($3)) YYABORT; }
        |       variableimportlist ',' variable '=' localvariable {if ($3->Synchronize($5)) YYABORT; }
        ;

localvariable:  WORD {$$ = g_registry.GetImportedModuleSubVariable($1); if ($$==NULL) {g_registry.SetError("No such variable '" + *$1 + "' in this module."); YYABORT;} }
|       localvariable '.' WORD {$$ = $1->GetSubVariable($3); if ($$==NULL) {g_registry.SetError("No such variable '" + $1->GetNameDelimitedBy('.') + "." + *$3 + "' in this module."); YYABORT;} }
        ;

varinitialize:  specinit { }
        |       reactioninit { }
        |       dnainit { }
        |       geneinit { }
        |       promoterinit { }
        |       operatorinit { }
        |       constdnainit { }
        |       constpromoterinit { }
        |       constoperatorinit { }
        |       constinit { }
        ;

specinit:       SPECIES variable {if ($2->SetType(varSpeciesUndef)) YYABORT; }
        |       VAR SPECIES variable {if ($3->SetType(varSpeciesUndef)) YYABORT; }
        |       specinit ',' variable {if ($3->SetType(varSpeciesUndef)) YYABORT; }
        ;

reactioninit:   REACTION variable {if ($2->SetType(varReactionUndef)) YYABORT; }
        |       VAR REACTION variable {if ($3->SetType(varReactionUndef)) YYABORT; }
        |       reactioninit ',' variable {if ($3->SetType(varReactionUndef)) YYABORT; }
        ;

dnainit:        DNA variable {if ($2->SetType(varDNA)) YYABORT; }
        |       VAR DNA variable {if ($3->SetType(varDNA)) YYABORT; }
        |       dnainit ',' variable {if ($3->SetType(varDNA)) YYABORT; }
        ;

geneinit:       GENE variable {if ($2->SetType(varReactionGene)) YYABORT; }
        |       VAR GENE variable {if ($3->SetType(varReactionGene)) YYABORT; }
        |       geneinit ',' variable {if ($3->SetType(varReactionGene)) YYABORT; }
        ;

promoterinit:   PROMOTER variable {if ($2->SetType(varFormulaPromoter)) YYABORT; }
        |       VAR PROMOTER variable {if ($3->SetType(varFormulaPromoter)) YYABORT; }
        |       promoterinit ',' variable {if ($3->SetType(varFormulaPromoter)) YYABORT; }
        ;

operatorinit:   OPERATOR variable {if ($2->SetType(varFormulaOperator)) YYABORT; }
        |       VAR OPERATOR variable {if ($3->SetType(varFormulaOperator)) YYABORT; }
        |       operatorinit ',' variable {if ($3->SetType(varFormulaOperator)) YYABORT; }
        ;

constdnainit:
                CONST DNA variable {if ($3->SetType(varDNA)) YYABORT; 
                                    if ($3->SetIsConst(true)) YYABORT;}
        |       constdnainit ',' variable {if ($3->SetType(varDNA)) YYABORT; 
                                           if ($3->SetIsConst(true)) YYABORT;}
        ;

constpromoterinit:
                CONST PROMOTER variable {if ($3->SetType(varFormulaPromoter)) YYABORT; 
                                         if ($3->SetIsConst(true)) YYABORT;}
        |       constpromoterinit ',' variable {if ($3->SetType(varFormulaPromoter)) YYABORT; 
                                                if ($3->SetIsConst(true)) YYABORT;}
        ;

constoperatorinit:
                CONST OPERATOR variable {if ($3->SetType(varFormulaOperator)) YYABORT; 
                                         if ($3->SetIsConst(true)) YYABORT;}
        |       constoperatorinit ',' variable {if ($3->SetType(varFormulaOperator)) YYABORT; 
                                                if ($3->SetIsConst(true)) YYABORT;}
        ;

constinit:      CONST variable {if ($2->SetIsConst(true)) YYABORT;}
        |       constinit ',' variable {if ($3->SetIsConst(true)) YYABORT;}
        ;

dnastrand:      DASHES variable {if (g_registry.SetNewUpstreamOpen($2)) YYABORT;}
        |       DASHES dnamiddle {g_registry.GetWorkingStrand()->SetOpenUpstream(); }
        |       dnamiddle variable {if (g_registry.SetDownstreamEnd($2)) YYABORT;}
        |       DASHES dnamiddle variable {g_registry.GetWorkingStrand()->SetOpenUpstream(); if(g_registry.SetDownstreamEnd($3)) YYABORT;}
        |       dnamiddle { }
        ;

dnamiddle:      variable DASHES {g_registry.SetNewDownstreamOpen($1);}
        |       dnamiddle variable DASHES {g_registry.SetDownstreamOpen($2);}
        ;

%%


void yyerror(char const *s)
{
  g_registry.SetError(s);
}

int yylex(void)
{
  char cc = 0;
  g_registry.input->get(cc);

  //If we're done with the file:
  if (g_registry.input->eof()) {
    if (g_registry.SwitchToPreviousFile()) {
      return 0;
    }
    else {
      int firstl  = yylloc_first_line;
      int lastl  = yylloc_last_line;
      return yylex();
      yylloc_first_line  = firstl;
      yylloc_last_line  = lastl;
    }
  }
  if (!g_registry.input->good()) {
    //Something else went wrong!
    g_registry.SetError("The input file is no longer good, for an unknown reason.");
    return -1;
  }

  yylloc_first_line = yylloc_last_line;

  // Skip white space.
  while (cc == ' ' ||
         cc == '\t') {
    g_registry.input->get(cc);
  }

  // Parse words
  if (isalpha(cc) || cc == '_') {
    string word;
    while (isalpha(cc) || isdigit(cc) || cc == '_') {
      word += cc;
      g_registry.input->get(cc);
    }
    g_registry.input->unget();
    if (CaselessStrCmp(word, "module")) {
      return MODULE;
    }
    if (CaselessStrCmp(word, "model")) {
      return MODULE;
    }
    if (CaselessStrCmp(word, "end")) {
      return END;
    }
    if (CaselessStrCmp(word, "species")) {
      return SPECIES;
    }
    if (CaselessStrCmp(word, "reaction")) {
      return REACTION;
    }
    if (CaselessStrCmp(word, "DNA")) {
      return DNA;
    }
    if (CaselessStrCmp(word, "gene")) {
      return GENE;
    }
    if (CaselessStrCmp(word, "promoter")) {
      return PROMOTER;
    }
    if (CaselessStrCmp(word, "operator")) {
      return OPERATOR;
    }
    if (CaselessStrCmp(word, "var")) {
      return VAR;
    }
    if (CaselessStrCmp(word, "const")) {
      return CONST;
    }
    if (CaselessStrCmp(word, "ext")) {
      return CONST;
    }
    if (CaselessStrCmp(word, "include")) {
      return INCLUDE;
    }
    
    if (g_registry.IsFunction(word) != NULL) {
      yylval.word = g_registry.IsFunction(word);
      return FUNCTION;
    }
    //Otherwise, it's a user-defined variable:
    yylval.word = g_registry.AddWord(word);
    //cout << "\tRead word '" << word << "'." << endl;
    if (g_registry.IsModuleName(word)) {
      return MODNAME;
    }
    return WORD;
  }

  // Parse numbers
  if (isdigit(cc)) {
    double number;
    g_registry.input->unget();
    *g_registry.input >> number;
    yylval.num = number;
    //Now check to see if the last thing read was an 'E'/'e'
    g_registry.input->unget();
    g_registry.input->get(cc);
    if (cc == 'e' || cc == 'E') {
      g_registry.input->unget();
    }
    return NUM;
  }

  //Parse reaction dividers and dashes
  if (cc == '-') {
    g_registry.input->get(cc);
    if (cc == '>') {
      return BECOMES;
    }
    if (cc == '|') {
      return INHIBITS;
    }
    if (cc == 'o') {
      return ACTIVATES;
    }
    if (cc == '(') {
      return INFLUENCES;
    }
    if (cc == '-') {
      while (cc == '-') {
        g_registry.input->get(cc);
      }
      g_registry.input->unget();
      return DASHES;
    }
    g_registry.input->unget();
    cc = '-';
    return cc;
  }

  //Skip comments:
  if (cc == '/') {
    g_registry.input->get(cc);
    if (cc == '/') {
      while (cc != '\n' && cc != '\r') {
        g_registry.input->get(cc);
      }
    }
    else {
      g_registry.input->unget();
      cc = '/';
    }
  }

  //Parse ellipses
  if (cc == '.') {
    char c1, c2;
    g_registry.input->get(c1);
    g_registry.input->get(c2);
    if (c1=='.' && c2=='.') {
      return ELLIPSES;
    }
    g_registry.input->unget();
    g_registry.input->unget();
  }

  //Parse filenames
  if (cc == '"') {
    string filename;
    long ccount = 0;
    g_registry.input->get(cc);
    while (cc != '"' && cc != '\r' && cc != '\n' && !g_registry.input->eof()) {
      filename += cc;
      ccount++;
      g_registry.input->get(cc);
    }
    if (cc == '\r' || cc == '\n' || g_registry.input->eof()) {
      for (; ccount > 0; ccount--) {
        g_registry.input->unget();
      }
      cc = '"';
    }
    else {
      yylval.word = g_registry.AddWord(filename);
      return FILENAME;
    }
  }

  //This converts PC and Mac end-of-line characters to \n:
  if (cc == '\r') {
    g_registry.input->get(cc);
    if (cc != '\n') {
      g_registry.input->unget();
    }
    cc = '\n';
  }
  if (cc == '\n') {
    ++yylloc_last_line;
  }
  return cc;
}

bool CaselessStrCmp(const string& lhs, const string& rhs)
{

  if (lhs.size() != rhs.size()) return false;

  for (size_t i = 0; i < lhs.size(); ++i) {
    if (toupper(lhs[i]) != toupper(rhs[i])) return false;
  }
  return true;

} /* CaselessStrCmp */

int main(long argc, char** argv)
{
  //yydebug = 1;
  int retval = 0;
  for (long file=1; file<argc; file++) {
    if (strstr(argv[file], ".xml") != NULL) {
      retval = loadSBMLFile(argv[file]);
    }
    else {
      retval=loadFile(argv[file]);
    }
    if (retval == -1) {
      cout << getLastError() << endl;
    }
    else {
      cout << argv[file] << " read successfully with file handle " << ToString(retval) << "." << endl;
    }
  }
  for (size_t file=0; file<getNumFiles(); file++) {
    revertTo(file+1);
    size_t nummods = getNumModules();
    char** modnames = getModuleNames();
    for (size_t mod=0; mod<nummods; mod++) {
      cout << "Information for file " << ToString(file+1) <<", module '" << modnames[mod] << "'" << endl;
      cout << "***ToString (" << modnames[mod] << ") ***" << endl;
      cout << g_registry.GetModule(modnames[mod])->ToString().c_str() << endl << endl;
      cout << "***Jarnac (" << modnames[mod] << ") ***" << endl;
      cout << getJarnacString(modnames[mod]) << endl;
      cout << endl << "***printAllDataFor (" << modnames[mod] << ") (from the API):***" << endl;
      printAllDataFor(modnames[mod]);
      cout << endl << "***Antimony (" << modnames[mod] << ")" << endl;
      cout << getAntimonyString(modnames[mod]) << endl;
      cout << endl;
      cout << endl;
    }
    freeAll();
  }
  if (retval == -1) return 1;
  return 0;
}
