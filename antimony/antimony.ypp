
%{
  //#define YYSTYPE double
#include <math.h>
#include <stdio.h>
#include <string>
#include <ctype.h>
#include <fstream>
#include <iostream>
#include <set>
#include <sbml/SBMLTypes.h>

#include "antimony_api.h"
#include "registry.h"
#include "rd_type.h"
#include "stringx.h"
#include "module.h"

  class Formula;
  class ReactantList;
  class AntimonyReaction;
  class Variable;

  using namespace std;
  int yylex(void);
  void yyerror(char const *);
  bool CaselessStrCmp(const string& lhs, const string& rhs);
  Registry g_registry;
  int yylloc_first_line = 1;
  int yylloc_last_line = 1;
  std::vector<int> yylloc_last_lines;
%}

/*Bison declarations */
%union {
  char character;
  const string* word;
  double num;
  rd_type reactionDivider;
  Formula* formula;
  Module* module;
  ReactantList* reactantList;
  Variable* variable;
  Variable* variablein;
  Variable* varmaybein;
  Variable* maybein;
}

%type <character> mathThing
%type <formula> formula
%type <module> module
%type <reactantList> reactantList
%type <reactionDivider> reactionDivider
%type <variable> variable variablein varmaybein maybein

%left '(' ')' '+' '-' '*' '/' '^' ','

%token <num> NUM
%token <word> WORD MODNAME FILENAME
%token <word> MODULE END BECOMES INHIBITS ACTIVATES INFLUENCES SPECIES REACTION DNA GENE OPERATOR EVENT COMPARTMENT IN IS VAR CONST DASHES ELLIPSES FUNCTION IMPORT

%debug
%error-verbose

%% /* The grammar: */

input:          /* empty */
        |       input import {}
        |       input module { /*cout << endl << $2->ToString() << endl << endl;*/ }
        |       input modulepart {}
        |       input error {YYABORT;} 
        ;

import:         IMPORT FILENAME { if (g_registry.OpenFile(*($2))==0) YYABORT;}
        ;

module:         MODULE WORD {g_registry.NewCurrentModule($2);} '(' variableexportlist ')' modulebody END
                {
                  $$ = g_registry.CurrentModule();
                  if ($$->Finalize()) YYABORT;
                  g_registry.RevertToPreviousModule();
                }
        |       MODULE WORD {g_registry.NewCurrentModule($2);} modulebody END
                {
                  $$ = g_registry.CurrentModule();
                  if ($$->Finalize()) YYABORT;
                  g_registry.RevertToPreviousModule();
                }
        |       MODULE MODNAME {g_registry.SetError("module '" + *($2) + "' already defined."); YYABORT;}
        ;

variableexportlist:
                /* empty */ {}
        |       variable {g_registry.AddVariableToCurrentExportList($1); }
        |       variableexportlist ',' variable { g_registry.AddVariableToCurrentExportList($3); }
        ;

variable:       WORD {$$ = g_registry.AddVariableToCurrent($1); }
        |       variable '.' WORD {$$ = $1->GetSubVariable($3);
                  if ($$ == NULL) {
                    g_registry.SetError("'" + *($3) + "' is not a subvariable of '" + $1->GetNameDelimitedBy('.') + "'.");
                    YYABORT;
                  }
                }
        //|       '<' variable '>' {$$ = $2; if ($$->SetIsConst(true)) YYABORT;}
        ;

varmaybein:    variable {$$ = $1;}
        |      variablein {$$ = $1;}
        ;

variablein:    variable IN variable {if ($1->SetCompartment($3)) YYABORT; $$ = $1;}
        ;

maybein:        /* empty */ {$$ = NULL;}
        |       IN variable {$$ = $2;}
        ;

modulebody:     modulepart {}
        |       modulebody modulepart {}
        ;

modulepart:     reaction lineend {}
        |       assignment lineend {}
        |       submodule lineend {}
        |       varinitialize lineend {}
        |       dnadef lineend {}
        |       event lineend {}
        |       variablein {}
        |       lineend {}
        ;

reaction:       varmaybein ':' reactantList reactionDivider reactantList ';' formula maybein
                {
                  Variable* var = g_registry.AddNewReactionToCurrent($3, $4, $5, $7, $1);
                  if (var == NULL) YYABORT;
                  if ($8 != NULL) {
                    if ($1->SetCompartment($8)) YYABORT;
                  }
                }
        |       reactantList reactionDivider reactantList ';' formula maybein
                {
                  Variable* var = g_registry.AddNewReactionToCurrent($1, $2, $3, $5);
                  if (var == NULL) YYABORT;
                  if ($6 != NULL) {
                    if (var->SetCompartment($6)) YYABORT;
                  }
                }
        ;

reactantList:   /* empty */ {$$ = g_registry.NewBlankReactantList(); }
        |       variable {$$ = g_registry.NewBlankReactantList(); $$->AddReactant($1); }
        |       NUM variable {$$ = g_registry.NewBlankReactantList(); $$->AddReactant($2, $1); }
        |       reactantList '+' variable {$$ = $1; $1->AddReactant($3); }
        |       reactantList '+' NUM variable {$$ = $1; $1->AddReactant($4, $3); }
        ;

reactionDivider:
                BECOMES   {$$ = rdBecomes;}
        |       INHIBITS  {$$ = rdInhibits;}
        |       ACTIVATES {$$ = rdActivates;}
        |       INFLUENCES  {$$ = rdInfluences;}
        ;

formula:        /* empty */ {$$ = g_registry.NewBlankFormula(); }
        |       ELLIPSES {$$ = g_registry.NewBlankFormula(); $$->AddEllipses();}
        |       variable {$$ = g_registry.NewBlankFormula(); $$->AddVariable($1); }
        |       NUM  {$$ = g_registry.NewBlankFormula(); $$->AddNum($1); }
        |       FUNCTION {$$ = g_registry.NewBlankFormula(); $$->AddText($1);}
        |       mathThing {$$ = g_registry.NewBlankFormula(); $$->AddMathThing($1); }
        |       formula ELLIPSES {$$ = $1; $1->AddEllipses();}
        |       formula variable {$$ = $1; $1->AddVariable($2); }
        |       formula NUM  {$$ = $1; $1->AddNum($2); }
        |       formula FUNCTION {$$ = $1; $1->AddText($2);}
        |       formula mathThing {$$ = $1; $1->AddMathThing($2); }
        |       formula '<' '=' {$$ = $1; $1->AddMathThing('<'); $1->AddMathThing('='); }
        |       formula '>' '=' {$$ = $1; $1->AddMathThing('>'); $1->AddMathThing('='); }
        |       formula '=' '=' {$$ = $1; $1->AddMathThing('='); $1->AddMathThing('='); }
        |       formula '!' '=' {$$ = $1; $1->AddMathThing('!'); $1->AddMathThing('='); }
        |       formula '&' '&' {$$ = $1; $1->AddMathThing('&'); $1->AddMathThing('&'); }
        |       formula '|' '|' {$$ = $1; $1->AddMathThing('|'); $1->AddMathThing('|'); }
        ;

mathThing:      '+' {$$ = '+';}
        |       '-' {$$ = '-';}
        |       '*' {$$ = '*';}
        |       '/' {$$ = '/';}
        |       '(' {$$ = '(';}
        |       ')' {$$ = ')';}
        |       '^' {$$ = '^';}
        |       ',' {$$ = ',';}
        |       '>' {$$ = '>';}
        |       '<' {$$ = '<';}
        |       '!' {$$ = '!';}
        ;

lineend:        ';' {}
        |       '\n' {}
        ;

assignment:     varmaybein '=' formula {if ($1->SetFormula($3)) YYABORT; }
        |       varmaybein IS variable {if ($1->Synchronize($3)) YYABORT;}
        ;

submodule:      varmaybein ':' MODNAME '(' {if ($1->SetModule($3)) YYABORT;} variableimportlist ')' maybein {if ($8 != NULL) {if ($1->SetCompartment($8)) YYABORT;}}
        |       MODNAME '(' {if(g_registry.CurrentModule()->SetModule($1)) YYABORT;} variableimportlist ')' maybein {if ($6 != NULL) {if (g_registry.SetCompartmentOfCurrentSubmod($6)) YYABORT;}}
        ;
variableimportlist:
                /* empty */ {}
        |       variable {if (g_registry.AddVariableToCurrentImportList($1)) YYABORT; }
        |       variableimportlist ',' variable { if (g_registry.AddVariableToCurrentImportList($3)) YYABORT; }
        ;

varinitialize:  specinit { }
        |       reactioninit { }
        |       dnainit { }
        |       geneinit { }
        |       operatorinit { }
        |       eventinit { }
        |       compartmentinit { }
        ;

specinit:       SPECIES varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varSpeciesUndef)) YYABORT; }
        |       VAR SPECIES varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varSpeciesUndef)) YYABORT; }
        |       CONST SPECIES varmaybein {g_registry.SetConstness(constCONST); $3->SetRegConst(); if ($3->SetType(varSpeciesUndef)) YYABORT; }
        |       specinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varSpeciesUndef)) YYABORT; }
        ;

reactioninit:   REACTION varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varReactionUndef)) YYABORT; }
        |       VAR REACTION varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varReactionUndef)) YYABORT; }
        |       CONST REACTION {g_registry.SetError("Reactions may not be set 'const'."); YYABORT; }
        |       reactioninit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varReactionUndef)) YYABORT; }
        ;

dnainit:        DNA varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varDNA)) YYABORT; }
        |       VAR DNA varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varDNA)) YYABORT; }
        |       CONST DNA varmaybein {g_registry.SetConstness(constCONST); $3->SetRegConst(); if ($3->SetType(varDNA)) YYABORT; }
        |       dnainit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varDNA)) YYABORT; }
        ;

geneinit:       GENE varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varReactionGene)) YYABORT; }
        |       VAR GENE varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varReactionGene)) YYABORT; }
        |       CONST GENE varmaybein {g_registry.SetError("Genes may not be set 'const'."); YYABORT; }
        |       geneinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varReactionGene)) YYABORT; }
        ;

operatorinit:   OPERATOR varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varFormulaOperator)) YYABORT; }
        |       VAR OPERATOR varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varFormulaOperator)) YYABORT; }
        |       CONST OPERATOR varmaybein {g_registry.SetConstness(constCONST); $3->SetRegConst(); if ($3->SetType(varFormulaOperator)) YYABORT; }
        |       operatorinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varFormulaOperator)) YYABORT; }
        ;

eventinit:      EVENT varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varEvent)) YYABORT; }
        |       VAR EVENT varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varEvent)) YYABORT; }
        |       CONST EVENT varmaybein {g_registry.SetError("Events may not be set 'const'."); YYABORT; }
        |       eventinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varEvent)) YYABORT; }
        ;

compartmentinit:
                COMPARTMENT varmaybein {g_registry.SetConstness(constDEFAULT); $2->SetRegConst(); if ($2->SetType(varCompartment)) YYABORT; }
        |       VAR COMPARTMENT varmaybein {g_registry.SetConstness(constVAR); $3->SetRegConst(); if ($3->SetType(varCompartment)) YYABORT; }
        |       CONST COMPARTMENT varmaybein {g_registry.SetConstness(constCONST); $3->SetRegConst(); if ($3->SetType(varCompartment)) YYABORT; }
        |       compartmentinit ',' varmaybein {$3->SetRegConst(); if ($3->SetType(varCompartment)) YYABORT; }
        ;

dnadef:         dnastrand {if (g_registry.SaveWorkingStrand()) YYABORT;}
        |       varmaybein ':' dnastrand {if (g_registry.SetStrandAs($1)) YYABORT;}
        ;

dnastrand:      DASHES variable {if (g_registry.SetNewUpstreamOpen($2)) YYABORT;}
        |       DASHES dnamiddle {g_registry.SetOpenUpstream(); }
        |       dnamiddle variable {if (g_registry.SetDownstreamEnd($2)) YYABORT;}
        |       DASHES dnamiddle variable {g_registry.SetOpenUpstream(); if(g_registry.SetDownstreamEnd($3)) YYABORT;}
        |       dnamiddle { }
        ;

dnamiddle:      variable DASHES {if (g_registry.SetNewDownstreamOpen($1)) YYABORT;}
        |       dnamiddle variable DASHES {if (g_registry.SetDownstreamOpen($2)) YYABORT;}
        ;

event:          '@' formula ':' {if (g_registry.SetNewCurrentEvent($2)) YYABORT;} assignmentlist {}
        |       varmaybein ':' '@' formula ':' {if (g_registry.SetNewCurrentEvent($4, $1)) YYABORT;} assignmentlist {}
        ;

assignmentlist: variable '=' formula {if (g_registry.AddResultToCurrentEvent($1, $3)) YYABORT;}
        |       variable '=' formula ':' assignmentlist {if (g_registry.AddResultToCurrentEvent($1, $3)) YYABORT;}
        ;

%%


void yyerror(char const *s)
{
  g_registry.SetError(s);
}

int yylex(void)
{
  char cc = 0;
  g_registry.input->get(cc);

  //If we're done with the file:
  if (g_registry.input->eof()) {
    if (g_registry.SwitchToPreviousFile()) {
      return 0;
    }
    else {
      yylloc_first_line = yylloc_last_lines.back();
      yylloc_last_line = yylloc_last_lines.back();
      yylloc_last_lines.pop_back();
      return yylex();
    }
  }
  if (!g_registry.input->good()) {
    //Something else went wrong!
    g_registry.SetError("The input file is no longer good, for an unknown reason.");
    return -1;
  }

  yylloc_first_line = yylloc_last_line;

  // Skip white space.
  while (cc == ' ' ||
         cc == '\t') {
    g_registry.input->get(cc);
  }

  // Parse words
  if (isalpha(cc) || cc == '_') {
    string word;
    while (isalpha(cc) || isdigit(cc) || cc == '_') {
      word += cc;
      g_registry.input->get(cc);
    }
    g_registry.input->unget();
    if (CaselessStrCmp(word, "module")) {
      return MODULE;
    }
    if (CaselessStrCmp(word, "model")) {
      return MODULE;
    }
    if (CaselessStrCmp(word, "end")) {
      return END;
    }
    if (CaselessStrCmp(word, "species")) {
      return SPECIES;
    }
    if (CaselessStrCmp(word, "reaction")) {
      return REACTION;
    }
    if (CaselessStrCmp(word, "DNA")) {
      return DNA;
    }
    if (CaselessStrCmp(word, "gene")) {
      return GENE;
    }
    if (CaselessStrCmp(word, "operator")) {
      return OPERATOR;
    }
    if (CaselessStrCmp(word, "compartment")) {
      return COMPARTMENT;
    }
    if (CaselessStrCmp(word, "in")) {
      return IN;
    }
    if (CaselessStrCmp(word, "is")) {
      return IS;
    }
    if (CaselessStrCmp(word, "var")) {
      return VAR;
    }
    if (CaselessStrCmp(word, "const")) {
      return CONST;
    }
    if (CaselessStrCmp(word, "ext")) {
      return CONST;
    }
    if (CaselessStrCmp(word, "import")) {
      return IMPORT;
    }
    if (CaselessStrCmp(word, "event")) {
      return EVENT;
    }
    
    if (g_registry.IsFunction(word) != NULL) {
      yylval.word = g_registry.IsFunction(word);
      return FUNCTION;
    }
    //Otherwise, it's a user-defined variable:
    yylval.word = g_registry.AddWord(word);
    //cout << "\tRead word '" << word << "'." << endl;
    if (g_registry.IsModuleName(word)) {
      return MODNAME;
    }
    return WORD;
  }

  // Parse numbers
  if (isdigit(cc)) {
    double number;
    g_registry.input->unget();
    *g_registry.input >> number;
    yylval.num = number;
    //Now check to see if the last thing read was an 'E'/'e'
    g_registry.input->unget();
    g_registry.input->get(cc);
    if (cc == 'e' || cc == 'E') {
      g_registry.input->unget();
    }
    return NUM;
  }

  //Parse reaction dividers and dashes
  if (cc == '-') {
    g_registry.input->get(cc);
    if (cc == '>') {
      return BECOMES;
    }
    if (cc == '|') {
      return INHIBITS;
    }
    if (cc == 'o') {
      return ACTIVATES;
    }
    if (cc == '(') {
      return INFLUENCES;
    }
    if (cc == '-') {
      while (cc == '-') {
        g_registry.input->get(cc);
      }
      g_registry.input->unget();
      return DASHES;
    }
    g_registry.input->unget();
    cc = '-';
    return cc;
  }

  //Skip comments:
  if (cc == '/') {
    g_registry.input->get(cc);
    if (cc == '/') {
      while (cc != '\n' && cc != '\r') {
        g_registry.input->get(cc);
      }
    }
    else {
      g_registry.input->unget();
      cc = '/';
    }
  }

  //Parse ellipses
  if (cc == '.') {
    char c1, c2;
    g_registry.input->get(c1);
    g_registry.input->get(c2);
    if (c1=='.' && c2=='.') {
      return ELLIPSES;
    }
    g_registry.input->unget();
    g_registry.input->unget();
  }

  //Parse filenames
  if (cc == '"') {
    string filename;
    long ccount = 0;
    g_registry.input->get(cc);
    while (cc != '"' && cc != '\r' && cc != '\n' && !g_registry.input->eof()) {
      filename += cc;
      ccount++;
      g_registry.input->get(cc);
    }
    if (cc == '\r' || cc == '\n' || g_registry.input->eof()) {
      for (; ccount > 0; ccount--) {
        g_registry.input->unget();
      }
      cc = '"';
    }
    else {
      yylval.word = g_registry.AddWord(filename);
      return FILENAME;
    }
  }

  //This converts PC and Mac end-of-line characters to \n:
  if (cc == '\r') {
    g_registry.input->get(cc);
    if (cc != '\n') {
      g_registry.input->unget();
    }
    cc = '\n';
  }
  if (cc == '\n') {
    ++yylloc_last_line;
  }
  return cc;
}

bool CaselessStrCmp(const string& lhs, const string& rhs)
{

  if (lhs.size() != rhs.size()) return false;

  for (size_t i = 0; i < lhs.size(); ++i) {
    if (toupper(lhs[i]) != toupper(rhs[i])) return false;
  }
  return true;

} /* CaselessStrCmp */

int main(int argc, char** argv)
{
  //yydebug = 1;
  int retval = 0;
  for (long file=1; file<argc; file++) {
    if (strstr(argv[file], ".xml") != NULL) {
      retval = loadSBMLFile(argv[file]);
    }
    else {
      retval=loadFile(argv[file]);
    }
    if (retval == -1) {
      cout << getLastError() << endl;
    }
    else {
      cout << argv[file] << " read successfully with file handle " << SizeTToString(retval) << "." << endl;
    }
  }
  for (size_t file=0; file<getNumFiles(); file++) {
    revertTo(file+1);
    size_t nummods = getNumModules();
    char** modnames = getModuleNames();
    string filename(argv[file+1]);
    size_t slash = filename.find("/");
    while (slash != string::npos) {
      filename.erase(0, slash+1);
      slash = filename.find("/");
    }
    
    if (filename.find(".txt") != string::npos) {
      filename.erase(filename.find(".txt"), 4);
    }
    if (filename.find(".xml") != string::npos) {
      filename.erase(filename.find(".xml"), 4);
    }
    for (size_t mod=0; mod<nummods; mod++) {
      cout << "Information for file " << SizeTToString(file+1) <<", module '" << modnames[mod] << "'" << endl;
      cout << "***ToString (" << modnames[mod] << ") ***" << endl;
      cout << g_registry.GetModule(modnames[mod])->ToString().c_str() << endl << endl;
      cout << "***Jarnac (" << modnames[mod] << ") ***" << endl;
      cout << getJarnacString(modnames[mod]) << endl;
      cout << endl << "***printAllDataFor (" << modnames[mod] << ") (from the API):***" << endl;
      printAllDataFor(modnames[mod]);
      cout << endl << "***Antimony (" << modnames[mod] << ")" << endl;
      cout << getAntimonyString(modnames[mod]) << endl;
      cout << endl;
      cout << endl;
      string antname = "output/" + filename + "_" + modnames[mod] + "_ant.txt";
      string sbmlname = "output/" + filename + "_" + modnames[mod] + "_sbml.xml";
      string jarname = "output/" + filename + "_" + modnames[mod] + "_jar.txt";
      if (writeAntimonyFile(antname.c_str(), modnames[mod])) {
        cout << "Successfully wrote file " << antname.c_str() << endl;
      }
      else {
        cout << "Problem writing file " << antname.c_str() << endl;
      }
      if (writeSBMLFile(sbmlname.c_str(), modnames[mod])) {
        cout << "Successfully wrote file " << sbmlname.c_str() << endl;
      }
      else {
        cout << "Problem writing file " << sbmlname.c_str() << endl;
      }
      if (writeJarnacFile(jarname.c_str(), modnames[mod])) {
        cout << "Successfully wrote file " << jarname.c_str() << endl;
      }
      else {
        cout << "Problem writing file " << jarname.c_str() << endl;
      }
        
    }
    freeAll();
  }
  /* Just for testing: */
  clearPreviousLoads();
  if (argc>1) {
    int ret2 = loadFile(argv[1]);
    if (ret2 == -1) {
      cout << "Error when re-reading file " << argv[1] << ":  " << getLastError() << endl;
    }
    else {
      cout << argv[1] << " re-read successfully ." << endl;
    }
  }
  else {
    cout << "No files specified." << endl;
  }
  if (retval == -1) return 1;
  return 0;
}
